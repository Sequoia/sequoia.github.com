<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Sequoia McDowell's Blog Feed</title><link>https://sequoia.makes.software/</link><description>Occassional posts about web programming, software engineering, and JavaScript.</description><lastBuildDate>Tue, 08 Dec 2020 02:58:29 GMT</lastBuildDate><docs>https://validator.w3.org/feed/docs/rss2.html</docs><generator>These two hands üôå</generator><item><title>A Fond Farewell to My Greatest Fans</title><link>https://sequoia.makes.software/a-fond-farewell-to-my-greatest-fans</link><description>I am removing the comment forms from my website due to spam. But are spam comments all bad? Not necessarily! Some of my best comments have been spam.</description><guid isPermaLink="true">https://sequoia.makes.software/a-fond-farewell-to-my-greatest-fans</guid><pubDate>Wed, 13 May 2020 04:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>I&#39;ve been using <a href="https://getsimpleform.com/">Simple Form</a> to power the comment boxes on this (static) site for several years. I was <a href="https://jamstack.org/">JAMStack</a> before it was cool, who knew? Unfortunately, even with <a href="https://akismet.com/">Akismet</a> configured, I still get heaps of spam comments. To be honest, it&#39;s just about 100% spam. It turns out writing infrequently, deleting ones twitter account, and doing nothing to promote ones writing does not result in a huge amount of user engagement! But I digress.</p>
<p>While the spam comments are bothersome overall, I feel the need to give credit where credit is due: some of the <em>best</em> comments I&#39;ve recieved have been spam. There have been times when I&#39;m having a bad day, then I check my email and see something like this:</p>
<blockquote>
<p>Superb, what a web site it is! This weblog provides helpful data to us, keep it up.</p>
<p><em>- similar internet page, 2017</em></p>
</blockquote>
<p>Wow! Thank you <em>similar internet page</em>!! I was feeling a discouraged the day I got this, and I can&#39;t lie‚Äìthis comment made me feel a bit better. I know you&#39;re only a bot, but I choose to take the encouraging words at face value, and they make me feel appreciated.</p>
<p>So, as a farewell to my loyal spam bots, I will feature and respond to the best comments here.</p>
<h1 id="the-best-spam-comments-i-39-ve-received">
    <a class="header-anchor" href="#the-best-spam-comments-i-39-ve-received">
      <span class="header-link"></span>
    </a>
    The Best Spam Comments I&#39;ve Received</h1><blockquote>
<p>Thanks a lot for giving everyone such a brilliant chance to discover important secrets from this site. It is often very useful plus packed with a great time for me and my office co-workers to visit your web site more than three times per week to see the latest issues you will have. Not to mention, I am also always amazed for the spectacular secrets served by you. Selected 3 facts on this page are completely the simplest I&#39;ve had.</p>
<p><em>- buy cialùöís</em>, 2017</p>
</blockquote>
<p>Hi <em>buy cialùöís</em>! Thank you for the kinds words, and please give my warm regards to your coworkers. I must say I&#39;m surprised to hear you visit three times weekly! I&#39;ll have to start posting <em>a lot</em> more frequently to keep the content fresh.</p>
<blockquote>
<p>What i do not understood is in reality how you&#39;re no longer really much more well-appreciated than you may be now. You&#39;re so intelligent. You recognize thus significantly in terms of this topic, produced me in my opinion consider it from so many numerous angles. Its like women and men don&#39;t seem to be fascinated until it&#39;s something to accomplish with Lady gaga! Your individual stuffs great. Always care for it up!</p>
<p><em>- <a href="https://[removed]/sildenafil-generique-forum/">https://[removed]/sildenafil-generique-forum/</a>, 2017</em></p>
</blockquote>
<p>Oh my goodness... this comment almost makes me tear up. I <em>do</em> feel underappreciated at times, and it really means a lot to me to have someone notice the care and work I put into the content here. As for why I&#39;m not &quot;much more well-appreciated&quot; despite being &quot;so intelligent&quot; (flattery will get you nowhere!), the fact is it takes much more than intelligence or even good work to succeed. Marketing and branding are hugely important, and for better or worse, those are things I&#39;m not terribly interested in.</p>
<p>It&#39;s not unlike the joke about the Jew trying to smuggle coffee into Haifa without paying the required duties. The customs official looks in his sacks and asks him what it is he&#39;s carrying. &quot;Birdseed,&quot; the traveller replies. &quot;Since when do birds eat coffee?&quot; asks the incredulous customs officer.</p>
<p>Whereup the traveller replies with a shrug &quot;they&#39;ll eat if they want; if they don&#39;t, they won&#39;t.&quot;</p>
<p>It&#39;s in a similar spirit that I publish my posts.</p>
<blockquote>
<p>Howdy! This post could not be written any better! Looking through this post reminds me of my previous roommate! He constantly kept talking about this. I will send this article to him. Pretty sure he&#39;ll have a great read. Thanks for sharing!</p>
<p><em>- lirik lagu doa suci imam s arifin, 2017</em></p>
</blockquote>
<p>Hi <em>lirik lagu doa suci imam s arifin</em>! I am happy to share, and be sure to say &quot;hi&quot; to your roommate for me!!</p>
<blockquote>
<p>you are really a good webmaster. The web site loading speed is amazing. It seems that you are doing any unique trick. Furthermore, The contents are masterwork. you&#39;ve performed a wonderful task on this topic! </p>
<p><em>- finance, 2018</em></p>
</blockquote>
<p>Thanks <em>finance</em>! It&#39;s a static site served from Github pages so I am not surprised to learn it&#39;s fast! Furthermore, I wrote my own CSS (with a couple bits copy/pasted from a framework) and there&#39;s almost no JavaScript on the site. It&#39;s quite simple really, just keep it light &amp; static. I&#39;m glad the performance does not go unnoticed! As for the contents being a &quot;masterwork,&quot; well, I&#39;ll have to leave that for the Nobel committee to judge.</p>
<blockquote>
<p>At this moment I am going away to do my breakfast, later than having my breakfast coming over again to read other news.</p>
<p><em>- student loans, 2018</em></p>
</blockquote>
<p>Thank you for the update <em>student loans</em>! I was wondering why you hadn&#39;t finished reading, but it makes sense now. Nothing is more important than your health, so (this goes for all my readers) if you find yourself excessively hungry, thirsty, or tired while reading one of my posts, <em>take a break!</em> It will be here when you get back, I promise.</p>
<blockquote>
<p>This site was... how do you say it? Relevant!! Finally I&#39;ve found something which helped me.</p>
<p><em>- buycialis, 2018</em></p>
</blockquote>
<p>Ha! Thanks <em>buycialis</em>!!</p>
<blockquote>
<p>You&#39;re so cool! I do not believe I have read through a single thing like this before. So great to discover someone with genuine thoughts on this topic. Seriously. many thanks for starting this up. This site is one thing that&#39;s needed on the internet, someone with a bit of originality!</p>
<p><em>- importance of education, 2019</em></p>
</blockquote>
<p>This type of feedback is what keeps me doing this when it seems &quot;pointless,&quot; which it does at time. In particular I appreciate what you said about &quot;someone with a bit of originality.&quot; <em>Seriously.</em> Thank you <em>importance of education</em>!</p>
<blockquote>
<p>This is really fascinating, You&#39;re an excessively professional blogger. I&#39;ve joined your feed and stay up for looking for more of your excellent post. Also, I have shared your website in my social networks</p>
<p><em>- student loans, 2019</em></p>
</blockquote>
<p><em>student loans</em>! You&#39;re back!! How was breakfast? You&#39;ll be happy to know, incidentally, that I have added an RSS feed (at the request of a reader!), which you can find <a href="/rss.xml">here</a>.</p>
<blockquote>
<p>My brother recommended I might like this blog. He was totally right. This post actually made my day. You can not imagine just how much time I had spent for this info! Thanks!</p>
<p><em>- Recommended website, 2020</em></p>
</blockquote>
<p>You know what, <em>Recommended website</em>? Your comment made <em>my</em> day. Thank you.</p>
<blockquote>
<p>Do you mind if I quote a couple of your posts as long as I provide credit and sources back to your webpage? My blog is in the very same niche as yours and my visitors would truly benefit from a lot of the information you provide here. Please let me know if this okay with you. Thanks!</p>
<p><em>- best sandwich in North Carolina</em></p>
</blockquote>
<p>Not at all, <em>best sandwich in North Carolina</em>! Provided you include attribution, I&#39;ve no issue with quoting my work. If you can avoid copying posts from start to finish I would appreciate it, but short of that, go ham!</p>
<p>Speaking of pork, I am thrilled to get comments from the Old North State, my home sweet home! Go Heels!!</p>
<hr />

<p>With that, I&#39;ll wrap up this little tribute to my loyal and enthusiastic spam commenters. Thanks again to everyone, and if you wish to contact me it&#39;s still possible! My email address can be found on the <a href="/contact">contact page</a>.</p>
<p>Happy spamming!</p>

]]></content:encoded></item><item><title>Two Painful Ways to Misuse JavaScript's Symbol Descriptions</title><link>https://sequoia.makes.software/two-painful-ways-to-misuse-javascripts-symbol-descriptions</link><description>ES2019 introduced a new way to access the (non-unique) description property of (unique) Symbol objects. As with any new JS feature, every developer's first question is &quot;how can I shoot myself in the foot with this?&quot; Read and find out!
</description><guid isPermaLink="true">https://sequoia.makes.software/two-painful-ways-to-misuse-javascripts-symbol-descriptions</guid><pubDate>Tue, 06 Aug 2019 04:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>I was reading <a href="https://blog.tildeloop.com/posts/javascript-what%E2%80%99s-new-in-es2019#symboldescription">an article on new features in ES2019</a> earlier today, and one jumped out at me: <code>Symbol.prototype.description</code>. &quot;Wow,&quot; I thought, &quot;this feature will be <em>really</em> easy to misuse!&quot; In this post, we&#39;ll look at a couple of ways <em>you</em> can start misusing this cutting edge JavaScript feature today!</p>
<h2 id="background">
    <a class="header-anchor" href="#background">
      <span class="header-link"></span>
    </a>
    Background</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbols</a> were introduced in ECMAScript 6 (ES2015) as a way to create truly unique values in JavaScript applications. They have several cool features, but the main point of Symbols is that they are <strong>unique</strong>. Although multiple Symbols can be created with identical descriptions (e.g. <code>x = Symbol(&#39;a&#39;); y = Symbol(&#39;a&#39;)</code>), the Symbols themselves are different. The description is just a helpful label, almost like a comment: it cannot be directly accessed from the Symbol once it&#39;s created.</p>
<p>Until ES2019! Now the Symbol&#39;s description property can be directly accessed via <code>mySymbol.description</code>. Why is useful? Who cares!<sup id="footnote-one"><a href="#footnotes">1</a></sup> <em>This</em> blog post is not about what&#39;s useful, it&#39;s about misusing JavaScript for pain and heartache! So without further ado,</p>
<h2 id="method-1-comparing-symbols-by-description">
    <a class="header-anchor" href="#method-1-comparing-symbols-by-description">
      <span class="header-link"></span>
    </a>
    Method 1: Comparing Symbols by Description</h2><p>As mentioned, Symbols are <strong>unique</strong>.<sup id="footnote-two"><a href="#footnotes">2</a></sup> This means if one is created by a vendor:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// vendor/x.js</span>
catalog_id = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'cat_id'</span>);
<span class="hljs-built_in">module</span>.export = catalog_id;
</code></pre>
<p>...and then another by me...</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// lib/y.js</span>
cat_id = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'cat_id'</span>);
<span class="hljs-built_in">module</span>.export = cat_id;
</code></pre>
<p>they will be unique values:</p>
<pre><code class="hljs lang-js">catalog_id = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vendor/x.js'</span>);
cat_id = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lib/y.js'</span>);

<span class="hljs-keyword">const</span> item = {};
item[catalog_id] = <span class="hljs-number">123</span>;

<span class="hljs-comment">// Check if catalog id is set:</span>

<span class="hljs-comment">// 1. get the object keys that are symbols:</span>
<span class="hljs-keyword">const</span> symbolProps = <span class="hljs-built_in">Object</span>.getOwnPropertySymbols(item);

<span class="hljs-comment">// 2. see if that array contains catalog id</span>
hasCatalogId = symbolProps.includes(cat_id);
</code></pre>
<p><code>hasCatalogId</code> is false! What gives?? The Symbol I defined in <code>lib/y.js</code> is supposed to reference the same property as that referenced by the Symbol created in <code>vendor/x.js</code>! I created mine to match theirs (they have the same description). There must be a way to see that they are actually &quot;the same&quot;... <code>Symbol.prototype.description</code> to the rescue:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//... require(), const item etc.</span>

<span class="hljs-comment">// 1. get the DESCRIPTION of object keys that are symbols:</span>
<span class="hljs-keyword">const</span> symbolPropDescriptions = <span class="hljs-built_in">Object</span>.getOwnPropertySymbols(item)
  .map(<span class="hljs-function"><span class="hljs-params">symb</span> =&gt;</span> symb.description);

<span class="hljs-comment">// 2. see if that array contains catalog id</span>
hasCatalogId = symbolPropDescriptions.includes(cat_id.description);
</code></pre>
<p>Problem solved: <code>hasCatalogId</code> is now (correctly) <code>true</code>!</p>
<h2 id="method-2-serializing-using-description">
    <a class="header-anchor" href="#method-2-serializing-using-description">
      <span class="header-link"></span>
    </a>
    Method 2: Serializing Using Description</h2><p>In this case, I have Symbols representing the unique roles my user&#39;s might have (author, admin, etc).</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> admin = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'admin'</span>);
<span class="hljs-keyword">const</span> author = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'author'</span>);
</code></pre>
<p>I also have a collection of users with their roles defined:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> users = [
    {<span class="hljs-attr">name</span>: <span class="hljs-string">'vimukt'</span>, <span class="hljs-attr">role</span>: admin},
    {<span class="hljs-attr">name</span>: <span class="hljs-string">'danilo'</span>, <span class="hljs-attr">role</span>: admin}
];

log(users[<span class="hljs-number">0</span>].role === admin); <span class="hljs-comment">// true</span>
log(users[<span class="hljs-number">0</span>].role.description); <span class="hljs-comment">// "admin"</span>
</code></pre>
<p>I want to serialize these for some reason:</p>
<pre><code class="hljs lang-js">usersJSON = <span class="hljs-built_in">JSON</span>.stringify(users);
</code></pre>
<p>But when I deserialize, my roles are gone:</p>
<pre><code class="hljs lang-js">deserialized = <span class="hljs-built_in">JSON</span>.parse(usersJSON);
log(deserialized[<span class="hljs-number">0</span>].role); <span class="hljs-comment">// undefined</span>
</code></pre>
<p><code>JSON.stringify</code> is refusing to convert my Symbol values to strings! Don&#39;t worry, with a little trickery, we can get around this limitation:</p>
<pre><code class="hljs lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serializeWithRoles</span>(<span class="hljs-params">users</span>)</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(
        users.map(<span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> {
            <span class="hljs-comment">// convert the role Symbols to strings so they serialize</span>
            user.role = user.role.description;
            <span class="hljs-keyword">return</span> user;
        })
    )
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deserializeWithRoles</span>(<span class="hljs-params">userJSON</span>)</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(userJSON)
        .map(<span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> {
            <span class="hljs-comment">// convert role strings back to symbols</span>
            user.role = <span class="hljs-built_in">Symbol</span>(user.role);
            <span class="hljs-keyword">return</span> user;
        });
}
</code></pre>
<p>Let&#39;s try it:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> usersJSON = serializeWithRoles(users);
<span class="hljs-keyword">const</span> deserialized = deserializeWithRoles(usersJSON);

log(deserialized[<span class="hljs-number">0</span>].role); <span class="hljs-comment">// Symbol(admin)</span>
log(deserialized[<span class="hljs-number">0</span>].role.description); <span class="hljs-comment">// "admin"</span>
</code></pre>
<p>Et voil√†! Serializing &amp; deserializing with our roles &quot;works&quot;, and we have Symbols at the finish, just as we did at the start.</p>
<h2 id="spoilers-why-these-methods-are-bad">
    <a class="header-anchor" href="#spoilers-why-these-methods-are-bad">
      <span class="header-link"></span>
    </a>
    Spoilers: Why These Methods Are Bad</h2><h3 id="comparing-symbols-by-description">
    <a class="header-anchor" href="#comparing-symbols-by-description">
      <span class="header-link"></span>
    </a>
    Comparing Symbols by Description</h3><p>This is bad because it breaks a major feature of Symbols: the fact that they&#39;re unique. The proper way to use a Symbol defined elsewhere is to import the that Symbol and use it directly. If it&#39;s not not exported, it probably is not meant to be used externally. If it <em>is</em> meant to be used externally but was not exported, that&#39;s a bug.</p>
<p>If you don&#39;t care about using the exact same copy of a Symbol object property or Symbol value, or you want to define such values in multiple places and compare them, a string is probably more appropriate. If you want to use the same Symbol but access it from multiple places using the description, use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for"><code>Symbol.for</code></a> (note the caveats about namespacing this type of Symbol!).</p>
<h3 id="serializing-using-description">
    <a class="header-anchor" href="#serializing-using-description">
      <span class="header-link"></span>
    </a>
    Serializing Using Description</h3><p>The fact that the built-in <code>JSON.stringify</code> method refuses to convert Symbols to a string (JSON) representation gives us a hint that doing this is probably not a good idea. In fact, it&#39;s impossible to convert a Symbol into a string and then back into the same Symbol because a) the Symbol exists uniquely only within the context of a <em>running</em> application and b) while the Symbol description may be a string which can be serialized (as we did above), <strong>the description is not the symbol</strong>.</p>
<p><img src="/img/pipe.jpeg" alt="&quot;The Treachery of Images&quot; by Ren√© Magritte"></p>
<p>Attempting to serialize and deserialize Symbols, which exist only in the context of a running application, cannot work. In our example above, while the <code>admin</code> Symbol is &quot;serialized&quot; by description string then deserialized by passing the string to <code>Symbol()</code>, <strong>each of the Symbols created in the deserialization is unique</strong>. This means that while <code>users[0].role === users[1].role</code> was true before serializing &amp; deserializing, it is false after. You could use <code>Symbol.for</code> to get around this, but at that point the Symbol is no more reliable or unique that its description, in which case why not just use the description.</p>
<h2 id="conclusion">
    <a class="header-anchor" href="#conclusion">
      <span class="header-link"></span>
    </a>
    Conclusion</h2><p>When I read of the introduction of <code>Symbol.prototype.description</code>, the antipatterns it would make easier were the first thing that came to mind. I am sure both of the methods I describe above will exist in the wild soon, so when you come across one of them remember: you heard it here first!</p>
<h2 id="footnotes">
    <a class="header-anchor" href="#footnotes">
      <span class="header-link"></span>
    </a>
    Footnotes</h2><p><sup>1</sup> <em>If you do want to learn more about the uses of Symbols, see <a href="https://www.keithcirkel.co.uk/metaprogramming-in-es6-symbols/">this informative article</a>.</em> <a href="#footnote-one" title="back up">‚§¥</a><br>
<sup>2</sup> <em>With the exception of global symbols find-or-create&#39;ed using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for"><code>Symbol.for</code></a>, but these will never have the same value as a Symbol created using <code>Symbol()</code>.</em> <a href="#footnote-two" title="back up">‚§¥</a></p>

]]></content:encoded></item><item><title>Avoiding Ticket Scope Creep While Improving Code</title><link>https://sequoia.makes.software/avoiding-ticket-scope-creep-while-improving-code</link><description>We all want to &quot;improve as we go&quot; when writing code, but how do we do this while also getting the feature development task at hand done and keeping our PRs small?</description><guid isPermaLink="true">https://sequoia.makes.software/avoiding-ticket-scope-creep-while-improving-code</guid><pubDate>Wed, 05 Jun 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>&quot;Leave code better than you found it,&quot; the idea that one should make minor improvements and refactors in the course of feature development rather than leave improvements for later, is an important strategy for staying on top of technical debt &amp; keeping your code clean. There is such a thing as ‚Äútoo much of a good thing,‚Äù however!</p>
<p>In the course of developing a feature, you might notice a library that needs upgrading, which requires some minor refactors, some repeated code to extract into functions, a small change that could result in a performance improvement, and a dozen other issues. If you attempt to address them all in the moment, two things will happen:</p>
<ol>
<li>The feature you were working on will take a week or more to finish rather than the &quot;one or two days&quot; you estimated</li>
<li>Your pull request will become enormous, making review arduous and time-consuming, further delaying feature delivery (and likely frustrating the reviewer!)</li>
</ol>
<p>The following strategies can help you stay on track with the task at hand and keep your pull requests manageable while ensuring you don&#39;t lose track of the issues you uncovered in the course of development.</p>
<h2 id="-to-do-later-list">
    <a class="header-anchor" href="#-to-do-later-list">
      <span class="header-link"></span>
    </a>
    ‚ÄúTo Do Later‚Äù List</h2><p>Upon starting a task, make a list for ‚ÄúTo Do Later‚Äù actions. When, in the course of working on Issue-A, you come across something that should be improved but a) will take time and b) is not necessary to complete Issue-A, put this item on the ‚ÄúTo Do Later‚Äù list.</p>
<p>After completing Issue-A, go over your ‚ÄúTo Do Later‚Äù items and do them (small items) or create tickets for them (larger items), as appropriate. Noting items for later allows you to stay focused on your current task without losing track of the improvement you‚Äôd like to make.</p>
<p><em>This idea was adapted from the ‚Äú<a href="https://www.lucidmeetings.com/glossary/parking-lot">Parking Lot</a>‚Äù concept for meetings.</em></p>
<h2 id="improvements-budget">
    <a class="header-anchor" href="#improvements-budget">
      <span class="header-link"></span>
    </a>
    Improvements Budget</h2><p>Upon starting a coding task (‚ÄúIssue-A‚Äù), make a numbered ‚ÄúImprovements‚Äù list (1,2,3) for code improvements. When you find a small issue you‚Äôd like to address (outside the ticket scope), fix it, and add it to the ‚ÄúImprovements‚Äù list as item one. Do this again for the second and third small issues you fix, then <strong>stop</strong>.</p>
<p>Once you‚Äôve made three small improvements, <strong>your ‚ÄúImprovement Budget‚Äù has been spent</strong>, and no more out-of-scope improvements should be worked on as part of Issue-A. Any additional out-of-scope issues must be put on the ‚ÄúTo Do Later‚Äù list.</p>
<p>This strategy is a compromise between ‚Äúfocus only on the issue at hand and don‚Äôt improve anything‚Äù and ‚Äúfix everything issue you find, as you find it, even if this means Issue-A takes weeks to complete rather than days.‚Äù The ‚Äúbudget‚Äù can of course be adjusted to a number of items besides 3.</p>
<p><em>This idea was inspired by the <a href="https://zenhabits.net/purpose-your-day-most-important-task/">Most Important Tasks strategy</a>, which also has the concept of a budget of three items.</em></p>
<h2 id="what-else-">
    <a class="header-anchor" href="#what-else-">
      <span class="header-link"></span>
    </a>
    What Else?</h2><p>Do you use these strategies, and if so are they useful to you? Do you have other strategies to balance code improvement and feature delivery? If so please let me know in the comment box below. Happy coding!</p>

]]></content:encoded></item><item><title>When to Use a Programming Framework</title><link>https://sequoia.makes.software/when-to-use-a-programming-framework</link><description>Frameworks are good when they speed up stuff you already know how to do; if they are just magic incantations and you have no idea what they‚Äôre actually doing, that‚Äôs when you run into trouble.
</description><guid isPermaLink="true">https://sequoia.makes.software/when-to-use-a-programming-framework</guid><pubDate>Fri, 15 Feb 2019 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>Against my own best judgement, I recently read a clickbait article with title like &quot;Why You Shouldn&#39;t Use Web Frameworks.&quot; While I do hold a general wariness of web application frameworks, I disagree that frameworks are bad in all cases. In fact, in many cases you&#39;d be downright crazy <em>not</em> to use a framework.</p>
<blockquote>
<p>And what cases are those, pray tell?</p>
</blockquote>
<p>Read on and find out!</p>
<h2 id="when-to-use-a-framework">
    <a class="header-anchor" href="#when-to-use-a-framework">
      <span class="header-link"></span>
    </a>
    When to Use a Framework</h2><p>In short, it makes sense to use a framework for:</p>
<ol>
<li>Prototyping: Getting an idea to a usable piece of software very quickly</li>
<li>Expediency: You <em>could</em> solve the problem the framework addresses, but someone has already come up with a good solution, and/or</li>
<li>Extending your reach: The framework helps you do something outside your core skills, which you have no interest in learning how to do</li>
</ol>
<h3 id="prototyping">
    <a class="header-anchor" href="#prototyping">
      <span class="header-link"></span>
    </a>
    Prototyping</h3><p>If you&#39;re making a website for a business idea, using Rails &amp; Bootstrap can get you up and running with layouts, login/auth, routing, admin screens, callout boxes, modals, etc. in less than a day, provided you&#39;re familiar with the tools. This is pretty amazing!</p>
<h3 id="expediency">
    <a class="header-anchor" href="#expediency">
      <span class="header-link"></span>
    </a>
    Expediency</h3><p>A friend was building a site with Drupal and he wanted to implement search with <a href="https://lucene.apache.org/solr/">Solr</a>. There was a Drupal plugin to do it, so he used that plugin. He was a skilled developer and could have written a CMS from scratch and implemented Solr search to boot, but this would have been a waste of time because <strong>someone had already done it</strong>. He wasn&#39;t using a framework out of ignorance or inability to complete the task without one, but out of expediency.</p>
<p>Likewise, writing basic HTTP routing logic and query string parsing is not a herculean task, but if someone has done it already, why reinvent the wheel? A key component to this rationale, however, is that you <em>could</em> do the task by hand if you wanted to. We&#39;ll discuss why this is important later... </p>
<h3 id="extending-your-reach">
    <a class="header-anchor" href="#extending-your-reach">
      <span class="header-link"></span>
    </a>
    Extending Your Reach</h3><p>Sometimes...</p>
<ol>
<li>you you don&#39;t know how to solve a problem from scratch</li>
<li><strong>you have no interest in learning how to do so</strong>, and</li>
<li>a framework offers a ready made solution</li>
</ol>
<p>This is a great time to use a framework!</p>
<p>If you&#39;re a python developer and you want a nicely layed out website that works well on mobile phones and looks professional, you can get there with <a href="https://getbootstrap.com/">Bootstrap</a> without spending time learning a lot of HTML, CSS, and other browser technologies. A framework is a very powerful tool in this case, <strong>extending</strong> your ability to create things far beyond your realm of expertise.</p>
<blockquote>
<p>But you <strong>should</strong> learn the underlying technologies!!</p>
<p>- Strawman Who Hates Frameworks</p>
</blockquote>
<p>If writing HTML based user interfaces is a <strong>core skill</strong> of yours (or you wish it to be), <strong>yes</strong>, you should learn the underlying technologies. But if it&#39;s not a core skill and you don&#39;t wish it to be, then learning how <a href="https://internetingishard.com/html-and-css/flexbox/">flexbox</a> works is a <strong>waste of your time</strong>. It is best to focus your time on those things you <em>do</em> wish to be an expert in, and use out-of-the-box solutions for the rest.</p>
<h2 id="when-not-to-use-a-framework">
    <a class="header-anchor" href="#when-not-to-use-a-framework">
      <span class="header-link"></span>
    </a>
    When Not to Use a Framework</h2><p>There are at least four situations where it&#39;s <em>not</em> appropriate to use a framework:</p>
<ol>
<li>When you&#39;re learning: When you are just starting on your journey to becoming a professional programmer</li>
<li>Because it&#39;s all you know: Not everything is a nail, you should have more tools than just a hammer</li>
<li>When it&#39;s overkill: When the framework has ten features and you only need one</li>
<li>When it makes absolutely no sense: More common than you&#39;d think!</li>
</ol>
<h3 id="learning">
    <a class="header-anchor" href="#learning">
      <span class="header-link"></span>
    </a>
    Learning</h3><p>This is the counterpoint to the &quot;use a framework if you don&#39;t care to learn the underlying technologies&quot; argument. If you <em>do</em> want to learn and develop expertise in the underlying technologies, a framework is not a good way to start, in my opinion.</p>
<p>For example, if you are just getting started with web programming, and want to become a professional JavaScript programmer, <strong>do not start out by using Angular or React/Redux/Webpack!!</strong> These tools assume a high degree of familiarity with JavaScript. They are built for professionals to speed development and scaling of complex applications. <strong>They are not built to help beginners learn JavaScript &amp; HTML.</strong></p>
<p>Starting your learning journey with a big framework has many disadvantages:</p>
<ol>
<li>It&#39;s likely to be overwhelming and confusing</li>
<li>You&#39;re dependant on the framework, and if you need to augment or extend its behavior you won&#39;t know how</li>
<li>You&#39;ll need to rely on &quot;experts&quot; to help you when you get stuck, because you&#39;ll lack the skills needed to actually understand the framework internals once it becomes necessary to do so</li>
<li>It doesn&#39;t teach you the fundamentals of the language or environment, so you&#39;ll be stuck using that framework until you bite the bullet and actually learn the underlying tools</li>
<li>You won&#39;t know <em>why</em> the framework does what it does‚Äìthis understanding only comes from working without a framework</li>
</ol>
<p>Instead of starting with a framework, just start with HTML, JavaScript, and a tab pinned to <a href="https://devdocs.io/">https://devdocs.io/</a>. Try stuff out! Read the docs! Don&#39;t be afraid to write &quot;bad&quot; code‚Äìdoing so is essential to learning.</p>
<p>When certain tasks become tedious, you&#39;ll know it&#39;s time to pull in a library. Eventually you&#39;ll get to a point where you say &quot;gee, I wish there were an easier way to do X&quot;, for example, create HTTP requests. At that point you pull in <a href="https://github.com/axios/axios">a library to do that task</a>. Whereas a framework gives you a full toolbox and a set of instructions, writing by hand and pulling in libraries as needed <strong>will help you understand why it is useful to use that tool.</strong>, which is a crucial to programming effectively, with or without a framework!</p>
<h3 id="it-39-s-all-you-know">
    <a class="header-anchor" href="#it-39-s-all-you-know">
      <span class="header-link"></span>
    </a>
    It&#39;s All You Know</h3><p>If all you know is React/Webpack, you will struggle to solve problems that React was not designed to solve. Ideally, you should analyze a business problem first, then decide what the best tool is to solve that problem. If all you have is one tool, you are not capable of doing this.</p>
<p>Having only one tool that you know frequently leads to the next two framework-use-antipatterns...</p>
<h3 id="overkill">
    <a class="header-anchor" href="#overkill">
      <span class="header-link"></span>
    </a>
    Overkill</h3><p>Imagine you have a bunch of <acronym title="Internet of Things">IoT</acronym> thermometers, and they need a server to periodically send data to, which will write that data to a <acronym title="Comma Separated Values">CSV</acronym> file. This server needs exactly 1 endpoint: <code>record_temperature</code>.</p>
<p>If all you know is Ruby on Rails, you will probably create a new Rails app with a database, a complex &amp; powerful <acronym title="Object Relational Mapper">ORM</acronym>, models, controllers, flexible authentication options, admin routes, json marshalling, HTML templating, and dozens of other features. This is overkill! Furthermore, the tool isn&#39;t even built to do what you need it to do (Rails is designed to work on a database, not a single CSV file). If you learned &quot;Ruby&quot; to start, rather than &quot;Ruby on Rails&quot;, you would be able to easily build a tiny server, probably with one single file and zero dependencies, and this is guaranteed to be cheaper to run and easier to maintain.</p>
<h3 id="when-it-makes-no-sense">
    <a class="header-anchor" href="#when-it-makes-no-sense">
      <span class="header-link"></span>
    </a>
    When It Makes No Sense</h3><p>Once, for a coding test, my employer asked engineering job candidates to build a sample application that took text as input (from the command line), did some processing, and output some other text. The candidate could choose whatever language they were most comfortable with. A typical solution might contain two or three source files of Java, Python, or JavaScript (Node.js).</p>
<p>I was reviewing one candidate&#39;s submission, and found a half dozen directories, config files for eslint, vscode and webpack, several web-font files, an image optimization pipeline, all of React.js and far more.</p>
<p><img src="/img/doesnt-make-sense.png" alt="It Doesn&#39;t Make Sense"></p>
<p>The candidate had clearly learned to use <code>create-react-app</code> to start projects, and had learned no other way. That lead them to submit a solution one hundredfold more complex than was needed, and that didn&#39;t meet the requirements‚Äìwe didn&#39;t ask ask for a web app! This is an extreme case but it illustrates the fact that if you only know one tool, you will invariably attempt to use it to solve problems it&#39;s not well suited for.</p>
<h2 id="conclusion">
    <a class="header-anchor" href="#conclusion">
      <span class="header-link"></span>
    </a>
    Conclusion</h2><p>Programming frameworks can be useful tools, but they can only be deployed appropriately if you&#39;ve learned enough to be able to pick the right tool for the job. To learn this skill, you must first learn to work <em>without</em> frameworks.</p>
<p>Put another way, the best way to ensure you use frameworks properly (as a beginner) is to not use them at all. Does that make sense?</p>
<h1 id="comments">
    <a class="header-anchor" href="#comments">
      <span class="header-link"></span>
    </a>
    Comments</h1><blockquote>
<p>I remember that my first contact with the world of web apps was using Ruby on Rails. It surely felt like magic and it was amazing working with the framework, but years later I started struggling to understand simple HTTP requests and MVC concepts. Therefore, I couldn&#39;t have put it better: the better way to start learning how to build professional web apps is to start with just a piece of wood, a hammer and a nail - but not with an IKEA box with a book containing complicated instructions. Thanks Sequoia!</p>
</blockquote>
<p>- <a href="https://leosl.github.io">Leonardo Lima</a>, <time datetime="2019-02-17 18:32:33 UTC">February 16, 2019</time></p>
<p>Thank you for the generous feedback, and I&#39;m glad to hear this post reflects your experience well. I like your &quot;Ikea&quot; analogy‚ÄìI kept struggling for analogy around a gas-powered ditch digger vs. a shovel, but Ikea furniture is much better. Cheers!</p>

]]></content:encoded></item><item><title>The Rabbi and the Open Source Project</title><link>https://sequoia.makes.software/the-rabbi-and-the-open-source-project</link><description>A rabbi, an √©lite open source project maintainer, and a workaday developer walk into a tech conference
</description><guid isPermaLink="true">https://sequoia.makes.software/the-rabbi-and-the-open-source-project</guid><pubDate>Tue, 30 Oct 2018 04:00:00 GMT</pubDate><content:encoded><![CDATA[
<hr>
<p>A rabbi finds himself at a tech conference, perusing the vendor booths, when he is approached by a Frustrated User who has a pressing need to vent.</p>
<p>&quot;Rabbi, can you believe how stuck up and unfriendly these Programming √âlites are?&quot; The User asks. &quot;I am struggling to keep my head above water with all the new frameworks and tools coming out daily, and the documenation for these libraries are terrible to non-existent, but when I post a polite question on Github about about a problem I&#39;m having, someone closes my issue, tells me to learn programming basics &amp; says I should read the source and improve the docs myself!</p>
<p>&quot;I&#39;m trying to <em>understand</em> the thing, how am I supposed to write the docs? And what an insulting thing to say, &#39;go read a book on programming.&#39; Isn&#39;t this a terrible way to treat a beginner trying to ask a question &amp; learn?&quot;</p>
<p>The rabbi considers the matter for a few moments, then responds: &quot;You&#39;re right.&quot;</p>
<p>The User leaves satisfied, but the rabbi is approached by second person. &quot;Rabbi,&quot; says The Maintainer, &quot;I overheard your conversation, and I want to tell you different story.</p>
<p>&quot;I maintain a very popular library, <em>for free</em>, and every day I get feature demands, people getting angry at me, people expecting to be spoon-fed answers without reading the documenation or the source code, and thinking someone else is going to do the work of fixing bugs, writing documenation, creating new features, and all the other work of maintaining an open source library, when in fact it&#39;s <em>their</em> job just as much as mine. Don&#39;t you agree these users are horribly entitled?&quot;</p>
<p>The rabbi thinks for a moment then looks at The Maintainer and says &quot;You&#39;re right.&quot; The Maintainer, satisfied he&#39;s won the rabbi to his way of thinking, walks off towards the speaker lounge.</p>
<p>A vendor, having overheard both exchanges, calls the rabbi over to his booth. &quot;Rabbi, you just told The User he was right, but then you turned around and told The Maintainer he was right&mdash;they can&#39;t both be right!</p>
<p>The rabbi thinks a minute. &quot;You&#39;re right!&quot;</p>
<h2 id="-em-nota-bene-em-">
    <a class="header-anchor" href="#-em-nota-bene-em-">
      <span class="header-link"></span>
    </a>
    <em>Nota Bene</em></h2><p>I drafted this post in January of 2016 and didn&#39;t get around to posting it for a few years. If you&#39;d like it to be topical for 2018, pretend one party is the developer of a popular open source project who&#39;s <a href="https://www.theregister.co.uk/2018/10/16/mongodb_licensning_change/">frustrated about people making money off the software and not contributing</a>, and the other is a SAAS vendor who feels that if the software is free it&#39;s free, and the developer needs to live with that choice, or any other two parties who can&#39;t both be right.</p>

]]></content:encoded></item><item><title>Conference Tips</title><link>https://sequoia.makes.software/conference-tips</link><description>Some thoughts on getting the most out of tech conferences.</description><guid isPermaLink="true">https://sequoia.makes.software/conference-tips</guid><pubDate>Mon, 15 Jan 2018 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>I&#39;ve travelled to a number of tech conferences over the years and learned a few things along the way. Here are some of the strategies I&#39;ve developed for getting the most out of a conference:</p>
<ol>
<li><a href="#-bring-food">ü•ó Bring Food</a></li>
<li><a href="#-pace-yourself-">üèÉ‚Äç Pace Yourself!</a></li>
<li><a href="#-put-your-laptop-away">üë©‚Äçüíª Put Your Laptop Away</a></li>
<li><a href="#-take-notes-on-paper">üìù Take Notes on Paper</a></li>
<li><a href="#-don-39-t-be-afraid-to-leave-a-talk">üö∂‚Äç‚ôÄÔ∏è Don&#39;t Be Afraid to Leave A Talk</a></li>
<li><a href="#-don-39-t-linger">‚åõÔ∏è Don&#39;t Linger</a></li>
<li><a href="#-hallway-track">üí¨ Hallway Track</a></li>
</ol>
<h2 id="-bring-food">
    <a class="header-anchor" href="#-bring-food">
      <span class="header-link"></span>
    </a>
    ü•ó Bring Food</h2><p>Conferences are usually catered, but many catering services, well, leave something to be desired. In particular, breakfasts can be rough: pastries, fruit, more pastries... you get the idea. Eating a healthy breakfast that makes you feel good is <strong>more than just a luxury</strong> when travelling: it can be the difference between having a good morning and a crummy one. Take care of your body at meal-time and it will take care of you later!</p>
<p>When I arrive in a new town for a conference that I will be spending more that one night at, immediately after checking into the hotel I head to the grocery store for:</p>
<ul>
<li>Fruit</li>
<li>Bread</li>
<li>Cheese</li>
<li>Apples</li>
<li>Yogurt</li>
</ul>
<p>Plane travel, being in a new place, eating out three times a day&mdash;<strong>this is all hard on your body</strong>! Not to mention your wallet and brain. Sometimes sitting quietly and eating a simple meal beats another hour of socializing over beers &amp; burgers. That&#39;s where the fruit, bread, and cheese come in: when you need food and a quiet break, you have a meal ready in your hotel room.</p>
<p>To summarize:</p>
<ol>
<li>Don&#39;t be 100% reliant on conference catering</li>
<li>Have a meal or two on hand to save money and brainwaves when you&#39;re tired &amp; hungry</li>
</ol>
<h2 id="-pace-yourself-">
    <a class="header-anchor" href="#-pace-yourself-">
      <span class="header-link"></span>
    </a>
    üèÉ‚Äç‚ôÄÔ∏è Pace Yourself!</h2><p>The first couple conferences I went to, I had my <em>whole</em> day planned out: this talk at 9:00am, that one at 10:00, then 11:00, 12:00, 1:00, 2:00... this is crazy! Remember: <strong>there&#39;s a limit to how much you can take in</strong>. If you do attend eight talks in a day, it&#39;s unlikely you&#39;ll be able to really focus on what you&#39;re hearing at all of them. Rather than power through eight talks in a day, pick four and give each of them your full attention&mdash;you&#39;ll get more out of it overall.</p>
<p>The <abbr title="Fear Of Missing Out">FOMO</abbr> is strong, but no matter how hard you try I guarantee you&#39;ll be missing something. So take my advice and stop worrying about it! Rather than stressing about everything you &quot;missed,&quot; you&#39;ll have a much better time if you set realistic expectations and give yourself breaks. So:</p>
<ol>
<li>Limit the number of talks per day to something reasonable (for me this is about 4 talks)</li>
<li>Don&#39;t worry about missing talks! There are always more talks. üòä</li>
<li>Take a break when you&#39;re feeling tired or frazzled. You&#39;ll enjoy the rest of the day a lot more!</li>
</ol>
<p>What to do when you&#39;re not in talks?</p>
<ul>
<li>Get some exercise at the hotel gym or walking outside</li>
<li>If you&#39;re tired: take a nap</li>
<li>Follow up on notes or questions gathered at talks</li>
<li><a href="#hallway-track">Hallway track</a></li>
</ul>
<h2 id="-put-your-laptop-away">
    <a class="header-anchor" href="#-put-your-laptop-away">
      <span class="header-link"></span>
    </a>
    üë®‚Äçüíª Put Your Laptop Away</h2><p>It&#39;s tempting to google the topic being presented, check twitter, email, try to run the code examples etc.. <strong>You do not need to travel to a conference to do this.</strong> As such, it is (in my opinion) a poor use of conference time. If you&#39;re watching a talk, tune in and pay attention! If the talk is really so uninteresting that you don&#39;t feel the need to pay attention, why stay? There are usually better places to sit and work than an auditorium seat.</p>
<h2 id="-take-notes-on-paper">
    <a class="header-anchor" href="#-take-notes-on-paper">
      <span class="header-link"></span>
    </a>
    üìù Take Notes on Paper</h2><p>Taking notes is a great way to remember what you heard, note things you want to look up later, and to capture follow-up questions. So take out your laptop and fire up Evernote, right? Wrong! When you get out your computer, <strong>it&#39;s really hard to stick to just taking notes</strong>. When you&#39;re taking notes on your computer, and you have a question, and the talk is a bit slow, and it will only take <em>just a second</em> to find the answer on google... </p>
<p>Carrying a pen or pencil and a notebook is a great strategy for those of us who are easily distracted by the wide internet. If you&#39;ve never tried this remove-the-temptation strategy, <strong>you may be surprised how much more you get you get out of a talk when you give it 100% of your attention</strong>. Paper notes <a href="http://www.pbs.org/wgbh/nova/next/body/taking-notes-by-hand-could-improve-memory-wt/">may help you retain the information better</a>, and they&#39;re useful whilst chatting at the after-party: peek at your notebook to easily recall insights and questions. (Bonus: it makes you look super organized! üòÑ)</p>
<h2 id="-don-39-t-be-afraid-to-leave-a-talk">
    <a class="header-anchor" href="#-don-39-t-be-afraid-to-leave-a-talk">
      <span class="header-link"></span>
    </a>
    üö∂‚Äç‚ôÄÔ∏è Don&#39;t Be Afraid to Leave A Talk</h2><p>I used to feel like I had to &quot;commit to&quot; a session I was watching, or that if I missed the beginning of a session it was pointless to join late. Not true! If you get five minutes into watching a talk and realize it&#39;s not what you expected or you just change your mind, <strong>quietly slip out &amp; try another talk.</strong></p>
<p>I&#39;ll admit that as a speaker, it&#39;s not my favorite thing to see people walking out of a talk I&#39;m giving. However, I know that <strong>you&#39;re at the conference to learn new things, not to flatter conference speakers</strong>. You don&#39;t owe it to anyone to sit through a talk. Furthermore, if my talk is bad and everyone sits through it just to be polite, I&#39;ll never know it&#39;s bad. Do speakers the courtesy of giving them honest feedback: if a talk is bad, don&#39;t sit through it, be honest and walk out! You&#39;ll be doing yourself and the speaker a favor.</p>
<h2 id="-don-39-t-linger">
    <a class="header-anchor" href="#-don-39-t-linger">
      <span class="header-link"></span>
    </a>
    ‚åõÔ∏è Don&#39;t Linger</h2><p>This one really comes down to personal preference, but I&#39;ve found that sticking around for the conference closing party or staying an extra day to visit the host city is rarely worth the extra time in the hotel. I used to extend trips a night or two for this reason, but I am usually so exhausted after a conference it&#39;s hard to enjoy being a tourist, and I&#39;ve found that the value of sleeping in my own bed sooner almost always outweighs the value of another evening of schmoozing.</p>
<p>There is definitely a point of diminishing returns at the end of a conference: the crowd starts to thin out, the vendors pack up, and eventually there&#39;s naught left but a lone nerd, tinkering with a new framework at an empty buffet table, or wandering the vendor floor aimlessly with her sponsor shirt and enormous backpack. It&#39;s a bit depressing, frankly. üòõ Don&#39;t feel the need to stay &#39;til the bitter end!</p>
<p>These days I try to get a flight out as close to after-closing-ceremonies as possible, or a bit before if the other option is staying an extra night.</p>
<h2 id="-hallway-track">
    <a class="header-anchor" href="#-hallway-track">
      <span class="header-link"></span>
    </a>
    üí¨ Hallway Track</h2><p>You&#39;ve probably heard this old chestnut, but it bears repeating: <strong>there&#39;s a lot more value in conferences than what you get from attending talks</strong>. Networking, trading tips, finding job leads, and making new friends: these are all things you&#39;ll find on &quot;the hallway track,&quot; i.e. by hanging out in the hallway, chatting with your peers. Conferences are <strong>the best</strong> venue for networking (read: &quot;finding work&quot;) I&#39;ve found, but you won&#39;t access this value if you&#39;re in talks all day. To get the most out of your experience, be sure to make time for the hallway track!</p>
<h2 id="the-end">
    <a class="header-anchor" href="#the-end">
      <span class="header-link"></span>
    </a>
    The End</h2><p>I hope at least one of these tips has been useful to you! If you have feedback or can think of one of the many points I missed here, please do send a comment and I&#39;ll add it below. Happy conferencing!</p>

]]></content:encoded></item><item><title>Session Management with Microservices</title><link>https://sequoia.makes.software/session-management-with-microservices</link><description>Microservices make some tasks easier and introduce some challenges where they didn't exist before. In this post we'll look at sharing sessions across microservices on the `now` platform.
</description><guid isPermaLink="true">https://sequoia.makes.software/session-management-with-microservices</guid><pubDate>Mon, 29 May 2017 04:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>The microservice architecture is the New Hot Thing in server application architecture and it presents various benefits, including ease of scaling and the ability to use multiple programming languages across one application. As we know, however, there&#39;s no such thing as free lunch! This flexibility comes with costs and presents some challenges that are not present in classic &quot;monolith&quot; applications. In this post we&#39;ll examine one such challenge: sharing sessions across services.</p>
<h2 id="sharing-sessions">
    <a class="header-anchor" href="#sharing-sessions">
      <span class="header-link"></span>
    </a>
    Sharing Sessions</h2><p>When we split authentication off from a &quot;monolith&quot; application, we have two challenges to contend with:</p>
<ol>
<li><strong>Sharing cookies between the auth server(s) and application server(s)</strong>
On one server on one domain, this was not an issue. With multiple servers on multiple domains, it is. We&#39;ll address this challenge by <strong>running all servers under one domain</strong> and proxying to the various servers. (Don&#39;t worry, it&#39;s easier than it sounds!)</li>
<li><strong>Sharing a session store across server(s)</strong>
With a single monolith, we can write sessions to disk, store them in memory, or write them to a database running on the same container. This won&#39;t work if we want to be able to scale our application server to many instances as they will not share memory or a local filesystem. We&#39;ll address this challenge by <strong>externalizing our session store and sharing it across instances</strong>.</li>
</ol>
<p>For the purposes of demonstrating session sharing, we&#39;ll be creating two simple servers: <code>writer</code>, our &quot;auth&quot; server that <em>sets and modifies</em> sessions, and <code>reader</code>, our &quot;application&quot; server that <em>checks login and reads</em> sessions. Code for this demo can be found here: <a href="https://github.com/Sequoia/sharing-cookies">https://github.com/Sequoia/sharing-cookies</a>.</p>
<p><em>NB: You may be thinking &quot;let&#39;s use JWTs! They are stateless and circumvent the cookie sharing issue completely.&quot; Using JWTs to reimplement sessions is <a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/">a bad idea for various reasons</a>, so we won&#39;t be doing it here</em></p>
<h2 id="setting-up-quot-auth-quot-server">
    <a class="header-anchor" href="#setting-up-quot-auth-quot-server">
      <span class="header-link"></span>
    </a>
    Setting up &quot;Auth&quot; Server</h2><p>In order to share sessions across servers, we&#39;ll use an external redis server to store session info. I&#39;m using a free redis instance from <a href="https://redislabs.com/">https://redislabs.com/</a> for this demo.</p>
<h3 id="setup">
    <a class="header-anchor" href="#setup">
      <span class="header-link"></span>
    </a>
    Setup</h3><p>Here we set up an express server with redis-based session tracking and run our server on port <code>8090</code>.</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// writer/index.js</span>
<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);
<span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express-session'</span>);
<span class="hljs-keyword">const</span> RedisStore = <span class="hljs-built_in">require</span>(<span class="hljs-string">'connect-redis'</span>)(session);
<span class="hljs-keyword">const</span> app = express();

<span class="hljs-keyword">const</span> redisOptions = {
  <span class="hljs-attr">url</span> : process.env.REDIS_SESSION_URL
}

<span class="hljs-keyword">const</span> sessionOptions = {
  <span class="hljs-attr">store</span>: <span class="hljs-keyword">new</span> RedisStore(redisOptions),
  <span class="hljs-attr">secret</span>: process.env.SESSION_SECRET,
  <span class="hljs-attr">logErrors</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">unset</span>: <span class="hljs-string">'destroy'</span>
}

app.use(session(sessionOptions));

app.listen(<span class="hljs-number">8090</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'WRITE server listening'</span>);
});
</code></pre>
<h3 id="environment-variables">
    <a class="header-anchor" href="#environment-variables">
      <span class="header-link"></span>
    </a>
    Environment Variables</h3><p>Our application relies on <code>REDIS_SESSION_URL</code> and <code>SESSION_SECRET</code> being available as environment variables. These are externalized both for security and to allow us to share these values across different application instances.</p>
<h3 id="routes">
    <a class="header-anchor" href="#routes">
      <span class="header-link"></span>
    </a>
    Routes</h3><p>For our demo, our express-based auth server will have three paths:</p>
<ol>
<li><p><code>/login</code>: set a user session.</p>
<pre><code class="hljs lang-js">app.get(<span class="hljs-string">'/login'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)</span>{
  <span class="hljs-comment">// .. insert auth logic here .. //</span>
  <span class="hljs-keyword">if</span>(!req.session.user){
    req.session.user = {
      <span class="hljs-attr">id</span> : <span class="hljs-built_in">Math</span>.random()
    };
  }

  res.json({
    <span class="hljs-attr">message</span> : <span class="hljs-string">'you are now logged in'</span>,
    <span class="hljs-attr">user</span> : req.session.user
  });
});
</code></pre>
</li>
<li><code>/increment</code>: increment a counter on the session (update session data)<pre><code class="hljs lang-js">app.get(<span class="hljs-string">'/increment'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incrementCounter</span>(<span class="hljs-params">req, res</span>)</span>{
  <span class="hljs-keyword">if</span>(req.session.count){
    req.session.count++;
  }<span class="hljs-keyword">else</span>{
    req.session.count = <span class="hljs-number">1</span>;
  }
  res.json({
    <span class="hljs-attr">message</span> : <span class="hljs-string">'Incremented Count'</span>,
    <span class="hljs-attr">count</span>: req.session.count
  });
});
</code></pre>
</li>
<li><code>/logout</code>: destroy a session<pre><code class="hljs lang-js">app.get(<span class="hljs-string">'/logout'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroySession</span>(<span class="hljs-params">req, res</span>)</span>{
  <span class="hljs-keyword">if</span>(req.session){
    req.session.destroy(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">done</span>(<span class="hljs-params"></span>)</span>{
      res.json({
        <span class="hljs-attr">message</span>: <span class="hljs-string">'logged out : count reset'</span>
      });
    });
  }
});
</code></pre>
</li>
</ol>
<h3 id="running-the-server">
    <a class="header-anchor" href="#running-the-server">
      <span class="header-link"></span>
    </a>
    Running the Server</h3><p>Our server is set up to run via <code>npm start</code> in our package.json file:</p>
<pre><code class="hljs lang-js">...
  <span class="hljs-string">"scripts"</span> : {
    <span class="hljs-string">"start"</span> : <span class="hljs-string">"node index.js"</span>
  }
...
</code></pre>
<p>We start by running <code>npm run</code> with the appropriate environment variables set. There are many ways to set environment variables, here we will simply pass them at startup time:</p>
<pre><code class="hljs lang-no-highlight">$ REDIS_SESSION_URL=redis://hostname:port?password=s3cr3t SESSION_SECRET=&#39;abc123&#39; npm start
</code></pre>
<p>Now, assuming redis connected properly, we can start testing our URLS</p>
<p><code>GET localhost:8090/login</code>:</p>
<pre><code class="hljs lang-json">{
  <span class="hljs-attr">"message"</span>: <span class="hljs-string">"you are now logged in"</span>,
  <span class="hljs-attr">"user"</span>: {
    <span class="hljs-attr">"id"</span>: <span class="hljs-number">0.36535326065695717</span>
  }
}
</code></pre>
<p><code>GET localhost:8090/increment</code></p>
<pre><code class="hljs lang-json">{
  <span class="hljs-attr">"message"</span>: <span class="hljs-string">"Incremented Count"</span>,
  <span class="hljs-attr">"count"</span>: <span class="hljs-number">1</span>
}
</code></pre>
<p>It works! To verify that the session is independent of the server instance, you can try shutting down the server, restarting it, and checking that your <code>user.id</code> and <code>count</code> remain intact.</p>
<h3 id="checking-our-session">
    <a class="header-anchor" href="#checking-our-session">
      <span class="header-link"></span>
    </a>
    Checking our Session</h3><p>We can see our sessions in redis by connecting with the <code>redis-cli</code>:</p>
<pre><code class="hljs lang-no-highlight">$ redis-cli -h &lt;host&gt; -p &lt;port&gt; -a &lt;password&gt;
host:43798&gt; keys *
1) &quot;sess:q5t7q67lzOsCJDca-kvT63Yk6n6kVvpL&quot;
host:43798&gt; get &quot;sess:q5t7q67lzOsCJDca-kvT63Yk6n6kVvpL&quot;
&quot;{\&quot;cookie\&quot;:{\&quot;originalMaxAge\&quot;:null,\&quot;expires\&quot;:null,\&quot;httpOnly\&quot;:true,\&quot;path\&quot;:\&quot;/\&quot;},\&quot;user\&quot;:{\&quot;id\&quot;:0.36535326065695717},\&quot;count\&quot;:1}&quot;
</code></pre>
<h2 id="setting-up-our-quot-app-quot-server">
    <a class="header-anchor" href="#setting-up-our-quot-app-quot-server">
      <span class="header-link"></span>
    </a>
    Setting up Our &quot;App&quot; Server</h2><p>The application (<code>reader</code>) server has one single path:</p>
<ol>
<li><code>/</code>: read current count.</li>
</ol>
<p>The server setup code is the same as above, with the exception that our server is run on <code>8080</code> rather than <code>8090</code> so we can run both locally at the same time.</p>
<h3 id="requiring-login">
    <a class="header-anchor" href="#requiring-login">
      <span class="header-link"></span>
    </a>
    Requiring Login</h3><p>In order to ensure users who hit our &quot;application&quot; server have logged in, we&#39;ll add a middleware that checks that the session is set and it has a <code>user</code> key:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// reader/index.js</span>
app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSession</span>(<span class="hljs-params">req, res, next</span>)</span>{
  <span class="hljs-keyword">if</span>(!req.session.user){
    <span class="hljs-comment">//alternately: res.redirect('/login')</span>
    <span class="hljs-keyword">return</span> res.json(<span class="hljs-number">403</span>, {
      <span class="hljs-string">'message'</span> : <span class="hljs-string">'Please go "log in!" (set up your session)'</span>,
      <span class="hljs-string">'login'</span>: <span class="hljs-string">'/login'</span>
    });
  }<span class="hljs-keyword">else</span>{
    next();
  }
});
</code></pre>
<p>Then we&#39;ll add our single route:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// reader/index.js</span>
app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayCount</span>(<span class="hljs-params">req, res</span>)</span>{
  res.json({
    <span class="hljs-attr">user</span> : req.session.user,
    <span class="hljs-attr">count</span>: req.session.count
  })
});
</code></pre>
<h3 id="running-the-server">
    <a class="header-anchor" href="#running-the-server">
      <span class="header-link"></span>
    </a>
    Running the server</h3><p>Start this server as we started the other:</p>
<ol>
<li>Pass the appropriate environment variables</li>
<li><code>npm run</code></li>
</ol>
<p>Now we can check that it works:</p>
<p><code>GET localhost:8080</code></p>
<pre><code class="hljs lang-json">{
  <span class="hljs-attr">"user"</span>: {
    <span class="hljs-attr">"id"</span>: <span class="hljs-number">0.36535326065695717</span>
  },
  <span class="hljs-attr">"count"</span>: <span class="hljs-number">1</span>
}
</code></pre>
<p>Try it from a private tab or different browser, where we haven&#39;t yet logged in:</p>
<p><code>GET localhost:8080</code></p>
<pre><code class="hljs lang-json">{
  <span class="hljs-attr">"message"</span>: <span class="hljs-string">"Please go \"log in!\" (set up your session)"</span>,
  <span class="hljs-attr">"login"</span>:<span class="hljs-string">"/login"</span>
}
</code></pre>
<p>It works!</p>
<h3 id="i-thought-cookies-couldn-39-t-be-shared-">
    <a class="header-anchor" href="#i-thought-cookies-couldn-39-t-be-shared-">
      <span class="header-link"></span>
    </a>
    I thought Cookies Couldn&#39;t Be Shared?!</h3><p>In fact, browsers do not take port number into consideration when determining what the host is and what cookies belong to that host! This means that we can run our auth server locally on <code>:8090</code> and the app server on <code>:8080</code> and they can share cookies, as long as we use the hostname <code>localhost</code> for both!</p>
<h2 id="deploying">
    <a class="header-anchor" href="#deploying">
      <span class="header-link"></span>
    </a>
    Deploying</h2><p>This works fine locally, now let&#39;s see it in The Cloud. We&#39;ll be using <a href="https://zeit.co/now">https://zeit.co/now</a> for hosting. <code>now</code> is microservice oriented hosting platform that allows us to easily deploy Node.js applications and compose application instances to work together, so it&#39;s a great choice for this demo!</p>
<p><code>now</code> expects node.js applications to start with <code>npm start</code>, luckily we&#39;ve already configured our application to do that, so all that&#39;s left to do is to deploy it!</p>
<pre><code class="hljs lang-no-highlight">$ cd writer
$ now     # missing environment variables...
&gt; Deploying ~/projects/demos/sharing-cookies/writer under sequoia
&gt; Using Node.js 7.10.0 (default)
&gt; Ready! https://writer-xyz.now.sh (copied to clipboard) [1s]
&gt; Synced 2 files (1.19kB) [2s]
&gt; Initializing‚Ä¶
&gt; Building
...
</code></pre>
<p>This will deploy our application to <code>now</code>, but it won&#39;t actually work, because the application will not have the environment variables it needs. We can fix this by putting the environment variables in a file called <code>.env</code> (that we <strong>do not check in to git!!!</strong>) and passing that file as a parameter to <code>now</code>. It will read the file and load those variables into the environment of our deployment.</p>
<pre><code class="hljs lang-no-highlight"># .env
REDIS_SESSION_URL=&quot;your redis url here&quot;
SESSION_SECRET=&quot;abc123&quot;
</code></pre>
<pre><code class="hljs lang-no-highlight">$ echo &#39;.env&#39; &gt;&gt; ../.gitignore  # important!!
$ now --dotenv=../.env
&gt; Deploying ~/projects/demos/sharing-cookies/writer under sequoia
&gt; Using Node.js 7.10.0 (default)
&gt; Ready! https://writer-gkdldldejq.now.sh (copied to clipboard) [1s]
&gt; Synced 2 files (1.19kB) [2s]
&gt; Initializing‚Ä¶
&gt; Building
</code></pre>
<p>Once the command finishes, we can load that URL in our browser:</p>
<p><code>GET https://writer-gkdldldejq.now.sh/login</code></p>
<pre><code class="hljs lang-json">{
<span class="hljs-attr">"message"</span>: <span class="hljs-string">"you are now logged in"</span>,
  <span class="hljs-attr">"user"</span>: {
    <span class="hljs-attr">"id"</span>: <span class="hljs-number">0.31483764592524177</span>
  }
}
</code></pre>
<h3 id="deploying-the-application-server-code-reader-code-">
    <a class="header-anchor" href="#deploying-the-application-server-code-reader-code-">
      <span class="header-link"></span>
    </a>
    Deploying the Application Server (<code>reader</code>)</h3><p>We repeat the above steps in our <code>/reader</code> directory, passing <strong>the same <code>.env</code> file</strong> to <code>now --dotenv</code>...</p>
<pre><code class="hljs lang-no-highlight">$ cd ../reader
$ now --dotenv=../.env
&gt; Deploying ~/projects/demos/sharing-cookies/reader under sequoia
&gt; Using Node.js 7.10.0 (default)
&gt; Ready! reader-irdrsmayqv.now.sh (copied to clipboard) [1s]
&gt; Synced 2 files (1.19kB) [2s]
&gt; Initializing‚Ä¶
&gt; Building
...
</code></pre>
<p>Once it&#39;s done we check via our browser...</p>
<p><code>GET https://reader-irdrsmayqv.now.sh</code></p>
<pre><code class="hljs lang-json">{
  <span class="hljs-attr">"message"</span>: <span class="hljs-string">"Please go \"log in!\" (set up your session)"</span>,
  <span class="hljs-attr">"login"</span>: <span class="hljs-string">"/login"</span>
}
</code></pre>
<p>We&#39;re not logged in! What happened?</p>
<p>We noted above that in order to share sessions, we needed to share two things:</p>
<ol>
<li>A session store (redis)</li>
<li><strong>Cookies</strong></li>
</ol>
<p>Because our servers run on different domains now, we&#39;re not sharing cookies. We&#39;ll fix that with a simple reverse-proxy set up <code>now</code> refers to as &quot;aliases.&quot;</p>
<h2 id="aliases">
    <a class="header-anchor" href="#aliases">
      <span class="header-link"></span>
    </a>
    Aliases</h2><p>We want both of our applications running on the same domain so they can share cookies (as well as other reasons including avoiding extra DNS lookups and obviating the need for CORS headers). <code>now</code> allows aliasing to any arbitrary subdomain under <code>now.sh</code>, and I&#39;ve chosen <code>counter-demo.now.sh</code> for this post.</p>
<p>We want routing to work as follows:</p>
<ul>
<li><code>/</code>: application server (<code>https://reader-irdrsmayqv.now.sh/</code>)</li>
<li><code>login</code>, <code>increment</code>, <code>logout</code>: &quot;auth&quot; server (<code>https://writer-gkdldldejq.now.sh/</code>)</li>
</ul>
<p>To configure multiple forwarding rules for one &quot;alias&quot; (domain), we&#39;ll first define them in a json file:</p>
<pre><code class="hljs lang-js">{
  <span class="hljs-string">"rules"</span> : [
    { <span class="hljs-string">"pathname"</span> : <span class="hljs-string">"/login"</span>, <span class="hljs-string">"dest"</span> : <span class="hljs-string">"writer-gkdldldejq.now.sh"</span> },
    { <span class="hljs-string">"pathname"</span> : <span class="hljs-string">"/increment"</span>, <span class="hljs-string">"dest"</span> : <span class="hljs-string">"writer-gkdldldejq.now.sh"</span> },
    { <span class="hljs-string">"pathname"</span> : <span class="hljs-string">"/logout"</span>, <span class="hljs-string">"dest"</span> : <span class="hljs-string">"writer-gkdldldejq.now.sh"</span> },
    { <span class="hljs-string">"dest"</span> : <span class="hljs-string">"reader-irdrsmayqv.now.sh"</span> }
  ]
}
</code></pre>
<p>We pass these to <code>now alias</code> using the <code>--rules</code> switch, along with our desired subdomain:</p>
<pre><code>$ now alias counter-demo.now.sh --rules=./now-aliases.json
&gt; Success! 3 rules configured for counter-demo.now.sh [1s]
</code></pre><p>Now to try it out:</p>
<p><img src="/img/counter-demo.gif" alt="logging into counter-demo.now.sh"></p>
<p>It works! Two servers running two separate applications, each sharing sessions and cookies.</p>
<h2 id="next-steps">
    <a class="header-anchor" href="#next-steps">
      <span class="header-link"></span>
    </a>
    Next Steps</h2><p>This is a rudimentary reverse proxy set up, but with this in place we can...</p>
<ol>
<li>Deploy new versions of our application and switch the alias to point to them, allowing us to switch back if there&#39;s a problem</li>
<li>Run any number of applications in different containers (yes, docker containers!) while still presenting one face to the client</li>
<li>Proxy requests through to external servers (a server run by your IT department) or external services (AWS lambda etc.), still presenting a single domain to the client</li>
<li>Scale our application server up or down (<code>now scale reader-irdrsmayqv.now.sh 2</code>) without breaking our session management system</li>
<li>Turn the whole thing off and turn it back on again without disrupting user sessions.</li>
</ol>
<p>Now go try it out! <a href="https://github.com/Sequoia/sharing-cookies">https://github.com/Sequoia/sharing-cookies</a></p>
<h1 id="comments">
    <a class="header-anchor" href="#comments">
      <span class="header-link"></span>
    </a>
    Comments</h1><blockquote>
<p>Really nice article, but I think the last part (aliases) should be longer and more in-depth. The current implementation is dependent on now.sh&#39;s particular feature and the actual mechanism isn&#39;t detailed. It would be great if you provided more implementations for the aliasing with different servers (like apache or nginx), so we could build a production environment without using now.sh. What do you think?</p>
</blockquote>
<p>- <a href="http://semmu.net">Semmu</a> <time datetime="2017-06-10 16:00:57 UTC">July 10, 2017</time></p>
<p>Thanks, Semmu! It&#39;s true, the approach described here is dependant on now.sh&#39;s aliasing feature, and yes, there are certainly other ways to do it! I featured now.sh here in part because it <em>is</em> very simple to use and explain. An explanation of how to tie this together with nginx (I&#39;d pick it over Apache for this use-case) would be useful! I don&#39;t have such an explanation on hand but I&#39;ll try to write a blog post in the future describing reverse proxying with nginx. Thanks for the comment!</p>
<blockquote>
<p>Hi Sequoia, Great article! A downside I see from sharing the same session storage is the coupling between the services. In your example, if someone decides to use a different web framework (like Rails) or even a different version of express js, the session format created by the services might not be compatible anymore. In other words, we would be giving up on the tech-agnostic benefit that microservices are supposed to provide. I see two possible solutions to this problem:</p>
<ol>
<li>Make the session format standard across all the microservices and implement the standard in libraries for each language (instead of using express-session)</li>
<li>Have every microservice use a sidecar container that writes and reads sessions from the shared session storage. This sidecar container will return the session in a standard JSON format.</li>
</ol>
<p>Please, let me know if you see other solutions or if I have any faulty assumption on my analysis. Thanks,</p>
<p>Arturo</p>
</blockquote>
<p>- Arturo <time datetime="2018-11-23 23:18:17 UTC">November 23, 2018</time></p>
<p>Thank you Arturo for the thoughtful feedback! I would agree that any time that you share <em>any</em> data between systems, each system will need to be designed to accommodate that format of data, and sessions is no exception. For <em>this</em> example of sharing session data, I think creating a &quot;standard&quot; format for session data would be overkill, as the concept is the same regardless of the format of the session data or the specific tools used in each service.</p>
<p>Even if this were production, I would use out-of-the-box Express session to start and keep the system as simple as possible. I would consider making a cross-framework session format <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" title="YAGNI">only at the point where that became an actual requirement, and not a minute sooner</a>! At that point, I&#39;d tweak the easiest-to-tweak system to fit the format of the other one. Only once there were three or four different systems that all needed to share sessions would I consider a system as complex as a sidecar container (which, incidentally, would force you off the Node deploys on Now.sh and onto Docker deploys).</p>
<p>Thank you again for your well-considered feedback, and don&#39;t forget to <a href="https://www.infoq.com/presentations/Simple-Made-Easy" title="Simple Made Easy - Rich Hickey">Keep It Simple</a>!</p>

]]></content:encoded></item><item><title>What is &quot;JavaScript?&quot; Part 2: Solutions</title><link>https://sequoia.makes.software/what-is-javascript-part-2-solutions</link><description>&quot;Bleeding edge&quot; is all well and good, but can't we at least opt-in? Here's one weird trick to bring some transparency into the JavaScript module ecosystem with regard to new language features‚Ä¶
</description><guid isPermaLink="true">https://sequoia.makes.software/what-is-javascript-part-2-solutions</guid><pubDate>Thu, 02 Mar 2017 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>In my <a href="/what-is-javascript-part-1-the-problem">last post</a> I outlined my concerns about lack of visibility into the incorporation of experimental features into popular JavaScript libraries. In short, the problems are:</p>
<ol>
<li>The lack of a <strong>clear, standard indicator</strong> of when a library incorporates experimental language features</li>
<li>The inability to <strong>consciously opt in</strong> to using these features</li>
</ol>
<p>In this post I&#39;ll outline my proposals for addressing these issues.</p>
<h2 id="proposal-1a-code-minimum-proposal-stage-code-">
    <a class="header-anchor" href="#proposal-1a-code-minimum-proposal-stage-code-">
      <span class="header-link"></span>
    </a>
    Proposal 1a: <code>minimum-proposal-stage</code></h2><p>This idea is lifted from Composer, which has <a href="https://getcomposer.org/doc/04-schema.md#minimum-stability"><code>minimum-stability</code> property</a> for projects. My idea is as follows:</p>
<ol>
<li>Libraries indicate if they are using experimental language features and from what stage</li>
<li>Project authors specify the lowest proposal stage they&#39;re comfortable with</li>
<li><code>npm install</code> warns if you are installing a library with features newer than desired</li>
</ol>
<p>For example, if you only want &quot;finished&quot; (Stage 4) or higher features in your project, you add the following to your <code>package.json</code>:</p>
<pre><code class="hljs lang-js"> <span class="hljs-string">"minimum-proposal-stage"</span> : <span class="hljs-number">4</span>
</code></pre>
<p>Aurelia would indicate that it incorporates a Stage 2 proposed/experimental feature (<a href="http://tc39.github.io/proposal-decorators/">decorators</a>) by adding the following to its <code>package.json</code> files:</p>
<pre><code class="hljs lang-js"><span class="hljs-string">"lowest-proposal-stage"</span> : <span class="hljs-number">2</span>
</code></pre>
<p>Upon attempting to install Aurelia, npm would warn you that the library&#39;s <code>lowest-proposal-stage</code> is lower than your <code>minimum-proposal-stage</code>. Basically: &quot;hey! You&#39;re about to install a library with language features more experimental than you might be comfortable with!&quot;</p>
<h3 id="pros">
    <a class="header-anchor" href="#pros">
      <span class="header-link"></span>
    </a>
    Pros</h3><ul>
<li>More granularity: This solution allows me to say &quot;I am comfortable with Stage 4 (finalized, but not yet released) features, but nothing below that.&quot;</li>
</ul>
<h3 id="cons">
    <a class="header-anchor" href="#cons">
      <span class="header-link"></span>
    </a>
    Cons</h3><ul>
<li>Requires users to learn more about the TC39 feature proposal process (perhaps this is actually a &quot;pro&quot;?)</li>
<li>Would require libraries to update their <code>lowest-proposal-stage</code> property as features are adopted into the language</li>
</ul>
<h2 id="proposal-1b-code-maximum-ecmascript-version-code-">
    <a class="header-anchor" href="#proposal-1b-code-maximum-ecmascript-version-code-">
      <span class="header-link"></span>
    </a>
    Proposal 1b: <code>maximum-ecmascript-version</code></h2><p>This is like above, but pegged to ECMAScript versions.</p>
<p>Example: in my project, I don&#39;t want code <em>newer than</em> ES7 (the current released standard at the time of this writing), i.e. I don&#39;t want unreleased features:</p>
<pre><code class="hljs lang-js">    <span class="hljs-string">"maximum-ecmascript-version"</span> : <span class="hljs-number">7</span>
</code></pre>
<p>In the library&#39;s package file, they indicate that the library incorporates features that do not exist in any current version of ECMAScript:</p>
<pre><code class="hljs lang-js">    <span class="hljs-string">"ecmascript-version"</span> : <span class="hljs-string">"experimental"</span>
</code></pre>
<p>npm would warn me before installing this package. This one, on the other hand, would install without complaint:</p>
<pre><code class="hljs lang-js">    <span class="hljs-string">"ecmascript-version"</span> : <span class="hljs-number">5</span>
</code></pre>
<p>because the <code>ecmascript-version</code> is lower than my maximum.</p>
<h3 id="pros">
    <a class="header-anchor" href="#pros">
      <span class="header-link"></span>
    </a>
    Pros</h3><ul>
<li>Simpler, easier to understand</li>
<li>Released ES versions do not change, no need to update <code>ecmascript-version</code> if it&#39;s set to a released version</li>
</ul>
<h3 id="cons">
    <a class="header-anchor" href="#cons">
      <span class="header-link"></span>
    </a>
    Cons</h3><ul>
<li>Not possible to allow some proposal stages but forbid others with this system</li>
</ul>
<p>The two systems could also be used in conjunction with one another; I won&#39;t go into that possibility here.</p>
<h2 id="possible-solution-2-badges">
    <a class="header-anchor" href="#possible-solution-2-badges">
      <span class="header-link"></span>
    </a>
    Possible Solution 2: Badges</h2><p>Add badges to <code>README.md</code> files to indicate whether experimental features are used in the library. Here are some sample badges that use the proposal stage <em>names</em> rather than numbers:</p>
<p><em>(Please excuse the largeness of these badges)</em></p>
<p><img src="/img/ES--proposal--stage-proposal-red.svg" alt="">
<img src="/img/ES--proposal--stage-draft-yellow.svg" alt="">
<img src="/img/ES--proposal--stage-finished-green.svg" alt=""></p>
<p>Alternately, the language version could be used:</p>
<p><img src="/img/ecmascript--version-6-green.svg" alt="">
<img src="/img/ecmascript--version-7-yellow.svg" alt="">
<img src="/img/ecmascript--version-experimental-red.svg" alt=""></p>
<h3 id="pros">
    <a class="header-anchor" href="#pros">
      <span class="header-link"></span>
    </a>
    Pros</h3><ul>
<li>Does not require tooling (npm) updates&mdash;authors can start doing this right away</li>
<li>Human readable</li>
</ul>
<h3 id="cons">
    <a class="header-anchor" href="#cons">
      <span class="header-link"></span>
    </a>
    Cons</h3><ul>
<li>Not machine readable: npm cannot alert you if you attempt to install something with features less stable than you prefer</li>
</ul>
<h2 id="conclusion">
    <a class="header-anchor" href="#conclusion">
      <span class="header-link"></span>
    </a>
    Conclusion</h2><p>Change is good, but stability is also good. Everyone should be able to easily choose to use <em>or not use</em> the latest and greatest JavaScript features and proposed features. Increasing visibility into experimental feature dependencies will...</p>
<ol>
<li>Give users a better understanding of the JavaScript feature development process and what it means for something to be &quot;JavaScript&quot;</li>
<li>Allow users to consciously opt-in to using experimental language features</li>
<li>Allow those who prioritize stability to <em>opt-out</em> of using experimental language features</li>
<li>Give frazzled, overwhelmed users a bit of solid ground to stand on in the Churning Sea of JavaScript</li>
<li>Make JavaScript look a bit less scary to enterprise organizations</li>
</ol>
<p>Please let me know what you think with a comment (below) or <a href="https://news.ycombinator.com/item?id=13775534">on hackernews</a>.</p>

]]></content:encoded></item><item><title>What is &quot;JavaScript?&quot; Part 1: The Problem</title><link>https://sequoia.makes.software/what-is-javascript-part-1-the-problem</link><description>In the age of Babel, babel-plugins, and widespread transpilation, what does it mean for something to be JavaScript, and why does that question matter?
</description><guid isPermaLink="true">https://sequoia.makes.software/what-is-javascript-part-1-the-problem</guid><pubDate>Thu, 02 Mar 2017 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>As <a href="http://babeljs.io/">Babel</a> took over the JavaScript scene, it became possible to use features from the newest ECMAScript specification before browsers (or Node) had implemented them. It <em>also</em> became possible to use <em>proposed</em> ECMAScript features before they&#39;d been finalized and officially incorporated into ECMAScript. While this allowed lots of exciting new developments, it introduced a good bit of confusion as well. Can you tell me which of the following is &quot;just JavaScript/ECMAScript&quot;?</p>
<ol>
<li><code>let n = { x, y, ...z };</code></li>
<li><code>Promise.resolve(123).then(::console.log);</code></li>
<li><code>Promise.resolve(2).finally(() =&gt; {})</code></li>
<li><code>@observable title = &quot;&quot;;</code></li>
<li><code>&#39;[1...10]&#39;.forEach(num =&gt; console.log(num))</code></li>
</ol>
<p>If you said &quot;none of these are &#39;just JavaScript&#39;,&quot; you were right! The first four are <em>proposed</em> features. Number five is a feature from another language, but <a href="https://www.npmjs.com/package/babel-plugin-range-operators">you can use it with babel</a>!</p>
<h2 id="feature-proposals">
    <a class="header-anchor" href="#feature-proposals">
      <span class="header-link"></span>
    </a>
    Feature Proposals</h2><p>In order for new features to land in the ECMAScript specification, they must go through several proposal stages, as described <a href="https://tc39.github.io/process-document/">here</a>. The difference between JS and most other ecosystems is that in most ecosystems, language features must exist in the specification <em>before</em> they are incorporated into userland code. Not so JavaScript! With babel, you can start using Stage 3 (&quot;Candidate&quot;), Stage 1 (&quot;Proposal&quot;), or even Stage 0 (&quot;Strawman&quot;) features in production right away, before they are finalized.</p>
<p>What does it mean for a feature proposal to be at Stage 2 (&quot;Draft&quot;)? <a href="https://tc39.github.io/process-document/">According to the TC39</a>, it means the feature implementations are <strong>&quot;experimental,&quot;</strong> and <strong>&quot;incremental&quot; changes</strong> to the feature can be expected. Basically, this means the behavior of the proposed feature <em>may change</em> before the feature is finalized.</p>
<p>This is great for those who want to live on the edge, but what about those of us who must prioritize stability over bleeding-edgeness? Can we just stick to finalized features and avoid experimental ones? It is possible, but it&#39;s not as simple as you might expect...</p>
<h2 id="libraries-and-feature-confusion">
    <a class="header-anchor" href="#libraries-and-feature-confusion">
      <span class="header-link"></span>
    </a>
    Libraries and Feature-Confusion</h2><p>The fuzzy boundary between what &quot;is JavaScript&quot; and what are &quot;JavaScript feature proposals&quot; creates a lot of ambiguity and confusion. It&#39;s common to mistakenly refer to any &quot;new JavaScript feature&quot; as ES6, ES7, ES.Next or ES2016, more or less interchangeably. Unfortunately, authors of many popular JavaScript libraries do just this, exacerbating the misunderstanding. I&#39;ll pick on two lovely library authors here because they are very cool people &amp; I&#39;m sure they know I don&#39;t mean it as a personal criticism. ^_^</p>
<h3 id="exhibit-a-mobx">
    <a class="header-anchor" href="#exhibit-a-mobx">
      <span class="header-link"></span>
    </a>
    Exhibit A: Mobx</h3><p>I recently found myself looking into new JavaScript libraries and I <a href="https://mobx.js.org/">encountered</a> some syntax I was not familiar with in JavaScript:</p>
<pre><code class="hljs lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todo</span> </span>{
    id = <span class="hljs-built_in">Math</span>.random();
    @observable title = <span class="hljs-string">""</span>;
    @observable finished = <span class="hljs-literal">false</span>;
}
</code></pre>
<p><code>@observable</code>? Huh! That looks like an <a href="http://docs.oracle.com/javase/tutorial/java/annotations/basics.html">annotation</a> from Java. I didn&#39;t know those existed in the current language specification. It took looking it up to find out that it is in fact <em>not</em> JavaScript as currently specified, but a proposed feature. (In fairness, Mobx does explain that this feature is &quot;ES.Next&quot;, but that term is vaguely defined and often used to refer to ES6 or ES7 features as well.)</p>
<h3 id="exhibit-b-aurelia">
    <a class="header-anchor" href="#exhibit-b-aurelia">
      <span class="header-link"></span>
    </a>
    Exhibit B: Aurelia</h3><p>From <a href="http://aurelia.io/hub.html#/doc/article/aurelia/framework/latest/what-is-aurelia/1">the website</a> (<em>emphasis added</em>):</p>
<blockquote>
<p>What is it?</p>
<p>Well, it&#39;s actually simple. Aurelia is <strong>just JavaScript</strong>. However, it&#39;s not yesterday&#39;s JavaScript, but the JavaScript of tomorrow.  By using modern tooling we&#39;ve been able to write Aurelia from the ground up <strong>in ECMAScript 2016</strong>. This means we have native modules, classes, <strong>decorators</strong> and more at our disposal...and you have them too.</p>
</blockquote>
<p>Well, now we know: decorators were added to JavaScript in the ES2016 language specification. Just one problem... <strong><em>no they weren&#39;t!!!</em></strong> Decorators are still a <a href="http://tc39.github.io/proposal-decorators">Stage 2</a> feature <strong>proposal</strong>. Aurelia is not &quot;just JavaScript,&quot; it&#39;s &quot;JavaScript <em>[plus some collection of experimental language features]</em>&quot;</p>
<h2 id="so-what-">
    <a class="header-anchor" href="#so-what-">
      <span class="header-link"></span>
    </a>
    So What?</h2><p>This matters because as anyone involved the JavaScript ecosystem these days knows, &quot;it&#39;s hard to keep up with all the latest developments&quot; is probably the #1 complaint about the ecosystem. This causes users to throw their hands up, exasperated, and it causes enterprise organizations to <strong>avoid JavaScript altogether</strong>. Why invest in a platform where it&#39;s difficult to even ascertain what the boundaries of the language are?</p>
<p>Also, as mentioned above, <strong>these features are not officially stable</strong>. This means that if you write code depending on the current (proposed) version of the feature, <strong>that code may stop working when the feature is finalized</strong>. While you may consider this an acceptable risk, I assure you there are many users and organizations that do not. Currently, making an informed decision to opt-in to using these experimental features is difficult and requires a high level of expertise&mdash;users must be able to <strong>identify each new feature</strong> &amp; <strong>manually check</strong> where it is in the proposal or release phase. This is especially challenging for organizations for whom JavaScript is not a core-competency.</p>
<p>Finally, (this is my own opinion) it&#39;s <strong>just plain annoying</strong> to constantly encounter unfamiliar language syntax and be left wondering &quot;Is this JavaScript? Is this Typescript? Is this JSX? Is this...&quot; I don&#39;t want to have to google &quot;javascript ::&quot; to figure out what the heck that new syntax is and whether it&#39;s current JavaScript, a feature proposal, a super-lang, or Just Some Random Thing Someone Wrote a Babel Transform For.</p>
<h2 id="why-does-in-matter-if-a-lib-uses-experimental-features-em-internally-em-">
    <a class="header-anchor" href="#why-does-in-matter-if-a-lib-uses-experimental-features-em-internally-em-">
      <span class="header-link"></span>
    </a>
    Why Does in Matter if a Lib Uses Experimental Features <em>Internally</em>?</h2><p>This probably does not matter if the exposed interfaces do not use or require the use of experimental language features. A library could be written in JavaScript, Coffescript or Typescript as long as the <code>dist/</code> is plain JavaScript. Annotations are an example of an experimental feature that some libraries encourage or require the use of in user code. Further, some libraries do not distribute a build artifact, instead directing users to <code>npm install</code> the source and build locally. In these cases, there is the potential for breakage if draft specifications of experimental features change, and warning users of this is warranted (IMO).</p>
<h2 id="are-you-saying-no-one-should-use-experimental-features-">
    <a class="header-anchor" href="#are-you-saying-no-one-should-use-experimental-features-">
      <span class="header-link"></span>
    </a>
    Are You Saying No One Should Use Experimental Features?</h2><p>No! By all means, use them! All I&#39;m saying is that it would be useful to be able to make an <strong>informed choice</strong> to <strong>opt-in</strong> to using experimental features. That way, organizations that prefer stability can say &quot;no thank you&quot; and users who want to be on the bleeding edge can keep bleeding just as they&#39;re doing today.</p>
<p>Composer has a mechanism to allow users to <a href="https://getcomposer.org/doc/04-schema.md#minimum-stability">allow or disallow unstable versions of dependencies from being installed</a> and it <em>does not</em> prevent people from using unstable releases, it merely gives them the choice to op-in or out.</p>
<p>An added benefit of increasing visibility into experimental feature use would be to help users understand the TC39 process. Currently there is not enough understanding of what it means for something to be ES6, or ES7, or Proposal Stage 2, as evidenced by the way these terms are thrown around willy-nilly.</p>
<p>In <a href="/what-is-javascript-part-2-solutions">my next post</a> I&#39;ll go over my proposals for addressing this issue.</p>
<h1 id="comments">
    <a class="header-anchor" href="#comments">
      <span class="header-link"></span>
    </a>
    Comments</h1><blockquote>
<p>Thank you for this post. You are doing the Lord&#39;s work</p>
</blockquote>
<p>- <a href="http://designbymobi.us">Uzo Olisemeka</a>, <time datetime="2018-10-25 08:36:45 UTC">October 25, 2018</time></p>
<p>Thanks Uzo! I really like <a href="http://designbymobi.us/341/">your post on the subject</a> as well, especially this point: &quot;On a language level, overlap is a problem. If there‚Äôs more than 3 ways of doing a thing, I must know all three and everyone I‚Äôm working with must know all three.&quot;</p>

]]></content:encoded></item><item><title>Let's Code It: Static Site Generator with Rx.js</title><link>https://sequoia.makes.software/lets-code-it-static-site-generator-with-rxjs</link><description>Watching a filesystem for changes and building an input (markdown) file to output (HTML) on each change? This sounds like a job for... Observables!</description><guid isPermaLink="true">https://sequoia.makes.software/lets-code-it-static-site-generator-with-rxjs</guid><pubDate>Thu, 19 Jan 2017 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p><a href="https://sequoia.makes.software/lets-code-it-static-site-generator/">Last post</a>, we went over building a Static Site Generator (SSG) in Node.js. We used <a href="http://bluebirdjs.com/docs/why-promises.html">Promises</a> for flow control, and that worked for reading each Markdown input file, transforming it into HTML, and writing that to disk, once per file. What if we instead of running this build process once per input file, we want it to run once per input file <em>every time that input file is created or changed?</em></p>
<p>If our goal is to map a sequence of events over time (file creation or modification) to one or more operations (building Markdown to HTML and writing to disk), it&#39;s very likely <a href="http://reactivex.io/rxjs/manual/overview.html#observable"><strong>Observables</strong></a> are a good fit! In this blog post, we&#39;ll look at how to use Observables and <a href="http://reactivex.io/rxjs/manual/overview.html#introduction">RX.js</a> to create a SSG with <strong>built-in, incremental watch rebuilds</strong>, and with <strong>with multiple output streams</strong> (individual posts and blog index page).</p>
<p>This post loosely follows the demo project <a href="https://github.com/Sequoia/rx-static-blog-example/blob/master/index.js">here</a>, so if you prefer to look at all the code at once (or run it) you can do so. </p>
<h2 id="what-is-rx-js">
    <a class="header-anchor" href="#what-is-rx-js">
      <span class="header-link"></span>
    </a>
    What is RX.js</h2><p>Observables can be confusing so reading <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">a more detailed intro</a> is advisable. Here I&#39;ll give a simplified explanation of Observables that is inadequate to understand them fully, but will hopefully be enough for this blog post!</p>
<p>As alluded to, Observables are a tool for modeling and working with events over time. One way to conceptualize Observables if you are familiar with Promises is to think of an Observable as a Promise that can emit multiple values. A Promise has the following &quot;things it can do:&quot;</p>
<ol>
<li>Emit an error (and settle the Promise)</li>
<li>Emit a value (and settle the Promise)</li>
</ol>
<p>The things an Observable can do are:</p>
<ol>
<li>Emit an error (like <code>reject</code>)</li>
<li>Emit a value</li>
<li>Emit a &quot;complete&quot; notification</li>
</ol>
<p>The key difference is that that emitting a value and &quot;settling&quot; (called &quot;completing&quot; in RX.js Observables) are split into separate actions in Observables, and because emitting a value does not &quot;complete&quot; an Observable, it can be done over and over.</p>
<p>To illustrate this comparison further, with code, let us imagine a new utility method for constructing Promises called <code>Promise.create</code>. It behaves the same as the Promise constructor, but the signature of its function argument is slightly different.</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// Promise constructor</span>
<span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">settle</span>(<span class="hljs-params">resolve, reject</span>)</span>{
  <span class="hljs-keyword">if</span>(foo){ resolve(value); }
  <span class="hljs-keyword">else</span>{ reject(<span class="hljs-string">'Error!'</span>); } 
});

p1.then(<span class="hljs-built_in">console</span>.log);

<span class="hljs-comment">// Promise.create (imaginary API)</span>
<span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.create(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">settle</span>(<span class="hljs-params">settler</span>)</span>{
  <span class="hljs-keyword">if</span>(foo){ settler.resolve(value); }
  <span class="hljs-keyword">else</span>{ settler.reject(<span class="hljs-string">'Error!'</span>); } 
});

p2.then(<span class="hljs-built_in">console</span>.log);
</code></pre>
<p>As you can see, <code>Promise.create</code> takes a <code>settle</code> function which receives an <strong>object</strong> with <code>resolve</code> and <code>reject</code> methods, rather than separate <code>resolve</code> and <code>reject</code> functions. From here it is a short step to <code>Rx.Observable.create</code>:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> o = Rx.Observable.create(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">subscribe</span>(<span class="hljs-params">subscriber</span>) </span>{
  <span class="hljs-keyword">try</span>{
    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">let</span> foo = getNextFoo()){
      subscriber.next(foo);   <span class="hljs-comment">// emit next value </span>
    }
    subscriber.complete();    <span class="hljs-comment">// emit "complete"</span>
  }
  <span class="hljs-keyword">catch</span>(e){
    subscriber.error(e);      <span class="hljs-comment">// emit "error"</span>
  }
});
</code></pre>
<p>When you want to use the results of a Promise, you attach a function via <code>.then</code>. With an Observable, when you wish to use the results to produce side effects, you attach an &quot;Observer&quot; via <code>.subscribe</code>:</p>
<pre><code class="hljs lang-js">myPromise.then(<span class="hljs-function"><span class="hljs-params">foo</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo is %s'</span>, foo))
 .catch(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-built_in">console</span>.error(e));

myObservable.subscribe({
  <span class="hljs-attr">next</span>: <span class="hljs-function"><span class="hljs-params">foo</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'next foo is %s'</span>, foo),
  <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-built_in">console</span>.error(e),
  <span class="hljs-attr">complete</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'All done! No more foo.'</span>)
})
</code></pre>
<h3 id="observers-and-subscribers">
    <a class="header-anchor" href="#observers-and-subscribers">
      <span class="header-link"></span>
    </a>
    Observers and Subscribers</h3><p>In the style of programming with Observables that RX.js allows, tasks are often conceptualized as being composed of two parts: Observables (inputs), and Subscriptions or side effects (outputs). Side effects describe what you want to ultimately <em>do</em> with the values from an observable.</p>
<p>If you describe your goals as side effects, you can work backward to figure out what sort of Observables you need to create to provide the values those side effects need. For example, if you wish a counter to be incremented each time a button is clicked, &quot;increment the counter&quot; is the side effect, and you need an Observable of button clicks for that increment function to &quot;subscribe&quot; to.</p>
<p>For our static site generator, we have the following high-level goals:</p>
<ol>
<li>Write to disk an updated HTML version of each post:<ol>
<li>When the post input file is created</li>
<li>When the post input file is changed and it results in different output</li>
</ol>
</li>
<li>Write to disk an updated blog index page:<ol>
<li>When we start our script</li>
<li>Each time a post&#39;s metadata (title, description, etc.) is changed</li>
</ol>
</li>
</ol>
<p>The Observables we can map to each of these goals are:</p>
<ol>
<li><code>parsedAndRenderedPosts$</code>: emits post output each time a post is created or changed. Subscribe to this and write the new post contents to disk on each emit.</li>
<li><code>latestPostMetadata$</code>: emits a collection of the latest metadata when the script starts or the metadata for a post changes. Subscribe to this and write the rendered index page to disk on each emit.</li>
</ol>
<p>Each of these two Observables will be composed of or created as a result of other Observables. As we build these up, we&#39;ll learn about different methods Rx.js has for creating and transforming Observables. Let&#39;s begin!</p>
<h2 id="goal-1-write-posts">
    <a class="header-anchor" href="#goal-1-write-posts">
      <span class="header-link"></span>
    </a>
    Goal 1: Write Posts</h2><p>We know each of our Observables should emit based on file changes and additions, so we&#39;ll start by creating an Observable of file changes and additions called <code>changesAndAdditions$</code>. The <a href="https://github.com/paulmillr/chokidar"><code>chokidar</code></a> module can be used to create an event emitter that emits <code>change</code> and <code>add</code> events on filesystem changes, so let&#39;s start there:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> chokidar = <span class="hljs-built_in">require</span>(<span class="hljs-string">'chokidar'</span>);
<span class="hljs-keyword">const</span> dirWatcher = chokidar.watch(<span class="hljs-string">'./_posts/*.md'</span>);
</code></pre>
<p>We want to create Observables of file changes &amp; additions so we can manipulate &amp; combine them with Rx.js. Rx.js provides a utility method to create an Observable from <code>EventEmitter</code> by event name. We are interested in the <code>add</code> event and the <code>change</code> events, so let&#39;s use <code>fromEvent</code> to create Observables of them:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> Rx = <span class="hljs-built_in">require</span>(<span class="hljs-string">'rxjs'</span>);
<span class="hljs-comment">// note: `add` is emitted for each file on startup, when chokidar first scans the directory</span>
<span class="hljs-keyword">const</span> newFiles$     = Rx.Observable.fromEvent(dirWatcher, <span class="hljs-string">'add'</span>);
<span class="hljs-keyword">const</span> changedFiles$ = Rx.Observable.fromEvent(dirWatcher, <span class="hljs-string">'change'</span>);
</code></pre>
<p>Now <code>newFiles$</code> will emit a new value (a filename) when <code>dirWatcher</code> emits an <code>add</code> event, and <code>changedFiles$</code> behaves similarly with <code>change</code> events. We can create an observable of both of these events by using <code>.merge</code>.</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> changesAndAdditions$ = newFiles$.merge(changedFiles$);
</code></pre>
<h3 id="mapping-filename-to-file-contents">
    <a class="header-anchor" href="#mapping-filename-to-file-contents">
      <span class="header-link"></span>
    </a>
    Mapping Filename to File Contents</h3><p>To get the file contents, we can <code>.map</code> the name of the file to the contents of that file by using a function that reads files. Reading a file is (typically) an asynchronous operation. If we were using Promises, we might write a function that takes a filename and returns a Promise that will emit the file contents. Similarly, using Observables, we use a function that takes a filename and returns an Observable that will emit the file&#39;s contents.</p>
<p>Just as <a href="http://bluebirdjs.com/docs/api/promise.promisify.html"><code>Promise.promisify</code></a> will convert a callback based function to one that returns a Promise, <a href="reactivex.io/rxjs/class/es6/Observable.js~Observable.html#static-method-bindNodeCallback"><code>Rx.Observable.bindNodeCallback</code></a> converts a callback based function to one that returns an Observable:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);
<span class="hljs-keyword">const</span> readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);

<span class="hljs-keyword">const</span> fileContents$ = changesAndAdditions$
  .map(readFileAsObservable) <span class="hljs-comment">// map filename observable of file contents</span>
  .mergeAll();               <span class="hljs-comment">// Unwrap Observable&lt;"file contents"&gt; to get "file contents"</span>

fileContents$
  .subscribe(<span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(content)); <span class="hljs-comment">// log contents of each file</span>
</code></pre>
<p>Now we&#39;ll log the contents of each file as it is created or changed. Let&#39;s take a closer look at our use of <code>.mergeAll</code>: <code>readFileAsObservable</code> is a function that takes a <code>String</code> (filename) as input and returns an <code>Observable&lt;String&gt;</code> (an observable of the &quot;file contents&quot; string).</p>
<p>This means that by mapping <code>changesAndAdditions$</code> over <code>readFileAsObservable</code>, we took an <code>Observable&lt;String&gt;</code> (an observable of strings, namely, file names) and converted each <code>String</code> value to a new <code>Observable&lt;String&gt;</code>. This means we have <code>Observable&lt;Observable&lt;String&gt;&gt;</code>: an Observable of Observables of Strings.</p>
<p>We don&#39;t actually want an <em>Observable</em> of file contents, we want <strong>filename in, file contents out</strong>. For this reason we use <code>.mergeAll</code> to &quot;unwrap&quot; the file contents strings from the inner Observables as they are emitted. If you are confused by this, don&#39;t worry: it is in fact confusing! For now it&#39;s only important to understand that <code>.mergeAll</code> converts <code>Observable&lt;Observable&lt;String&gt;&gt;</code> to <code>Observable&lt;String&gt;</code>, so we can process the string (in this case file contents).</p>
<p><em>NB: Mapping a value to an observable then unwrapping that inner observable as we‚Äôve done here is an extremely common operation in Rx.js, and can be achieved using the <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap">.mergeMap(fn)</a> shorthand, which is the equivalent of .map(fn).mergeAll().</em></p>
<h3 id="emitting-only-when-contents-is-changed">
    <a class="header-anchor" href="#emitting-only-when-contents-is-changed">
      <span class="header-link"></span>
    </a>
    Emitting Only When Contents is Changed</h3><p>When our script starts, <code>newFiles$</code> will emit each filename once when <code>chokidar</code> first scans our <code>_posts</code> directory, and this will be merged into <code>changesAndAdditions$</code>. While editing a post in your text editor, each time you &quot;save&quot; the Markdown file, <code>changedFiles$</code> will emit the filename, <em>regardless of whether the contents of the file actually changed</em>. If you hit <code>^S</code> ten times in a row, <code>changesAndAdditions$</code> will emit that filename 10 times and we&#39;ll read the file 10 times.</p>
<p>If the file contents hasn&#39;t changed, we don&#39;t want to send it down the pipe to be parsed, templated, and written as an updated HTML file-- we only want to do this latter processing (right now just <code>console.log(contents</code>)) if the contents are actually different from the last contents that were emitted. Luckily, Rx.js has a method for this built in: <code>.distinctUntilChanged</code> will emit a value one time, but will not emit again until the value changes. That means if a file is saved 10 times with the same contents, it will emit the file contents the first time and drop the rest.</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> latestFileContents$ = fileContents$.distinctUntilChanged();

latestFileContents$.subscribe(<span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(content));
</code></pre>
<p>Now we&#39;ll only see file contents logged if it&#39;s different from the last contents that were emitted. There&#39;s a logic problem here, however. Consider the following scenario:</p>
<ol>
<li>Save <code>foo.md</code><ol>
<li><code>changesAndAdditions$</code> emits &quot;foo.md&quot;</li>
<li><code>fileContents$</code> emits &quot;contents of foo.md&quot;</li>
<li>last value (<code>null</code>) <strong>is distinct</strong> from &quot;contents of foo.md&quot;</li>
<li><em>last value updated to &quot;contents of foo.md&quot;</em></li>
<li><code>latestFileContents$</code> emits &quot;contents of foo.md&quot;</li>
</ol>
</li>
<li>Save <code>bar.md</code><ol>
<li><code>changesAndAdditions$</code> emits &quot;bar.md&quot;</li>
<li><code>fileContents$</code> emits &quot;contents of BAR.md&quot;</li>
<li>last value (&quot;contents of foo.md&quot;) <strong>is distinct</strong> from &quot;contents of BAR.md&quot;</li>
<li><em>last value updated to &quot;contents of BAR.md&quot;</em></li>
<li><code>latestFileContents$</code> emits &quot;contents of BAR.md&quot;</li>
</ol>
</li>
<li>Save <code>foo.md</code> again<ol>
<li><code>changesAndAdditions$</code> emits &quot;foo.md&quot;</li>
<li><code>fileContents$</code> emits &quot;contents of foo.md&quot;</li>
<li>last value (&quot;contents of BAR.md&quot;) <strong>is distinct</strong> from &quot;contents of foo.md&quot;</li>
<li><em>last value updated to &quot;contents of foo.md&quot;</em></li>
<li><code>latestFileContents$</code> emits &quot;contents of foo.md&quot;</li>
</ol>
</li>
</ol>
<p>As you can see, the contents of the two files never changes, but the <code>latestFileContents$</code> considers it &quot;changed&quot; <em>because it&#39;s different from the last value, which was from the other file</em>. The solution is to create an observable of file contents that is distinct until changed for <em>each file</em>, so the new contents of <code>foo.md</code> are compared to the last contents of <code>foo.md</code>, regardless of whether <code>bar.md</code> was changed since then. This is a bit more complicated than merging the <code>newFiles$</code> and <code>changedFiles$</code> Observables, but it&#39;s doable!</p>
<p>Because we want one observable of file changes <em>per file</em>, we must perform the &quot;read file &amp; see if it changed&quot; <em>per file</em>, not on a merged stream of all files. The plan of attack is as follows: For each <code>add</code> event (new file created or read on startup)...</p>
<ol>
<li>Create an Observable of <code>change</code> events for <em>this file only</em></li>
<li>Start that Observable by emitting the filename once (for the <code>add</code> event)</li>
<li>Map the filename to an Observable of the file contents (as above)</li>
<li>Use <code>.mergeAll</code> to unwrap Observable from step 3</li>
<li>Emit contents <em>only if it&#39;s distinct from the last contents</em></li>
</ol>
<pre><code class="hljs lang-js"><span class="hljs-comment">// for each added file...  </span>
<span class="hljs-keyword">const</span> latestFileContents$ = newFiles$.map(<span class="hljs-function"><span class="hljs-params">addedName</span> =&gt;</span> {

  <span class="hljs-comment">// 1. create Observable of file changes...</span>
  <span class="hljs-keyword">const</span> singleFileChangesAndAdditions$ = changedFiles$
  <span class="hljs-comment">// ...only taking those for THIS file</span>
    .filter(<span class="hljs-function"><span class="hljs-params">changedName</span> =&gt;</span> changedName === addedName)
  <span class="hljs-comment">// 2. emit filename once to start (on "add")</span>
    .startWith(addedName);

  <span class="hljs-keyword">const</span> singleFileLatestContents$ = singleFileChangesAndAdditions$
  <span class="hljs-comment">// 3. map the filename to an observable of the file contents</span>
    .map(<span class="hljs-function"><span class="hljs-params">filename</span> =&gt;</span> readFileAsObservable(filename, <span class="hljs-string">'utf-8'</span>))
  <span class="hljs-comment">// 4. Merge the Observable&lt;Observable&lt;file contents&gt;&gt; to Observable&lt;file contents&gt;</span>
    .mergeAll()
  <span class="hljs-comment">// 5. don't emit unless the file contents actually changed</span>
    .distinctUntilChanged();

  <span class="hljs-comment">// 6. return an observable of changes per added filename </span>
  <span class="hljs-keyword">return</span> singleFileLatestContents$;

})
.mergeAll(); <span class="hljs-comment">//unwrap per-file Observable of changes</span>
</code></pre>
<p>We&#39;re using <code>.mergeAll</code> twice because we&#39;re mapping strings to Observables twice:</p>
<ol>
<li>filename <strong>string</strong> from <code>changedFiles$</code> <strong>mapped to an observable</strong> of file contents in step 4</li>
<li>filename <strong>string</strong> from <code>newFiles$</code> <strong>mapped to an observable</strong> returned in step 6</li>
</ol>
<p>Because we go <code>Observable&lt;String&gt;</code> to <code>Observable&lt;Observable&lt;String&gt;&gt;</code> twice, we have to reverse the process with <code>.mergeAll</code> twice.</p>
<p>Since we have one <code>singleFileChangesAndAdditions$</code> observable <em>per file added</em>, we are able to perform the &quot;map filename to contents and compare with last value&quot; check <em>per file</em>. <code>latestFileContents$</code> can still be consumed as it was before.</p>
<h3 id="templating-and-writing-html-to-disk">
    <a class="header-anchor" href="#templating-and-writing-html-to-disk">
      <span class="header-link"></span>
    </a>
    Templating and Writing HTML to Disk</h3><p>That was a lot, but it&#39;s the bulk of the Rx.js logic for our &quot;write blog posts&quot; goal. Now that we have an Observable that emits the contents of our Markdown blog posts each time they change, we can map that over our frontmatter, markdown parsing, template, and write-to-disk functions much as we did before with Promises. We&#39;ll start by creating a few utility functions as before:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> md = <span class="hljs-built_in">require</span>(<span class="hljs-string">'markdown-it'</span>)();
<span class="hljs-keyword">const</span> frontmatter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'frontmatter'</span>);
<span class="hljs-keyword">const</span> pug = <span class="hljs-built_in">require</span>(<span class="hljs-string">'pug'</span>);

<span class="hljs-keyword">const</span> writeFileAsObservable = Rx.Observable.bindNodeCallback(fs.writeFile);
<span class="hljs-keyword">const</span> renderPost = pug.compileFile(<span class="hljs-string">`<span class="hljs-subst">${__dirname}</span>/templates/post.pug`</span>);

<span class="hljs-comment">// IN:  { content, data : { title, description, ...} }</span>
<span class="hljs-comment">// OUT: { content, title, description, ... }</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flattenPost</span>(<span class="hljs-params">post</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign({}, post.data, { <span class="hljs-attr">content</span> : post.content });
}

<span class="hljs-comment">// parse markdown to HTML then send the whole post object to the template function</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">markdownAndTemplate</span>(<span class="hljs-params">post</span>)</span>{
  post.body = md.render(post.content);
  post.rendered = renderPost(post);   <span class="hljs-comment">//send `post` to pug render function for post template</span>
  <span class="hljs-keyword">return</span> post;
}

<span class="hljs-comment">// take post object with:</span>
<span class="hljs-comment">// 1. `slug` (e.g. "four-es6-tips") to build file name and</span>
<span class="hljs-comment">// 2. `rendered` contents: the finished HTML for the post</span>
<span class="hljs-comment">// write this to disk &amp; output error or success message</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writePost</span>(<span class="hljs-params">post</span>)</span>{
  <span class="hljs-keyword">var</span> outfile = path.join(__dirname, <span class="hljs-string">'out'</span>, <span class="hljs-string">`<span class="hljs-subst">${post.slug}</span>.html`</span>);
  writeFileAsObservable(outfile, post.rendered)
    .subscribe({
      <span class="hljs-attr">next</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'wrote '</span> + outfile),
      <span class="hljs-attr">error</span>: <span class="hljs-built_in">console</span>.error
    });
}
</code></pre>
<p><em>NB: see <a href="https://strongloop.com/strongblog/lets-code-it-static-site-generator/">the previous post</a> for details on <code>frontmatter</code>, <code>md.render</code>, etc.</em></p>
<p>We use our Observable utility functions to string them together:</p>
<pre><code class="hljs lang-js">latestFileContents$
  .map(frontmatter)        <span class="hljs-comment">// trim &amp; parse frontmatter</span>
  .map(flattenPost)        <span class="hljs-comment">// format the post for Pug templating</span>
  .map(markdownAndTemplate)<span class="hljs-comment">// render markdown &amp; render template</span>
  .subscribe(writePost);
</code></pre>
<p>Now we have a working, Rx.js version of our Static Site Generator that does the same as it did with Promises, but with built-in file watch and rebuild!</p>
<p><img src="/img/rx-post-writer.gif" alt="animated gif illustrating running application live-updating output HTML on markdown edits"></p>
<p>On to our next goal, the index page...</p>
<h2 id="goal-2-write-index-page-with-latest-post-metadata">
    <a class="header-anchor" href="#goal-2-write-index-page-with-latest-post-metadata">
      <span class="header-link"></span>
    </a>
    Goal 2: Write Index Page with Latest Post Metadata</h2><p>Our index page template, <code>index.pug</code>:</p>
<pre><code class="hljs lang-jade">html
  head
    title Welcome to my blog!
  body
    h1 Blog Posts:

    //- Output h2 with link &amp; paragraph tag with description
    for post in posts
      h2: a.title(href=&#39;/&#39; + post.slug + &#39;.html&#39;)= post.title
      p= post.description
</code></pre>
<p>The data our template expects must be structured thus:</p>
<pre><code class="hljs lang-js">{
  <span class="hljs-attr">posts</span> : [
    { <span class="hljs-attr">title</span>:<span class="hljs-string">"Intro To Rx.js"</span>, <span class="hljs-attr">slug</span>: <span class="hljs-string">"intro-to-rx-js"</span>, <span class="hljs-attr">description</span>: <span class="hljs-string">"..."</span>},
    { <span class="hljs-attr">title</span>:<span class="hljs-string">"Post Two"</span>, <span class="hljs-attr">slug</span>: <span class="hljs-string">"post-2"</span>, <span class="hljs-attr">description</span>: <span class="hljs-string">"..."</span>},
    <span class="hljs-comment">//...</span>
  ]
}
</code></pre>
<h3 id="an-observable-of-post-metadata">
    <a class="header-anchor" href="#an-observable-of-post-metadata">
      <span class="header-link"></span>
    </a>
    An Observable of Post Metadata</h3><p>Earlier, we mapped the <code>latestFileContents$</code> over the <code>frontmatter</code> function. We need to use that Observable for our index page as well, so let&#39;s modify our code from above to capture that Observable and set it aside:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> postsAndMetadata$ = latestFileContents$
  .map(frontmatter);

postsAndMetadata$ <span class="hljs-comment">//same as before:</span>
  .map(flattenPost)
  .map(markdownAndTemplate)
  .subscribe(writePost);
</code></pre>
<p>The <code>frontmatter</code> function returns an object with <code>data</code> and <code>contents</code> keys, but we only need the value of <code>data</code> for our index page template so we&#39;ll <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-pluck"><code>pluck</code></a> that property from the object:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> metadata$ = postsAndMetadata$
  .pluck(<span class="hljs-string">'data'</span>);
</code></pre>
<p>At this point we have an Observable that emits latest metadata for a file when that file is created or saved. We need to transform our Observable (&quot;collection over time&quot;) to an array (&quot;collection over space&quot;). Rx.js&#39;s has a <code>reduce</code> method that can do this, but it waits for an Observable to &quot;complete&quot; before emitting one final &quot;reduced&quot; value, and our file-watching <code>$metadata</code> Observable never &quot;completes.&quot;</p>
<p>We need a way to aggregate values into an accumulator like <code>reduce</code> does, but that emits the new accumulator value on each iteration so we don&#39;t have to wait for the &quot;complete&quot; that will never come. Rx.js has a method called <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-scan"><code>.scan</code></a> that does just this:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> metadataMap$ = metadata$
  .scan(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">acc, post</span>)</span>{
    acc[post.slug] = post;
    <span class="hljs-keyword">return</span> acc;
  }, {});
</code></pre>
<p>By making the <code>slug</code> the keys in the <code>acc</code> object, there will be only one property per post. When we first start our script, we&#39;ll get a post object from <code>$metadata</code> with the slug <code>post-2</code> and add it to the accumulator as <code>acc[&#39;post-2&#39;]</code>.</p>
<p>When post two is updated and saved, its metadata will be sent to <code>.scan</code> again, but it won&#39;t add a new key to <code>acc</code>: it will <em>overwrite</em> the existing <code>acc[&#39;post-2&#39;]</code>. In this way, <code>metadataMap$</code> will emit an object containing the latest metadata for <em>all posts</em>, with <em>one key per post</em>. The output will look thus:</p>
<pre><code class="hljs lang-js">{
  <span class="hljs-string">'intro-to-rx-js'</span> : { title, description, slug },
  <span class="hljs-string">'post-2'</span> : { title, description, slug }
}
</code></pre>
<h3 id="transforming-the-data-for-pug-">
    <a class="header-anchor" href="#transforming-the-data-for-pug-">
      <span class="header-link"></span>
    </a>
    Transforming the Data for Pug.</h3><p>We now have an object with an entry for each post, but this does not match the format we outlined above (<code>{ posts : [ post, post, post ] }</code>). In the next two steps we can transform the object into an array and then insert it into a wrapper object:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> indexTemplateData$ = metadataMap$
  .map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValuesAsArray</span>(<span class="hljs-params">postsObject</span>)</span>{ <span class="hljs-comment">// (or Object.values in ES2017)</span>
    <span class="hljs-comment">// IN: { 'slug' : postObj, 'slug2' : postObj2, ... }</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(postsObject)
      .reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">acc, key</span>)</span>{
        acc.push(postsObject[key]);
        <span class="hljs-keyword">return</span> acc;
      }, []);
    <span class="hljs-comment">// OUT: [postObj, postObj2, ...]</span>
  })
  .map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatForTemplate</span>(<span class="hljs-params">postsArray</span>)</span>{
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">posts</span> : postsArray
    };
  })
</code></pre>
<h3 id="reducing-repetition-and-noise">
    <a class="header-anchor" href="#reducing-repetition-and-noise">
      <span class="header-link"></span>
    </a>
    Reducing Repetition and Noise</h3><p>Now we get have an Observable that emits the latest listing of post metadata, formatted for the <code>index.pug</code> template, on each add or change event. This isn&#39;t quite what we want, however, for two reasons.</p>
<p>First: in the course of editing a post, most of your changes will be to content, not to the metadata. Content changes don&#39;t affect the index page, so we want to drop any emissions from <code>indexTemplateData$</code> where the data is the same as the previous emission. This is another case where <code>.distinctUntilChanged</code> comes in handy:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> distinctITD$ = indexTemplateData$
  .distinctUntilChanged(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compareStringified</span>(<span class="hljs-params">last, current</span>)</span>{
    <span class="hljs-comment">//true = NOT distinct; false = DISTINCT </span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(last) === <span class="hljs-built_in">JSON</span>.stringify(current);
  });
</code></pre>
<p>We pass a comparator function to <code>distinctUntilChanged</code> this time because <code>formatForTemplate</code> (above) returns a newly created object each time-- the new object it emits will <em>always</em> be &quot;distinct&quot; from the last one, even if their contents are identical. We stringify the <code>last</code> and <code>current</code> objects in order to compare their <em>contents</em> and emit only when they differ.</p>
<p>Second: when we first start our script, it reads each file and emits its contents once. This means that while files are initially being read, <code>indexTemplateData$</code> will emit a bunch of incomplete objects consisting of whatever posts have been read so far. If we have 4 posts, emissions will look like this:</p>
<ol>
<li><code>{ post1 }</code></li>
<li><code>{ post1, post2 }</code></li>
<li><code>{ post1, post2, post3 }</code> </li>
<li><code>{ post1, post2, post3, post4 }</code></li>
</ol>
<p><strong>Only the last version</strong> represents a collection of metadata from all pages; the others can be ignored. In order to get around the flood of events on <code>indexTemplateData$</code> on startup, we&#39;ll use <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-debounceTime"><code>.debounceTime</code></a>, which will wait until an Observable stops emitting for a fixed amount of time before emitting the latest result:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> distinctDebouncedITD$ = distinctITD$
  .debounceTime(<span class="hljs-number">100</span>); <span class="hljs-comment">// wait 'til the observable STOPS emitting for 100ms, then emit latest</span>
</code></pre>
<p>This probably isn&#39;t <em>the</em> most graceful solution, but when <code>indexTemplateData$</code> gets its initial flood of emissions, <code>distinctDebouncedITD$</code> will only emit once, once it&#39;s finished.</p>
<h3 id="writing-the-index-page">
    <a class="header-anchor" href="#writing-the-index-page">
      <span class="header-link"></span>
    </a>
    Writing the Index Page</h3><p>The only thing left is to pass the values from <code>distinctDebouncedITD$</code> to the template rendering function then write the results to disk:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> renderIndex = pug.compileFile(<span class="hljs-string">`<span class="hljs-subst">${__dirname}</span>/templates/index.pug`</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeIndexPage</span>(<span class="hljs-params">indexPage</span>)</span>{
  <span class="hljs-keyword">var</span> outfile = path.join(__dirname, <span class="hljs-string">'out'</span>, <span class="hljs-string">'index.html'</span>);
  writeFileAsObservable(outfile, indexPage)
    .subscribe({
      <span class="hljs-attr">next</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'wrote '</span> + outfile),
      <span class="hljs-attr">error</span>: <span class="hljs-built_in">console</span>.error
    });
}

postsListing$
  .map(renderIndex)
  .subscribe(writeIndexPage);
</code></pre>
<p>Now <code>index.html</code> will be rewritten when we edit a post, but <em>only if the metadata changed</em>: </p>
<p><img src="/img/rx-index-writer.gif" alt="animated gif illustrating running application live-updating index page but only with metadata changes"></p>
<p>That&#39;s it!</p>
<h2 id="conclusion-and-next-steps">
    <a class="header-anchor" href="#conclusion-and-next-steps">
      <span class="header-link"></span>
    </a>
    Conclusion and Next Steps</h2><p>If you made it this far, congratulations! My goal was not to explain each Rx.js concept introduced herein in detail, but to walk through the process of using Rx.js to complete a real-world programming task. I hope this was useful! If this post has piqued your interest, I highly recommend running the full version of the code this post was based on, which you can find in <a href="https://github.com/Sequoia/rx-static-blog-example">this repository</a>. As always, if you have any questions or Rx.js corrections please feel free to <a href="/contact/">contact me</a>. Happy coding!</p>
<h1 id="comments">
    <a class="header-anchor" href="#comments">
      <span class="header-link"></span>
    </a>
    Comments</h1><blockquote>
<p>This is a great overview - thank you! What are you using to do those awesome terminal gifs?</p>
</blockquote>
<p>- <a href="http://mrh.io">Mark</a>, <time datetime="2017-01-31 16:04:27 UTC">January 31, 2017</time></p>
<p>Thanks, Mark! I use <a href="http://www.cockos.com/licecap/">licecap</a> to make gifs on my Macintosh. Tips to keep the sizes/zoom consistent:</p>
<ul>
<li>Use a tiling tool like <a href="https://www.spectacleapp.com/">Spectacle</a> to tile to e.g. ¬º screen</li>
<li>Use <em>the same screen resolution</em> when recording these gifs. If you switch from desktop to laptop you&#39;ll get different zoom</li>
</ul>
<p>See <a href="/techniques-to-avoid-live-coding-part-1/">my post on avoiding livecoding in demos</a> for more such tricks!</p>

]]></content:encoded></item><item><title>Let's Code It: Static Site Generator</title><link>https://sequoia.makes.software/lets-code-it-static-site-generator</link><description>Markdown in, HTML out... do we really need a framework for this? I Don't Think So!!</description><guid isPermaLink="true">https://sequoia.makes.software/lets-code-it-static-site-generator</guid><pubDate>Thu, 05 Jan 2017 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>Traditionally, if you wanted to create a blog or website that you can update easily without having to directly edit HTML, you&#39;d use a tool like Wordpress. The basic flow for serving a website from a CMS like Wordpress is as follows:</p>
<ol>
<li>Store content (e.g. &quot;posts&quot;) in a database</li>
<li>Store display configuration (templates, CSS, etc.) separately</li>
<li>When a visitor requests a page, run a script to...<ol>
<li>Pull the content from the database</li>
<li>Read the appropriate template</li>
<li>Put them together to build page HTML</li>
<li>Send HTML to the user</li>
</ol>
</li>
</ol>
<h2 id="enter-static-site-generators">
    <a class="header-anchor" href="#enter-static-site-generators">
      <span class="header-link"></span>
    </a>
    Enter Static Site Generators</h2><p>It occurred to some people that it didn&#39;t make sense to run step three <em>every single time</em> someone hit a page on their site. If step three (combining template with page content) were done in batch beforehand, all of the site&#39;s pages could be stored on disk and served from a static server! An application that takes this approach, generating &quot;static&quot; webpages and storing them as flat HTML files, is referred to as a Static Site Generator (or SSG). An SSG has the following benefits over a CMS: </p>
<ol>
<li>It eliminates the need to run a database server</li>
<li>It eliminates the need to execute PHP or any application logic on the server</li>
<li>It allows the site to be served from a highly performant file server like NGINX...</li>
<li>...or any service that offers free static hosting (namely <a href="https://help.github.com/articles/what-is-github-pages/">Github Pages</a>)</li>
<li>Content written as flat markdown files can easily be tracked in a git repo &amp; collaborated on thus</li>
</ol>
<p>Points one and two dramatically reduce the attack surface of a web server, which is great for security. Point three (in conjunction with one and two) allows for greater site reliability and allows a server to handle much more traffic without crashing. Point four is very attractive from a cost perspective (as are one, two, and three if you&#39;re paying for hosting). The benefits of static site generators are clear, which is why many organization and individuals are using them, including <a href="https://strongloop.com/strongblog/new-life-for-loopback-documentation/">the publisher of this blog</a> and <a href="https://sequoia.makes.software/">the author of this post</a>!</p>
<h2 id="ok-let-39-s-use-an-ssg">
    <a class="header-anchor" href="#ok-let-39-s-use-an-ssg">
      <span class="header-link"></span>
    </a>
    OK, Let&#39;s Use an SSG</h2><p>There are many available SSG tools, one hundred and sixty two listed on <a href="https://www.staticgen.com/">a site that tracks such tools</a> at the time of writing. One of the reasons there are so many options is that building an SSG isn&#39;t terribly complicated. The core functionality is:</p>
<ol>
<li>Read markdown files (content)</li>
<li>Parse frontmatter (we&#39;ll look at this more later)</li>
<li>Convert markdown to HTML</li>
<li>Highlight code snippets</li>
<li>Insert the content into the appropriate template and render page HTML </li>
<li>Write this HTML content to disk</li>
</ol>
<p>I&#39;ve simplified the process a bit here, but overall, this is a pretty straightforward programming task. Given libraries to do the heavy lifting of parsing markdown, highlighting code, etc., all that&#39;s left is the &quot;read input files, process, write output files.&quot;</p>
<p>So can we write our own static site generator in Node.js? In this blog post we&#39;ll step through each of the steps outlined above to create the skeleton of an SSG. We&#39;ll skip over some non-page-generation tasks such as organizing images &amp; CSS, but there&#39;s enough here to give you a good overview of what an SSG does. Let&#39;s get started!</p>
<h1 id="building-an-ssg">
    <a class="header-anchor" href="#building-an-ssg">
      <span class="header-link"></span>
    </a>
    Building an SSG</h1><h2 id="1-read-markdown-files">
    <a class="header-anchor" href="#1-read-markdown-files">
      <span class="header-link"></span>
    </a>
    1. Read Markdown Files</h2><p> No Wordpress means no WYSIWYG editor, so we&#39;ll be authoring our posts in a text editor. Like most static site generators, we will store our page content as <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> files. Markdown is a lightweight markup alternative to HTML that&#39;s designed to be easy to type, human readable, and typically used to author content that will ultimately be converted to and published as HTML, so it&#39;s ideal for our purpose here. A post written in markdown might look like this:</p>
<pre><code class="hljs lang-md"><span class="hljs-section"># The Hotdog Dilemma</span>

<span class="hljs-emphasis">*Are hotdogs sandwiches*</span>? There are [<span class="hljs-string">many people</span>](<span class="hljs-link">https://en.wikipedia.org/wiki/Weasel_word</span>) who say they are, including:

<span class="hljs-bullet">* </span>Cecelia
<span class="hljs-bullet">* </span>Donald
<span class="hljs-bullet">* </span>James

<span class="hljs-section">## Further Evidence</span>
... etc. ...
</code></pre>
<p>We&#39;ll put our posts in a directory called <code>_posts</code>. This will be like the &quot;<code>Posts</code>&quot; table in a traditional CMS, in the sense that it&#39;s where we&#39;ll look up our content when it&#39;s time to generate the site.</p>
<p>To read each file in the <code>_posts</code> directory, we need to list all the files, then read each one in turn. The <a href="https://www.npmjs.com/package/node-dir"><code>node-dir</code></a> package that does that for us, but the API isn&#39;t quite what we need, however, as it&#39;s callback based and oriented towards getting file names rather than compiling a array of all file contents. Creating <a href="https://gist.github.com/Sequoia/41a9c8be2ff2441357f41fddd3f68124">a wrapper function that returns a Bluebird promise containing an array of all file contents</a> is tangential to the topic of this post, but let&#39;s imagine we&#39;ve done so and we have an API that looks like this:</p>
<pre><code class="hljs lang-js">getFiles(<span class="hljs-string">'_posts'</span>, {<span class="hljs-attr">match</span>: <span class="hljs-regexp">/.*\.md/</span>})
  .then(posts){
    posts.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">contents</span>)</span>{
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'post contents:'</span>);
      <span class="hljs-built_in">console</span>.log(contents);
    })
  });
</code></pre>
<p>Because we&#39;re using <a href="bluebirdjs.com/docs/api/">Bluebird promises</a> and our Promise result is an array, we can map over it directly:</p>
<pre><code class="hljs lang-js">getFiles(<span class="hljs-string">'_posts'</span>, {<span class="hljs-attr">match</span>: <span class="hljs-regexp">/.*\.md/</span>})
  .map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processPost</span>(<span class="hljs-params">content</span>)</span>{
    <span class="hljs-comment">// ... process the post</span>
    <span class="hljs-comment">// ... return processed version</span>
  })
  .map(nextProcessingFunction)
  <span class="hljs-comment">//...</span>
</code></pre>
<p>This set up will make it easy to write functions to transform out input to our output step by step, and apply those functions, in order, to each post.</p>
<h2 id="2-parse-frontmatter">
    <a class="header-anchor" href="#2-parse-frontmatter">
      <span class="header-link"></span>
    </a>
    2. Parse Frontmatter</h2><p>In a traditional CMS, the <code>Posts</code> table holds not just the contents of the post, but also metadata such as its title, author, publish date, and perhaps a permanent URL or canonical link. This metadata is used both on the post page or in a page <code>&lt;title&gt;</code> and on index pages. In our flat-file system, all the information for a post must be contained in the markdown file for that post. We&#39;ll use the same solution for this challenge that is used by Jekyll and others: YAML frontmatter.</p>
<p><a href="http://yaml.org/">YAML</a> is a data serialization format that&#39;s basically like JSON but lighter weight. It looks like this:</p>
<pre><code class="hljs lang-yaml"><span class="hljs-attr">key:</span> value
<span class="hljs-attr">author:</span> Sequoia McDowell
<span class="hljs-attr">Object:</span>
<span class="hljs-attr">  key:</span> http://example.com
<span class="hljs-attr">  wikipedia:</span> https://wikipedia.com
<span class="hljs-attr">List:</span>
<span class="hljs-bullet">  -</span> First
<span class="hljs-bullet">  -</span> Second
<span class="hljs-bullet">  -</span> Third
</code></pre>
<p>&quot;<a href="https://jekyllrb.com/docs/frontmatter/">Frontmatter</a>&quot; on Markdown files is an idea borrowed from Jekyll. Very simply, it means putting a block of YAML at the top of your markdown file containing metadata for that file. The SSG separates this YAML data from the rest of the file (the contents) and parses it for use in generating the page for that post. With YAML frontmatter, our post looks like this:</p>
<pre><code class="hljs lang-md">---
title: The Hotdog Dilemma
author: Sequester McDaniels
description: Are hotdogs sandwiches? You won't believe the answer!
<span class="hljs-section">path: the-hotdog-dilemma.html
---</span>

<span class="hljs-emphasis">*Are hotdogs sandwiches*</span>? There are [<span class="hljs-string">many people</span>](<span class="hljs-link">https://en.wikipedia.org/wiki/Weasel_word</span>) who say they are, including:

...
</code></pre>
<p>Trimming this bit of YAML from the top of our post and parsing it is easy with <a href="https://www.npmjs.com/package/front-matter"><code>front-matter</code></a>, the node package that does exactly this! That means this step is as simple as <code>npm install</code>ing the library and adding it to our pipeline:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> getFiles = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./lib/getFiles'</span>);
<span class="hljs-keyword">const</span> frontmatter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'front-matter'</span>);

getFiles(<span class="hljs-string">'_posts'</span>, {<span class="hljs-attr">match</span>: <span class="hljs-regexp">/.*\.md/</span>})
  .map(frontmatter) <span class="hljs-comment">// =&gt; { data, content }</span>
  .map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">parsedPost</span>)</span>{
    <span class="hljs-built_in">console</span>.log(post.data.title);   <span class="hljs-comment">// "The Hotdog Dilemma"</span>
    <span class="hljs-built_in">console</span>.log(post.data.author);  <span class="hljs-comment">// "Sequester McDaniels"</span>
    <span class="hljs-built_in">console</span>.log(post.content);      <span class="hljs-comment">// "*Are hotdogs sandwiches*? There are [many people](https: ..."</span>
  });
</code></pre>
<p>Now that our metadata is parsed and removed from the rest of the markdown content, we can work on converting the markdown to HTML. </p>
<h2 id="3-convert-markdown-to-html">
    <a class="header-anchor" href="#3-convert-markdown-to-html">
      <span class="header-link"></span>
    </a>
    3. Convert Markdown to HTML</h2><p>As mentioned, Markdown is a markup language that provides an easy, flexible way to mark up documents text in a human readable way. It was created by John Gruber in 2004 and introduced in <a href="http://daringfireball.net/projects/markdown/">a blog post</a> that serves as the de-facto standard for the markdown format. This blog post would go on to be referenced by others who wished to build markdown parsers in Ruby, Javascript, PHP, and other languages.</p>
<p>The problem with having only a &quot;de-facto&quot; standard for a format like markdown is that this means <em>there is no actual, detailed standard</em>. The result is that over the years different markdown parsers introduced their own quirks and differences in parsing behavior, <em>as well as</em> extensions for things like <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">checklists</a> or <a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code">fenced code blocks</a>. The upshot is this: there is no single &quot;markdown&quot; format-- the markdown you write for one parser <strong>may not be be rendered the same by another parser</strong>.</p>
<p>In response to this ambiguity, the <a href="http://commonmark.org/">CommonMark</a> standard was created to provide &quot;a strongly defined, highly compatible specification of Markdown.&quot; This means that if you use a CommonMark compatible parser in JavaScript and later switch to a CommonMark compatible parser in Ruby, you should get the exact same output.</p>
<p>The main JavaScript implementation of CommonMark is <a href="https://github.com/markdown-it/markdown-it"><code>markdown-it</code></a>, which is what we&#39;ll use:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> getFiles = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./lib/getFiles'</span>);
<span class="hljs-keyword">const</span> frontmatter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'front-matter'</span>);
<span class="hljs-keyword">const</span> md = <span class="hljs-built_in">require</span>(<span class="hljs-string">'markdown-it'</span>)(<span class="hljs-string">'commonmark'</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertMarkdown</span>(<span class="hljs-params">post</span>)</span>{
  post.content = md.render(post.content);
  <span class="hljs-keyword">return</span> post;
}

getFiles(<span class="hljs-string">'_posts'</span>, {<span class="hljs-attr">match</span>: <span class="hljs-regexp">/.*\.md/</span>})
  .map(frontmatter) <span class="hljs-comment">// =&gt; { data, content:md }</span>
  .map(convertMarkdown) <span class="hljs-comment">// =&gt; { data, content:html }</span>
  .map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">post</span>)</span>{
    <span class="hljs-built_in">console</span>.log(post.content);
    <span class="hljs-comment">// "&lt;p&gt;&lt;em&gt;Are hotdogs sandwiches&lt;/em&gt;? There are &lt;a href="https://en.wikipedia.org/wiki/Weasel_word"&gt;many people&lt;/a&gt; who..."</span>
  });
</code></pre>
<p>Now our markdown is HTML!</p>
<h2 id="4-highlight-code-snippets">
    <a class="header-anchor" href="#4-highlight-code-snippets">
      <span class="header-link"></span>
    </a>
    4. Highlight Code Snippets</h2><p>We&#39;re writing a technical blog, so we want to display code with syntax highlighting. If I write:</p>
<pre><code class="hljs lang-markdown">Here's a <span class="hljs-emphasis">*pretty good*</span> function:

<span class="hljs-code">```js
function greet(name){
  return "Hello " + name;
}
```</span>
</code></pre>
<p>It should be output thus:</p>
<pre><code class="hljs lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here's a <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>pretty good<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> function:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"language-js"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-function"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-keyword"</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-title"</span>&gt;</span>greet<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-params"</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>{
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-keyword"</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs-string"</span>&gt;</span>"Hello "<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> + name;
}
<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>
</code></pre>
<p>These classes allow us to target each piece of the code (keywords, strings, function parameters, etc.) separately with CSS, as is being done throughout this blog post. The <a href="https://github.com/markdown-it/markdown-it#syntax-highlighting"><code>markdown-it</code> docs</a> suggest using <a href="https://highlightjs.org/"><code>highlight.js</code></a> so that&#39;s what we&#39;ll do:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> getFiles = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./lib/getFiles'</span>);
<span class="hljs-keyword">const</span> frontmatter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'front-matter'</span>);
<span class="hljs-keyword">const</span> md = <span class="hljs-built_in">require</span>(<span class="hljs-string">'markdown-it'</span>)(<span class="hljs-string">'commonmark'</span>, {
  <span class="hljs-attr">highlight</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str, lang</span>) </span>{
    <span class="hljs-comment">// "language" is specified after the backticks:</span>
    <span class="hljs-comment">// ```js, ```html, ```css etc.</span>
    <span class="hljs-comment">// "str" is the contents of each fenced code block</span>
    <span class="hljs-keyword">return</span> hljs.highlight(lang, str).value;
  }
});

<span class="hljs-comment">// ... unchanged ...</span>
</code></pre>
<p>Now we can used fenced code blocks as above. We&#39;re almost there!</p>
<h2 id="5-templating">
    <a class="header-anchor" href="#5-templating">
      <span class="header-link"></span>
    </a>
    5. Templating</h2><p>There are plenty of templating libraries in JavaScript; we&#39;ll use <a href="https://pugjs.org/api/getting-started.html">Pug</a> (formerly &quot;Jade&quot;) here. First we&#39;ll create a template for posts:</p>
<pre><code class="hljs lang-jade">//templates/post.pug
- var thisYear = (new Date()).getFullYear();
doctype html
html(lang=&#39;en&#39;)
  head
    title= title
    meta(name=&#39;description&#39;, content=description)
  body
    h1= title 
    | !{content}
    footer &amp;copy; #{author} #{thisYear}
</code></pre>
<p>We won&#39;t dwell on the Pug syntax, but the important bits here are where are our data is injected into the template.  Note in particular:</p>
<ol>
<li><code>title= title</code> for the <code>&lt;title&gt;</code> tag</li>
<li><code>h1= title</code> for the page header</li>
<li><code>| !{content}</code> to output page contents, directly in the <code>body</code>, without escaping HTML</li>
</ol>
<p>Next we must create a function that uses this template file to render a &quot;post object&quot; to HTML.</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//...</span>
<span class="hljs-keyword">const</span> pug = <span class="hljs-built_in">require</span>(<span class="hljs-string">'pug'</span>);
<span class="hljs-keyword">const</span> postRenderer = pug.compileFile(<span class="hljs-string">'./templates/post.pug'</span>);

<span class="hljs-comment">//function for our posts promise pipeline:</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderPost</span>(<span class="hljs-params"></span>)</span>{
  post.content = postRenderer(post);
  <span class="hljs-keyword">return</span> post;
}
</code></pre>
<p>We&#39;ll also need a function to flatten the post object for Pug&#39;s consumption</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// IN:  { content, data : { title, description, ...} }</span>
<span class="hljs-comment">// OUT: { content, title, description, ... }</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flattenPost</span>(<span class="hljs-params">post</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign({}, post.data, { <span class="hljs-attr">content</span> : post.content });
}
</code></pre>
<p>Now we can plug these two new functions into our pipeline</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//...</span>

getFiles(<span class="hljs-string">'_posts'</span>, {<span class="hljs-attr">match</span>: <span class="hljs-regexp">/.*\.md/</span>})
  .map(frontmatter) <span class="hljs-comment">// =&gt; { data, content:md }</span>
  .map(convertMarkdown) <span class="hljs-comment">// =&gt; { data, content:html }</span>
  .map(flattenPost)
  .map(renderPost)
  .map(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> {
    <span class="hljs-built_in">console</span>.log(post.content); <span class="hljs-comment">// '&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;title&gt; ...'</span>
    <span class="hljs-built_in">console</span>.log(post.path);    <span class="hljs-comment">// 'the-hotdog-dilemma.html'</span>
  })
</code></pre>
<p>Finally we&#39;re at the last step: writing posts to an output directory.</p>
<h2 id="6-writing-html-output">
    <a class="header-anchor" href="#6-writing-html-output">
      <span class="header-link"></span>
    </a>
    6. Writing HTML output</h2><p>We&#39;re going to write our HTML files to a directory named <code>out</code>. This will contain the final output, ready to publish to a web server. Our function should, for each post, write the <code>post.content</code> to a path specified by <code>post.path</code>. Since we&#39;re using Bluebird already, we&#39;ll use the <a href="http://bluebirdjs.com/docs/api/promise.promisifyall.html">promisified</a> version of the file system API.</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//...</span>
<span class="hljs-keyword">const</span> <span class="hljs-built_in">Promise</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'bluebird'</span>);
<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">Promise</span>.promisifyAll(<span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>));
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);
<span class="hljs-keyword">const</span> outdir = <span class="hljs-string">'./out'</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeHTML</span>(<span class="hljs-params">post</span>)</span>{
  <span class="hljs-keyword">return</span> fs.writeFileAsync(path.join(outdir, post.path), post.content);
}
</code></pre>
<h2 id="putting-it-all-together">
    <a class="header-anchor" href="#putting-it-all-together">
      <span class="header-link"></span>
    </a>
    Putting it All Together</h2><p>Now we have a script that fulfills all of our original goals.</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// requires...</span>
<span class="hljs-comment">// utility functions...</span>

<span class="hljs-comment">//Read posts &amp; generate HTML:</span>

getFiles(<span class="hljs-string">'_posts'</span>, {<span class="hljs-attr">match</span>: <span class="hljs-regexp">/.*\.md/</span>}) <span class="hljs-comment">// 1</span>
  .map(frontmatter)                   <span class="hljs-comment">// 2</span>
  .map(convertMarkdown)               <span class="hljs-comment">// 3</span>
  .map(flattenPost)
  .map(renderPost)                    <span class="hljs-comment">// 4, 5</span>
  .map(writeHTML)                     <span class="hljs-comment">// 6</span>
  .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'done!'</span>);
  })
  .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{
    <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'there was an error!'</span>)
    <span class="hljs-built_in">console</span>.error(e)
  });
</code></pre>
<p>That&#39;s it!</p>
<h1 id="conclusion-and-next-steps">
    <a class="header-anchor" href="#conclusion-and-next-steps">
      <span class="header-link"></span>
    </a>
    Conclusion and Next Steps</h1><p>There is a lot we did not go over in this post, such as generating an index page, file watching and automatic re-running and publishing*, but this post shows the <em>basics</em> of static site generation, and how the main logic can be captured on just a few dozen lines. (Admittedly, my production version is <a href="https://github.com/Sequoia/sequoia.github.com/blob/f0a4488c0979dee4dbcb16a8e30eef73620166e9/src/index.js">a bit more complex</a>.)</p>
<p>By writing your own tool you miss out out on the reusability of existing tools, but you gain <em>full control</em> over your blog build and <em>less reliance on a third party tool you don&#39;t control</em>. For me, the tradeoff of effort for control was worth it. Perhaps it is for you too!</p>
<p>* <em>My <a href="https://sequoia.makes.software/lets-code-it-static-site-generator-with-rxjs/">next post</a> will go over those features and more, so stay tuned!</em></p>

]]></content:encoded></item><item><title>Interactive Debugging with Node.js</title><link>https://sequoia.makes.software/interactive-debugging-with-nodejs</link><description>Interactive Debuggers are familiar to every Java developer, but they are much less well known in the JavaScript world. If you're a JavaScript developer who hasn't experienced the power of step-thru debugging, read this post to find out what you're missing!</description><guid isPermaLink="true">https://sequoia.makes.software/interactive-debugging-with-nodejs</guid><pubDate>Wed, 09 Nov 2016 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>A &quot;step through debugger&quot; is a powerful tool that is very handy when your application isn&#39;t behaving the way you expect it to. A step through debugger (a.k.a. &quot;interactive debugger&quot; or just &quot;debugger&quot;) allows you to pause code execution in your application in order to:</p>
<ul>
<li>inspect or alter application state</li>
<li>see the code execution path (&quot;call stack&quot;) that lead to the currently executing line of code, and</li>
<li>inspect the application state at earlier points on that path</li>
</ul>
<p>Interactive Debuggers* are familiar to every Java developer (among others), but they are much less well known in the JavaScript world. This is unfortunate, both because debuggers can be so helpful in diagnosing logic issues, and because the debugging tools in JavaScript today are the best &amp; easiest to use they&#39;ve ever been! This post will introduce the Node.js debugging tools in <a href="https://code.visualstudio.com">VS Code</a> in a way that&#39;s accessible to programmers who have never used a debugger before.</p>
<h2 id="why-use-a-debugger-">
    <a class="header-anchor" href="#why-use-a-debugger-">
      <span class="header-link"></span>
    </a>
    Why Use a Debugger?</h2><p>Debuggers are useful when writing your own, original code, but they really show their value when you&#39;re working with an unfamiliar codebase. Being able to step through the code execution line by line and function by function can save hours of poring over source code, trying to step through it in your head.</p>
<p>The ability to change the value of a variable at runtime allows you to play through different scenarios without hardcoding values or restarting your application. Conditional breakpoints let you halt execution upon encountering an error to figure out how you got there. Even if using a debugger isn&#39;t part of your everyday process, knowing how they work adds a powerful tool to your toolbox!</p>
<h2 id="setting-up">
    <a class="header-anchor" href="#setting-up">
      <span class="header-link"></span>
    </a>
    Setting Up</h2><p>We&#39;ll be using <a href="https://code.visualstudio.com">VS Code</a>, which has built-in Node.js debugging capabilities. In order to run code in the context of the VS Code debugger, we must first make VS Code aware of our Node.js project. For this demo I&#39;ll create a simple express app with <a href="https://expressjs.com/en/starter/generator.html"><code>express-generator</code></a>, you can follow along by running the commands below:</p>
<pre><code class="hljs lang-nohighlight">$ npm install express-generator -g
$ express test-app   # create an application
$ cd test-app        
$ npm install
$ code .             # start VS Code
</code></pre>
<p>With VS Code open, we need to open the Debug pane by clicking the <a href="https://code.visualstudio.com/images/debugging_debugicon.png">bug icon</a> in left sidebar menu. With the debug pane open, you may note that the gear icon at the top of the pane has a red dot over it. This is because there are currently no &quot;launch configurations:&quot; configuration objects which tell VS Code how to run your application. Click the gear icon, select &quot;Node.js,&quot; and VS Code will generate a boilerplate launch configuration for you.</p>
<p>There are two ways to attach the VS Code debugger to your application:</p>
<ol>
<li>Set up a launch configuration and launch your app from within VS Code</li>
<li>Start your app from the console with <code>node --debug-brk your-app.js</code> and run the &quot;Attach&quot; launch configuration</li>
</ol>
<p>The first approach normally requires some setup (which is beyond the scope of this post but you can <a href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations">read about here</a>), but because our <code>package.json</code> has a <code>run</code> script, VS Code automagically created a launch configuration based on that script. That means we should be able to simply click the green &quot;run&quot; button to start our application in the debugger.</p>
<p><img src="/img/launch_button.png" alt="debug &quot;launch&quot; button with mouse pointer over it"></p>
<p>If all went well, you should see a new toolbar at the top of your screen with pause and play buttons (among others). The Debug Console at the bottom of the screen should tell you what command it ran &amp; what output that command yielded, something like this:</p>
<pre><code class="hljs lang-nohighlight">node --debug-brk=18764 --nolazy bin/www 
Debugger listening on port 18764
</code></pre>
<p>When we load <a href="http://localhost:3000">http://localhost:3000</a> in a browser, we can see the Express log messages in this same Debug Console:</p>
<pre><code class="hljs lang-nohighlight">GET / 304 327.916 ms - -
GET /stylesheets/style.css 304 1.313 ms - -
</code></pre>
<p>Now that we have the code running with the VS Code debugger attached, let&#39;s set some breakpoints and start stepping through our code!   </p>
<h2 id="breakpoints">
    <a class="header-anchor" href="#breakpoints">
      <span class="header-link"></span>
    </a>
    Breakpoints</h2><p>A breakpoint is a marker on a line of code that tells the debugger &quot;pause execution here.&quot; To set a breakpoint in VS Code, click the gutter just to the left of the line number. I&#39;ve opened <code>routes/index.js</code> in order to set a breakpoint in the root request listener:</p>
<p><img src="/img/set-breakpoint.png" alt="setting breakpoint on line 6 of routes/index.js"> </p>
<p>Note that the breakpoints pane at the bottom left has a listing for this new breakpoint (along with entries for exceptions, which we&#39;ll talk about momentarily). Now, when I hit <a href="http://localhost:3000">http://localhost:3000</a> in a browser again, VS Code will pause at this point &amp; allow me to examine what&#39;s going on a that point:</p>
<p><img src="/img/paused-on-breakpoint-1.png" alt="VS Code paused on breakpoint"></p>
<p>With the code paused here, we can examine variables and their values in the <strong>variables pane</strong> and see how we got to this point in the code in the <strong>call stack pane</strong>. You may also have noticed that the browser has not loaded the page-- that&#39;s because it&#39;s still waiting for our server to respond! We&#39;ll take a look at each of the sidebar panes in turn, but for now, I&#39;ll press the <strong>play</strong> button to allow code execution to continue.</p>
<p><img src="/img/play-button.png" alt="VS Code play button press"></p>
<p>Now the server should send the finished page to the browser. Note that the with code execution resumed, the &quot;play&quot; button is no longer enabled.</p>
<h3 id="other-types-of-breakpoints">
    <a class="header-anchor" href="#other-types-of-breakpoints">
      <span class="header-link"></span>
    </a>
    Other types of breakpoints</h3><p>In addition to breaking on a certain line each time it&#39;s executed, you can add dynamic breakpoints that pause execution only in certain circumstances. Here&#39;s a few of the more useful ones:</p>
<ol>
<li><strong>Conditional Breakpoint</strong>: After setting a breakpoint, right click on it &amp; select &quot;edit breakpoint,&quot; this will allow you to enter an expression to conditionally activate a breakpoint. For example, if you wanted to activate a breakpoint only if the user is an admin, you might add <code>user.role === &quot;admin&quot;</code> to your conditional breakpoint.</li>
<li><strong>Uncaught Exception</strong>: This is enabled by default. With this enabled, you don&#39;t have to set any breakpoints in order to locate errors, the debugger will pause on any (uncaught) exceptions.</li>
<li><strong>All Exceptions</strong>: If you have robust error handling in your application, but you still want to see where errors are coming from before they&#39;re caught and handled, enable this setting. Be warned, however, that many libraries throw and catch errors internally in the normal course of their execution, so this can be pretty noisy.</li>
</ol>
<h2 id="variable-pane">
    <a class="header-anchor" href="#variable-pane">
      <span class="header-link"></span>
    </a>
    Variable pane</h2><p>In this pane, you can examine and change variables in the running application. Let&#39;s edit our homepage route in <code>routes/index.js</code> to make the title a variable:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">/* GET home page. */</span>
<span class="hljs-keyword">var</span> ourTitle = <span class="hljs-string">'Express'</span>;
router.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>{
  res.render(<span class="hljs-string">'index'</span>, { <span class="hljs-attr">title</span>: ourTitle });
});
</code></pre>
<p>After editing our code, we&#39;ll need to <strong>restart the debugger</strong> so it picks up the new code. We can do this by clicking the green circle/arrow button in the top toolbar. After editing a file with a breakpoint already set and restarting the debugger (as we just did), you&#39;ll also want to check that your breakpoints are still in the right spot. VS Code does a pretty good job of keeping the breakpoint on the line you expect but it&#39;s not perfect.</p>
<p>With our breakpoint on what&#39;s now line 7 and with the debugger restarted, let&#39;s refresh our browser. The debugger should stop on line seven. We don&#39;t see <code>ourTitle</code> in the variable pane right away, because it&#39;s not &quot;Local&quot; to that function, but expand the &quot;Closure&quot; section just below the &quot;Local&quot; section and there it is!</p>
<p><img src="/img/ourTitle.png" alt="variable pane with the closure section expanded showing variable named &quot;ourTitle&quot; with value &quot;Express&quot;"></p>
<p>Double-clicking <code>ourTitle</code> in the Variables Pane allows us to edit it. This is a great way to tinker with your application and see what happens if you switch a flag from true to false, change a user&#39;s role, or do something else-- all without having to alter the actual application code <em>or</em> restart your application!</p>
<p>The variable pane is also a great way to poke around and see what&#39;s available in objects created by libraries or other code. For example, under &quot;Local&quot; we can see the <code>req</code> object, see that its type is <code>IncomingMessage</code>, and by expanding it we can see the <code>originalUrl</code>, <code>headers</code>, and various other properties and methods.</p>
<h2 id="stepping">
    <a class="header-anchor" href="#stepping">
      <span class="header-link"></span>
    </a>
    Stepping</h2><p>Sometimes, rather than just pausing the application, examining or altering a value, and setting it running again, you want to see what&#39;s happening in your code line by line: what function is calling which and  and how that&#39;s changing the application state. This is where the &quot;Debug Actions&quot; menu comes in: it&#39;s the bar at the top of the screen with the playback buttons. We&#39;ve used the <strong>continue</strong> (green arrow) and <strong>restart</strong> (green circle arrow) buttons so far, and you can hover over the others to see the names and associated keyboard shortcuts for each. The buttons are, from left to right:</p>
<ul>
<li>Continue/Pause: Resume execution (when paused) or pause execution. </li>
<li>Step over: Execute the current line and move to the next line. Use this button to step through a file line by line.</li>
<li>Step in: When paused on a function call, you can use this button to step <em>into that function</em>. This can get a bit confusing if there are multiple function calls on one line, so just play around with it.</li>
<li>Step out: Run the current function to its <code>return</code> statement &amp; step out to <em>the line of code that invoked that function</em>.</li>
<li>Restart: Stop your debugging session (kill your application) and start it again from the beginning. Use this after altering code. </li>
<li>Stop: Kill your application.</li>
</ul>
<h2 id="watch-expressions">
    <a class="header-anchor" href="#watch-expressions">
      <span class="header-link"></span>
    </a>
    Watch Expressions</h2><p>While stepping through your code, there may be certain values you always want to see the current value of. A &quot;watch expression&quot; will run (in the current scope!) at each paused/stopped position in your code &amp; display the return value of that expression. Hover over the Watch Expression pane and click the plus to add an expression. I want to see the user agent header of each request as well as <code>ourTitle</code>, whether the response object has had headers sent, and the value of <code>1 + 1</code>, just for good measure, so I&#39;ll add the following watch expressions:</p>
<pre><code class="hljs lang-nohighlight">req.headers[&#39;user-agent&#39;]
ourTitle
res._headerSent
1 + 1
</code></pre>
<p>When I refresh the browser the debugger pauses once again at the breakpoint on line 7 and we can see the result of each expression:</p>
<p><img src="/img/watch-expressions.png" alt="watch expressions with values"></p>
<h2 id="call-stack">
    <a class="header-anchor" href="#call-stack">
      <span class="header-link"></span>
    </a>
    Call Stack</h2><p>The Call Stack Pane shows us the function calls that got us to the current position in the code when execution is paused, and allow us to step back up that stack and examine the application state in earlier &quot;frames.&quot; By clicking the frame below the current frame you can jump to the code that called the current function. In our case, the current frame is labeled <code>(anonymous function)</code> in <code>index.js [7]</code>, and the one before that the <code>handle</code> function in <code>layer.js</code>, which is a component of the Express framework:</p>
<p><img src="/img/call-stack.png" alt="call stack with &quot;handle&quot; frame selected"></p>
<p><em>Note that the request handling function is unnamed, hence &quot;<code>(anonymous function)</code>.&quot; &quot;Anonymous function?!&quot; What&#39;s that? Who knows! Moral: always name your functions!</em></p>
<p>Stepping down into the Express framework is not something I do every day, but when you absolutely need to understand how you got to where you are, the Call Stack Pane is very useful!</p>
<p>One especially interesting use of the Call Stack Pane is to examine variables at earlier points in your code&#39;s execution. By clicking up through the stack, you can see what variables those earlier functions had in their scope, as well as see the state of any global variables at that point in execution.  </p>
<h2 id="all-this-and-more-">
    <a class="header-anchor" href="#all-this-and-more-">
      <span class="header-link"></span>
    </a>
    All This and More...</h2><p>There are many more features of the interactive debugger than I went over here, but this is enough to get you started. If you want to learn more, take a look at the excellent documentation from Microsoft on <a href="https://code.visualstudio.com/docs/editor/debugging">the VS Code Debugger</a> and <a href="https://code.visualstudio.com/docs/runtimes/nodejs#_debugging-your-express-application">using it with Node.js</a>. Oh, and I should probably mention that all the debugging features outlined here (and more) are built-in to <a href="https://developer.mozilla.org/en-US/docs/Tools/Debugger">Firefox</a> as well as <a href="https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints">Chrome</a>, should you wish to use them on browser-based code. Happy Debugging! </p>
<p>* <em>There&#39;s no specific term I&#39;ve found for this common collection of application debugging tools so I&#39;m using the term &quot;interactive debugging&quot; in this article.</em> </p>

]]></content:encoded></item><item><title>The Node.js Debug Module: Advanced Usage</title><link>https://sequoia.makes.software/the-nodejs-debug-module-advanced-usage</link><description>So you're familiar with the `debug` node module. Let's take a look at some more advanced uses and useful tricks!</description><guid isPermaLink="true">https://sequoia.makes.software/the-nodejs-debug-module-advanced-usage</guid><pubDate>Wed, 12 Oct 2016 04:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>In <a href="https://strongloop.com/strongblog/lets-code-it-the-debug-module/">a previous post</a>, I mentioned having used the <a href="https://www.npmjs.com/package/debug"><code>debug</code></a> module to help me understand some complex interactions between events in <a href="http://leafletjs.com">Leaflet</a> &amp; <a href="https://github.com/Leaflet/Leaflet.Editable">Leaflet.Editable</a>. Before we go over that, however, let&#39;s lay the groundwork with a couple organizational tips that makes <code>debug</code> easier to use. This post assumes you have either used <a href="https://www.npmjs.com/package/debug"><code>debug</code></a> or read the <a href="https://strongloop.com/strongblog/lets-code-it-the-debug-module/">previous post</a>, so please do one of those first!</p>
<h2 id="namespacing-debug-functions">
    <a class="header-anchor" href="#namespacing-debug-functions">
      <span class="header-link"></span>
    </a>
    Namespacing Debug Functions</h2><p>The <code>debug</code> module has a great namespacing feature which allows you to enable or disable debug functions in groups. It is very simple-- namespaces are separated by colons:</p>
<pre><code class="hljs lang-js">debug(<span class="hljs-string">'app:meta'</span>)(<span class="hljs-string">'config loaded'</span>)
debug(<span class="hljs-string">'app:database'</span>)(<span class="hljs-string">'querying db...'</span>);
debug(<span class="hljs-string">'app:database'</span>)(<span class="hljs-string">'got results!'</span>, results);
</code></pre>
<p>Enable debug functions in Node by passing the name the process via the <code>DEBUG</code> environment variable. The following would enable the <code>database</code> debug function but not <code>meta</code>:</p>
<pre><code class="hljs lang-nohighlight">$ DEBUG=&#39;app:database&#39; node app.js
</code></pre>
<p>To enable both, list both names, comma separated:</p>
<pre><code class="hljs lang-nohighlight">$ DEBUG=&#39;app:database,app:meta&#39; node app.js
</code></pre>
<p>Alternately, use a &quot;splat&quot; (<code>*</code>) to enable any debugger in that namespace. The following enables any debug function whose name starts with <code>app:</code>:</p>
<pre><code class="hljs lang-nohighlight">$ DEBUG=&#39;app:*&#39; node app.js
</code></pre>
<p>You can get as granular as you want with debug namespaces...</p>
<pre><code class="hljs lang-js">debug(<span class="hljs-string">'myapp:thirdparty:identica:auth'</span>)(<span class="hljs-string">'success!'</span>);
debug(<span class="hljs-string">'myapp:thirdparty:twitter:auth'</span>)(<span class="hljs-string">'success!'</span>);
</code></pre>
<p>...but don&#39;t overdo it. Personally, I try not to go deeper than two or sometimes three levels.</p>
<h3 id="more-namespace-tricks">
    <a class="header-anchor" href="#more-namespace-tricks">
      <span class="header-link"></span>
    </a>
    More Namespace Tricks</h3><p>The &quot;splat&quot; character <code>*</code> can match a namespace at any level when enabling a debug function. Given the two debug functions above above, you can enable both thus:  </p>
<pre><code class="hljs lang-nohighlight">$ DEBUG=&#39;myapp:thirdparty:*:auth&#39; node app.js
</code></pre>
<p>The <code>*</code> here will match <code>identica</code>, <code>twitter</code>, or any other string.</p>
<p>It&#39;s frequently useful to enable all debug functions in a namespace with the exception of one or two. Let&#39;s assume we have separate debug functions for each HTTP status code that our app response with (a weird use of <code>debug</code>, but why not!):</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> OK = debug(<span class="hljs-string">'HTTP:200'</span>);
<span class="hljs-keyword">const</span> MOVED = debug(<span class="hljs-string">'HTTP:301'</span>);
<span class="hljs-keyword">const</span> FOUND = debug(<span class="hljs-string">'HTTP:302'</span>);
<span class="hljs-keyword">const</span> UNAUTHORIZED = debug(<span class="hljs-string">'HTTP:403'</span>);
<span class="hljs-keyword">const</span> NOTFOUND = debug(<span class="hljs-string">'HTTP:404'</span>);
<span class="hljs-comment">// etc.</span>
</code></pre>
<p>We can turn them all on with <code>HTTP:*</code>, but it turns out that <code>200</code> comes up way too frequently so we want it turned off. The <code>-</code> prefix operator can be used to explicitly disable a single debugger. Here, we&#39;ll enable all debuggers in this namespace then disable just <code>HTTP:200</code>:</p>
<pre><code class="hljs lang-nohighlight">$ DEBUG=&#39;HTTP:*,-HTTP:200&#39; node app.js
</code></pre>
<h2 id="externalizing-debug-functions">
    <a class="header-anchor" href="#externalizing-debug-functions">
      <span class="header-link"></span>
    </a>
    Externalizing Debug Functions</h2><p><code>debug()</code> is factory function, and when you call it it returns another function, which can be called to actually write to the console (more specifically, <code>STDERR</code> in Node.js):</p>
<pre><code class="hljs lang-js">debug(<span class="hljs-string">'abc'</span>);        <span class="hljs-comment">// creates function, doesn't write anything </span>
debug(<span class="hljs-string">'foo'</span>)(<span class="hljs-string">'bar'</span>); <span class="hljs-comment">// writes `foo: bar` (assuming that debugger is enabled)</span>
</code></pre>
<p>If we want to reuse this debugger, we can assign the function to a variable: </p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">var</span> fooLogger = debug(<span class="hljs-string">'foo'</span>);

fooLogger(<span class="hljs-string">'bar'</span>);                    <span class="hljs-comment">// writes `foo: bar`</span>
fooLogger(<span class="hljs-string">'opening pod bay door...'</span>) <span class="hljs-comment">// writes `foo: opening pod bay door...`</span>
</code></pre>
<p>While it&#39;s easy to create one-off debug functions as needed as in the first example, it&#39;s important to remember that the <code>debug</code> module does not write anything <em>unless that particular debugger is enabled</em>. If your fellow developer does not know you created a debugger with the name <code>foo</code>, she cannot know to turn it on! Furthermore, she may create a debugger with the name <code>foo</code> as well, not knowing you&#39;re already using that name. For this reasons (read: <strong>discoverability</strong>), it&#39;s useful to group all such debug logging functions in one file, and export them from there:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// lib/debuggers.js</span>
<span class="hljs-keyword">const</span> debug = <span class="hljs-built_in">require</span>(<span class="hljs-string">'debug'</span>);

<span class="hljs-keyword">const</span> init = debug(<span class="hljs-string">'app:init'</span>);
<span class="hljs-keyword">const</span> menu = debug(<span class="hljs-string">'app:menu'</span>);
<span class="hljs-keyword">const</span> db = debug(<span class="hljs-string">'app:database'</span>);
<span class="hljs-keyword">const</span> http = debug(<span class="hljs-string">'app:http'</span>)

<span class="hljs-built_in">module</span>.exports = {
  init, menu, db, http
};
</code></pre>
<p><em>NB: using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015">ES2015 object property shorthand</a> above</em></p>
<p>This way we can <strong>discover all available debuggers</strong> and <strong>reuse debuggers across files</strong>. For example, if we access the database in <code>customer.js</code> &amp; we wish to log the query, we can import that debugger &amp; use it there:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// models/customer.js</span>
<span class="hljs-keyword">const</span> debugDB = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../lib/debuggers'</span>).db;
<span class="hljs-comment">// ...</span>

debugDB(<span class="hljs-string">`looking up user by ID: <span class="hljs-subst">${userid}</span>`</span>);
db.Customer.findById(userid)
  .tap(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> debugDB(<span class="hljs-string">'customer lookup result'</span>, result))
  .then(processCustomer)
<span class="hljs-comment">//.then(...)</span>
</code></pre>
<p><em>NB: using the <a href="http://bluebirdjs.com/docs/api/tap.html">Bluebird promises library</a>&#39;s <code>tap</code> above.</em></p>
<p>We can later use the same debugger in another file, perhaps with other debuggers as well:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// config.js</span>
debugDB = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../lib/debuggers'</span>).db;
debugInit = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../lib/debuggers'</span>).init;
<span class="hljs-comment">// ...</span>

debugInit(<span class="hljs-string">'configuring application...'</span>);

<span class="hljs-keyword">if</span>(process.env !== <span class="hljs-string">'DEV'</span>){
  debugInit(<span class="hljs-string">'env not DEV, loading configs from DB'</span>);
  debugDB(<span class="hljs-string">'reading site config from database'</span>);
  db.Config.find()
    .tap(debugDB)
    .then(config){
      configureApp(config);
    }
}<span class="hljs-keyword">else</span>{
  debugInit(<span class="hljs-string">'local environment: reading config from file'</span>);
  <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>Then when we&#39;re confused why the app fails on startup on our local machine, we can enable <code>app:init</code> (or <code>app:*</code>) and see the following in our console...</p>
<pre><code class="hljs lang-nohighlight">app:init env not DEV, loading configs from DB +1ms
</code></pre>
<p>...and quickly discover that a missing environment variable is what&#39;s causing our issue.</p>
<h2 id="debugging-all-known-events-on-an-event-emitter">
    <a class="header-anchor" href="#debugging-all-known-events-on-an-event-emitter">
      <span class="header-link"></span>
    </a>
    Debugging All (known) Events on an Event Emitter</h2><h3 id="background">
    <a class="header-anchor" href="#background">
      <span class="header-link"></span>
    </a>
    Background</h3><p>My goal was to run my <code>newFeatureAdded</code> function whenever a user created a new &quot;feature&quot; on the map. (<em>This example is browser-based, but the approach works just as well with <a href="https://nodejs.org/dist/latest-v6.x/docs/api/events.html">Node.js EventEmiters</a>.</em>)</p>
<p>When I started, I attached my <code>newFeatureAdded</code> function to <code>editable:created</code>:</p>
<pre><code class="hljs lang-js">map.on(<span class="hljs-string">'editable:created'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{
  newFeatureAdded(e.layer);
});
</code></pre>
<p>But it wasn&#39;t firing when I expected, so I added a debug function call to see what was going on:</p>
<pre><code class="hljs lang-js">map.on(<span class="hljs-string">'editable:created'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{
  eventDebug(<span class="hljs-string">'editable:created'</span>, e.layer);
  newFeatureAdded(e.layer);
});
</code></pre>
<p>This revealed that the event was fired when the user clicked &quot;create new feature&quot;, <em>not</em> when they placed the feature on the map. I fixed the issue, but I found myself adding debug function calls all over the place, with almost every event handler function:</p>
<pre><code class="hljs lang-js">map.on(<span class="hljs-string">'editable:drawing:commit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{
  eventDebug(<span class="hljs-string">'FIRED: editable:drawing:commit'</span>);
  handleDrawingCommit(e);
});

map.on(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{
  eventDebug(<span class="hljs-string">'FIRED: click'</span>);
  disableAllEdits();
});

map.on(<span class="hljs-string">'editable:vertex:clicked'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{
  eventDebug(<span class="hljs-string">'FIRED: editable:vertex:clicked'</span>);
  handleVertexClick(e);
});
</code></pre>
<p>This is starting to look redundant, and doubly bad as it&#39;s forcing us to wrap our handler calls in extra anonymous functions rather than delegate to them directly, i.e. <code>map.on(&#39;click&#39;, disableEdits)</code>. Furthermore, not knowing the event system well, I want to <em>discover</em> other events that fire at times that might be useful to me.</p>
<h3 id="another-approach-">
    <a class="header-anchor" href="#another-approach-">
      <span class="header-link"></span>
    </a>
    Another Approach...</h3><p>In order to build my UI, I needed to understand the interactions between <a href="http://leafletjs.com/reference.html#map-events">Leaflet&#39;s 35 events</a> and <a href="https://github.com/Leaflet/Leaflet.Editable/tree/leaflet0.7#events">Leaflet.Editable&#39;s 18 events</a>, which overlap, trigger one another, and have somewhat ambiguous names (<code>layeradd</code>, <code>dragend</code>, <code>editable:drawing:dragend</code>, <code>editable:drawing:end</code>, <code>editable:drawing:commit</code>, <code>editable:created</code> etc.). </p>
<p>We could pore over the docs and source code to find the exact event we need for each eventuality... or we could attach debug loggers to <em>all</em> events and see what we see!</p>
<p>The approach is as follows:</p>
<ol>
<li>Create an array of all known events</li>
<li>Create a debug function for each event</li>
<li>Attach that function to the target event emitter using <code>.on</code></li>
</ol>
<pre><code class="hljs lang-js"><span class="hljs-comment">// 1. Create list of events</span>
<span class="hljs-keyword">const</span> leafletEditableEvents = [
  <span class="hljs-string">'editable:created'</span>,
  <span class="hljs-string">'editable:enable'</span>,
  <span class="hljs-string">'editable:drawing:start'</span>,
  <span class="hljs-string">'editable:drawing:end'</span>,
  <span class="hljs-string">'editable:vertex:contextmenu'</span>,
<span class="hljs-comment">// ...</span>
];

<span class="hljs-keyword">const</span> leafletEvents = [
  <span class="hljs-string">'click'</span>,
  <span class="hljs-string">'dblclick'</span>,
  <span class="hljs-string">'mousedown'</span>,
  <span class="hljs-string">'dragend'</span>,
  <span class="hljs-string">'layeradd'</span>,
  <span class="hljs-string">'layerremove'</span>,
<span class="hljs-comment">// ...</span>
];
</code></pre>
<p>Because we want to be able to use our event debugging tool on any event emitter, we&#39;ll make a function that takes the <code>target</code> object and <code>events</code> array as arguments:</p>
<pre><code class="hljs lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debugEvents</span>(<span class="hljs-params">target, events</span>)</span>{
  events
    <span class="hljs-comment">// 2. Create debug function for each</span>
    <span class="hljs-comment">// (but keep the function name as well! we'll need it below)</span>
    <span class="hljs-comment">// return both as { name, debugger }</span>
    .map(<span class="hljs-function"><span class="hljs-params">eventName</span> =&gt;</span> { <span class="hljs-keyword">return</span> { <span class="hljs-attr">name</span>: eventName, <span class="hljs-attr">debugger</span>: debug(eventName) }; })
    <span class="hljs-comment">// 3. Attach that function to the target</span>
    .map(<span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> target.on(event.name, event.debugger));
}

debugEvents(mapObject, leafletEditableEvents);
debugEvents(mapObject, leafletEvents);
</code></pre>
<p>Assuming we <a href="https://www.npmjs.com/package/debug#browser-support">set <code>localStorage.debug=&#39;*&#39;</code> in our browser console</a>, we will now see a debug statement in the console when <em>any</em> of the Leaflet.Editable events fire on the map object!</p>
<p><img src="/img/debug_all_events.png" alt="debugger output"></p>
<p>Note that whatever data is passed to an event handler attached with <code>.on()</code> is passed to the our debug functions. In this case it&#39;s the event object created by Leaflet, shown above in the console as <code>‚ñ∂ Object</code>.</p>
<p><code>mousemove</code> etc. are not in any namespace above, and it&#39;s best to always namespace debug functions so they don&#39;t collide, to add context, and to allow enabling/disabling by namespace. Let&#39;s improve our <code>debugEvents</code> function to use a namespace:</p>
<pre><code class="hljs lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debugEvents</span>(<span class="hljs-params">target, events, namespace</span>)</span>{
  events
    .map(<span class="hljs-function"><span class="hljs-params">eventName</span> =&gt;</span> { <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">name</span>: eventName,
      <span class="hljs-attr">debugger</span>: debug(<span class="hljs-string">`<span class="hljs-subst">${namespace}</span>:<span class="hljs-subst">${eventName}</span>`</span>)
    } } )
    .map(<span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> target.on(event.name, event.debugger));
}

<span class="hljs-comment">//editable events already prefixed with "editable", so "events:editable:..."</span>
debugEvents(mapObject, leafletEditableEvents, <span class="hljs-string">'event'</span>);
<span class="hljs-comment">//map events not prefixed so we'll add `map`, so they're "events:map:..."</span>
debugEvents(mapObject, leafletEvents, <span class="hljs-string">'event:map'</span>);
</code></pre>
<p>We can enable all event debuggers in our console, or just editable events, or just core map events, thus:</p>
<pre><code class="hljs lang-js">&gt; localStorage.debug = <span class="hljs-string">'event:*'</span>
&gt; localStorage.debug = <span class="hljs-string">'event:editable:*'</span>
&gt; localStorage.debug = <span class="hljs-string">'event:map:*'</span>
</code></pre>
<p>Conveniently, the <a href="https://github.com/Leaflet/Leaflet.Editable/tree/leaflet0.7#events">Leaflet.Editable events</a> are all already &quot;namespaced&quot; &amp; colon separated, just like our debug namespaces!</p>
<pre><code class="hljs lang-js">&gt; localStorage.debug = <span class="hljs-string">'event:editable:*'</span> <span class="hljs-comment">//enable all editable</span>
&gt; localStorage.debug = <span class="hljs-string">'event:editable:drawing:*'</span>  <span class="hljs-comment">//just editable:drawing events</span>
</code></pre>
<h3 id="fine-tuning-the-output">
    <a class="header-anchor" href="#fine-tuning-the-output">
      <span class="header-link"></span>
    </a>
    Fine Tuning the output</h3><p>Let&#39;s enable all event debuggers and see what some interactions look like...</p>
<p><img src="/img/debug_events_1.gif" alt="gif of debugger output with rapidly flowing debug statments during user interaction with map. Lots and lots of &quot;event:map:mousemove&quot; events."></p>
<p>Looks nice, but the <code>mousemove</code> events are coming so fast they push everything else out of the console, i.e. they are noise. Some trial and error taught me it that <code>drag</code> events are equally noisy and that I don&#39;t need to know the core map events most of the time, just the <code>editable</code> events.</p>
<p>With this info we can tune our logging down to just what we need, enabling only <code>editable:</code> events &amp; ignoring <em>all</em> drag &amp; mousemove events:</p>
<pre><code class="hljs lang-js">&gt; localStorage.debug = <span class="hljs-string">'event:editable:*,-event:*:drag,-event:*:mousemove'</span>
</code></pre>
<p><img src="/img/debug_events_2.gif" alt="gif of debugger output with a smaller number of events. Console screen does not overflow"></p>
<p>Looks good!</p>
<h2 id="conclusion">
    <a class="header-anchor" href="#conclusion">
      <span class="header-link"></span>
    </a>
    Conclusion</h2><p>While <code>debug</code> is a very small &amp; easy-to-get-started-with module, it can tuned in very granular ways and is a powerful development tool. By attaching debug statements to all events, <em>outside</em> of our application code, we can trace the path of an event system &amp; better understand how events interact, without adding any debug statments into our application code. If you&#39;ve found another novel use of this library or have any questions about my post, <a href="https://sequoia.makes.software/contact/">let me know</a>. Happy logging!</p>
<p><em>NB: I use the term &quot;debugger function&quot; and &quot;debug logging&quot; rather than &quot;debugger&quot; and &quot;debugging&quot; in this post advisedly. A &quot;debugger&quot; typically refers to a tool that can be used to pause execution &amp; alter the code at runtime, for example the <a href="https://code.visualstudio.com/docs/editor/debugging">VSCode debugger</a>. What we&#39;re doing here is &quot;logging.&quot;</em></p>

]]></content:encoded></item><item><title>Let's Code It: The `debug` Module</title><link>https://sequoia.makes.software/lets-code-it-the-debug-module</link><description>What if, instead of commenting out or deleting our useful log statements when we're not using them, we could turn them on when we need them and off when we don't? The `debug` module lets us do that-- but how does it work? Let's find out!</description><guid isPermaLink="true">https://sequoia.makes.software/lets-code-it-the-debug-module</guid><pubDate>Thu, 15 Sep 2016 04:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>I did some fun stuff with the <code>debug</code> module recently for a web map project. I needed to understand the somewhat complex interactions between events in <a href="http://leafletjs.com/">Leaflet.js</a> in order to figure out what events to attach to... but that&#39;s the next post. Before I get to that, I want to go over the <code>debug</code> module itself.</p>
<h2 id="a-trip-down-memory-lane-">
    <a class="header-anchor" href="#a-trip-down-memory-lane-">
      <span class="header-link"></span>
    </a>
    A trip down memory lane...</h2><p><code>console.log</code>: the JavaScript programmer&#39;s oldest friend*. <code>console.log</code> was probably one of the first things you learned to use to debug JavaScript, and while there are <a href="https://code.visualstudio.com/docs/runtimes/nodejs#_debugging-your-express-application">plenty</a> of <a href="https://developer.mozilla.org/en-US/docs/Tools/Debugger">more powerful tools</a>, <code>console.log</code> is still useful to say &quot;event fired&quot;, &quot;sending the following query to the database...&quot;, etc..</p>
<p>So we write statements like <code>console.log(`click fired on ${event.target}`)</code>. But then we&#39;re not working on that part of the application anymore and those log statements just make noise, so we delete them. But then we <em>are</em> working on that bit again later, so we put them back-- and this time when we&#39;re finished, we just comment them out, instead of moving them. Before we know it our code looks like this:</p>
<pre><code class="hljs lang-js">fs.readFile(usersJson, <span class="hljs-string">'utf-8'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, contents</span>)</span>{
  <span class="hljs-comment">// console.log('reading', usersJson);</span>
  <span class="hljs-keyword">if</span>(err){ <span class="hljs-keyword">throw</span> err; }
  <span class="hljs-keyword">var</span> users = <span class="hljs-built_in">JSON</span>.parse(contents);
  <span class="hljs-comment">// console.log('User ids &amp; names :');</span>
  <span class="hljs-comment">// console.log(users.map(user =&gt; [user.id, user.name]));</span>
  users.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">user</span>)</span>{
    db.accounts.findOne({<span class="hljs-attr">id</span>: user.id}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, address</span>)</span>{
      <span class="hljs-keyword">if</span>(err){ <span class="hljs-keyword">throw</span> err; }
      <span class="hljs-keyword">var</span> filename = <span class="hljs-string">'address'</span> + address.id + <span class="hljs-string">'.json'</span>;
      <span class="hljs-comment">// console.log(JSON.parse('address'));</span>
      <span class="hljs-comment">// console.log(`writing address file: ${filename}`)</span>
      fs.writeFile(filename, <span class="hljs-string">'utf-8'</span>, address, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>{
        <span class="hljs-keyword">if</span>(err){ <span class="hljs-keyword">throw</span> err; }
        <span class="hljs-comment">// console.log(filename + ' written successfully!');</span>
      });
    });
  });
});
</code></pre>
<h2 id="-quot-there-39-s-got-to-be-a-better-way-quot-">
    <a class="header-anchor" href="#-quot-there-39-s-got-to-be-a-better-way-quot-">
      <span class="header-link"></span>
    </a>
    &quot;There&#39;s got to be a better way!&quot;</h2><p>What if, instead of commenting out or deleting our useful log statements when we&#39;re not using them, we could turn them on when we need them and off when we don&#39;t? This is a pretty simple fix:</p>
<pre><code class="hljs lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">...items</span>)</span>{   <span class="hljs-comment">//console.log can take multiple arguments!</span>
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> DEBUG !== <span class="hljs-string">'undefined'</span> &amp;&amp; DEBUG === <span class="hljs-literal">true</span>){
    <span class="hljs-built_in">console</span>.log(...items)
  }
}
</code></pre>
<p><em>NB: Using ES6 features <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">rest parameters</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">spread syntax</a> in this function</em></p>
<p>Now we can replace our <code>console.log()</code> statements with <code>log()</code>, and by setting <code>DEBUG=true</code> or <code>DEBUG=false</code> in our code, we can turn logging on or off as needed! Hooray! Well, actually, there are still a couple problems...</p>
<h2 id="problem-1-hardcoding">
    <a class="header-anchor" href="#problem-1-hardcoding">
      <span class="header-link"></span>
    </a>
    Problem 1: Hardcoding</h2><p>In our current system, <code>DEBUG</code> must be hardcoded, which is bad because</p>
<ol>
<li>it can&#39;t be enabled or disabled without editing the codebase</li>
<li>it can accidentally be checked into our code repository enabled</li>
</ol>
<p>We can fix that by setting <code>DEBUG</code> to true or false somewhere outside our script, and reading it in. In node it would make sense to use an <a href="https://nodejs.org/api/process.html">environment variable</a>:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> DEBUG = process.env.DEBUG; <span class="hljs-comment">// read from environment</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">...items</span>)</span>{
<span class="hljs-comment">// ...</span>
</code></pre>
<p>Now we can <code>export DEBUG=true</code> on our dev machine to turn it on all the time. Alternately, we can turn /j #it on by <a href="http://manpages.ubuntu.com/manpages/precise/en/man1/bash.1.html#contenttoc22">setting an environment variable just for one process</a> when we launch it (shell command below):</p>
<pre><code class="hljs lang-sh">$ DEBUG=<span class="hljs-literal">true</span> node my-cool-script.js
</code></pre>
<p>If we want to use our debugger in the browser, we don&#39;t have <code>process.env</code>, but we <em>do</em> have <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage"><code>localStorage</code></a>:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">var</span> localEnv; <span class="hljs-comment">//where do we read DEBUG from?</span>

<span class="hljs-keyword">if</span>(process &amp;&amp; process.env){                <span class="hljs-comment">//node</span>
  localEnv = process.env;
}<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span> &amp;&amp; <span class="hljs-built_in">window</span>.localStorage) {  <span class="hljs-comment">//browser</span>
  localEnv = <span class="hljs-built_in">window</span>.localStorage;
}

<span class="hljs-keyword">const</span> DEBUG = localEnv.DEBUG;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">...items</span>)</span>{
  <span class="hljs-comment">// ...</span>
</code></pre>
<p>Now we can set <code>DEBUG</code> in <code>localStorage</code> using our browser console...</p>
<pre><code>&gt; window.localStorage.DEBUG = true;
</code></pre><p>...reload the page, and debugging is enabled! Set <code>window.localStorage.DEBUG</code> to false &amp; reload and it&#39;s disabled again.</p>
<h2 id="problem-2-all-or-nothing">
    <a class="header-anchor" href="#problem-2-all-or-nothing">
      <span class="header-link"></span>
    </a>
    Problem 2: All or Nothing</h2><p>With our current setup, we can only chose &quot;all log statements on&quot; or &quot;all log statements off.&quot; This is OK, but if we have a big application distinct parts, and we&#39;re having a database problem, it would be nice to just turn on database-related debug statements, but not others. If we only have one debugger and one debug on/off switch (<code>DEBUG</code>), this isn&#39;t possible, so we need:</p>
<ol>
<li>Multiple debug functions</li>
<li>Multiple on/off switches</li>
</ol>
<p>Let&#39;s tackle the second problem first. Instead of a boolean, let&#39;s make debug an array of keys, each representing a debugger we want turned on:</p>
<pre><code class="hljs lang-js">DEBUG = [<span class="hljs-string">'database'</span>];        <span class="hljs-comment">// just enable database debugger</span>
DEBUG = [<span class="hljs-string">'database'</span>, <span class="hljs-string">'http'</span>];<span class="hljs-comment">// enable database &amp; http debuggers</span>
DEBUG = <span class="hljs-literal">undefined</span>;           <span class="hljs-comment">// don't enable any debuggers</span>
</code></pre>
<p>We can&#39;t set arrays as environment variables, but we can set it to a string...</p>
<pre><code>$ DEBUG=database,http node my-cool-script.js
</code></pre><p>...and it&#39;s easy to build an array from a string...</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">// process.env.DEBUG = 'database,http'</span>
DEBUG = localEnv.DEBUG.split(<span class="hljs-string">','</span>);

DEBUG === [<span class="hljs-string">'database'</span>, <span class="hljs-string">'http'</span>] <span class="hljs-comment">// =&gt; true</span>
</code></pre>
<p>Now we have an array of keys for debuggers we want enabled. The simplest way to allow us to enable just http or just database debugging would be to add an argument to the <code>log</code> function, specifying which &quot;key&quot; each debug statement should be associated with:</p>
<pre><code class="hljs lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">key, ...items</span>)</span>{
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> DEBUG !== <span class="hljs-string">'undefined'</span> &amp;&amp; DEBUG.includes(key)){ 
    <span class="hljs-built_in">console</span>.log(...items)
  }
}

log(<span class="hljs-string">'database'</span>,<span class="hljs-string">'results recieved'</span>);             <span class="hljs-comment">// using database key</span>
log(<span class="hljs-string">'http'</span>,<span class="hljs-string">'route not found'</span>, request.url);     <span class="hljs-comment">// using http key</span>
</code></pre>
<p><em>NB: <a href="http://kangax.github.io/compat-table/es2016plus/#test-Array.prototype.includes_Array.prototype.includes"><code>Array.prototype.includes</code></a> only exists in newer environments.</em></p>
<p>Now we can enable enable and disable http and database debug logging separately! Passing a key <em>each time</em> is a bit tedious however, so let&#39;s revisit the proposed solution above, &quot;Multiple debug functions.&quot; To create a <code>logHttp</code> function, we basically need a pass-through that takes a message and adds the <code>http</code> &quot;key&quot; before sending it to log:</p>
<pre><code class="hljs lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logHttp</span>(<span class="hljs-params">...items</span>)</span>{
  log(<span class="hljs-string">'http'</span>, ...items);
}

logHttp(<span class="hljs-string">'foo'</span>); <span class="hljs-comment">// --&gt; log('http', 'foo');</span>
</code></pre>
<p>Using <a href="https://strongloop.com/strongblog/higher-order-functions-in-es6easy-as-a-b-c/">higher-order functions</a> (in this case a function that returns a function), we can make a &quot;factory&quot; to produce debugger functions bound to a certain key:</p>
<pre><code class="hljs lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeLogger</span>(<span class="hljs-params">fixedKey</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...items</span>)</span>{
    log(fixedKey, ...items)
  }
}
</code></pre>
<p>Now we can easily create new &quot;namespaced&quot; <code>log</code> functions and call them separately:</p>
<pre><code class="hljs lang-js"><span class="hljs-keyword">const</span> http = makeLogger(<span class="hljs-string">'http'</span>);
<span class="hljs-keyword">const</span> dbDebug = makeLogger(<span class="hljs-string">'database'</span>);

dbDebug(<span class="hljs-string">'connection established'</span>);     <span class="hljs-comment">// runs if "database" is enabled</span>
dbDebug(<span class="hljs-string">'Results recieved'</span>);           <span class="hljs-comment">// runs if "database" is enabled</span>

http(<span class="hljs-string">`Request took <span class="hljs-subst">${requestTime}</span>ms`</span>); <span class="hljs-comment">// runs if "http" is enabled</span>
</code></pre>
<h2 id="that-39-s-it-">
    <a class="header-anchor" href="#that-39-s-it-">
      <span class="header-link"></span>
    </a>
    That&#39;s it!</h2><p>That gets us just about all the way to the <a href="https://github.com/visionmedia/debug"><code>debug</code> module</a>! It has a couple more features than what we created here, but this covers the main bits. I use the <code>debug</code> module in basically all projects &amp; typically start using it from day 1: if you <em>never</em> put <code>console.log</code> statements in your code you have nothing to &quot;clean up,&quot; and those debug log statements you make during active development can be useful later on, so why not keep them?</p>
<p>Next steps: go check out the the <a href="https://github.com/visionmedia/debug"><code>debug</code> module</a>. In the next post I&#39;ll go over some advanced usage. Thanks for reading!</p>
<p>*<em><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert">second oldest</a> ;)</em></p>

]]></content:encoded></item><item><title>Type Hinting in JavaScipt</title><link>https://sequoia.makes.software/type-hinting-in-javascipt</link><description>What type is this object, what properties does it have, what arguments does this function take... there's a lot I don't miss about writing Java full-time, but boy do I miss this! Can we get these type hints in JavaScript? Let's find out!</description><guid isPermaLink="true">https://sequoia.makes.software/type-hinting-in-javascipt</guid><pubDate>Tue, 28 Jun 2016 04:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>For small projects, the amount of overhead that goes into documenting every function parameter, return value, and variable can be overkill. If your program fits in one or two files, you can just pull up that other file &amp; check whether that function returns a string or an array. When, however, your application starts to span dozens or hundreds of files, or the number of developers working on it begins to climb, this system can quickly lead to a huge mess. When you get to this point, it&#39;s very helpful to offload some of this &quot;checking that function signature&quot; to your <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a> or text editor.</p>
<p><img src="/img/typehint-example-1a.gif" alt="example of tooltips and type hinting in JavaScript using VisualStudio Code"></p>
<p>On projects of any size, code hinting reduces typos, makes coding easier, and obviates the need to check a module&#39;s documentation every few minutes. Programmers who use strongly typed languages like Java and IDEs like Eclipse take this sort of automated code-assistance for granted. But what about programmers who use JavaScript?</p>
<p>JavaScript is weakly typed, so when you declare <code>var animals;</code>, there&#39;s no way to know whether <code>animals</code> will be an array, a string, a function, or something else. If your IDE or editor doesn&#39;t know that <code>animals</code> will eventually be an array, there&#39;s no way for it to helpfully tell you that <code>animals</code> has the property <code>length</code> and the method <code>map</code>, among others. There&#39;s no way for the IDE to know it&#39;s an array... unless you tell it!</p>
<p>In this post we&#39;ll look at a couple ways to clue your IDE in to the <strong>types</strong> of the variables, function parameters, and return values in your program so it clue <em>you</em> in on how they should be used. We&#39;ll go over two ways to &quot;tell&quot; your IDE (and other developers) what types things are, and see how to load type information for third party libraries as well. Before we start <em>writing</em> type annotations, however, let&#39;s make sure we have a tool that can <em>read</em> them.</p>
<h2 id="setting-up-the-environment">
    <a class="header-anchor" href="#setting-up-the-environment">
      <span class="header-link"></span>
    </a>
    Setting up The Environment</h2><p>The first thing we&#39;ll need is a code editor that recognizes &amp; supports the concept of &quot;types&quot; in JavaScript. You can either use a JavaScript oriented IDE such as <a href="https://www.jetbrains.com/webstorm/">Webstorm</a> or <a href="https://code.visualstudio.com/">VisualStudio Code</a>, or if you already have a text-editor you like, you can search the web to find out if it has a type hinting plugin that supports JavaScript. There&#39;s one for <a href="http://sublimecodeintel.github.io/SublimeCodeIntel/">Sublime</a> and <a href="https://atom.io/packages/autocomplete-plus">Atom</a>, among others.</p>
<p>If the goal is getting type hinting in JavaScript (and it is here), I use &amp; recommend Visual Studio Code, the following reasons:</p>
<ul>
<li>It has code-hinting for JavaScript <a href="https://code.visualstudio.com/Docs/languages/javascript#_intellisense">built in</a>, no plugins needed</li>
<li>It&#39;s from Microsoft, which has ample experience creating IDEs</li>
<li>Microsoft is also the creator of <a href="//www.typescriptlang.org/">Typescript</a> so it has excellent support for Typescript definitions, one of the tools we&#39;ll use herein</li>
<li>It&#39;s <a href="https://github.com/Microsoft/vscode">Open Source</a></li>
<li>It&#39;s free!</li>
</ul>
<p>With VS Code installed, let&#39;s create a new project and get started!</p>
<h2 id="built-in-types">
    <a class="header-anchor" href="#built-in-types">
      <span class="header-link"></span>
    </a>
    Built-in Types</h2><p>I&#39;ve used <code>npm init</code> to start a new JavaScript project. At this point, we already get quite a bit from our IDE, which has JavaScript APIs (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">Math</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a>, etc.) and browser APIs (<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Console">Console</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a> etc.) built in.</p>
<p>Here&#39;s some of what we get out of the box:</p>
<p><img src="/img/typehint-built-in-stuff.gif" alt="demo of type hinting for String, Math, Console, and Document"></p>
<p>Nice! But we&#39;re more interested in Node.js annotations and sadly, VS Code does not ship with those. Type declarations for Node.js core APIs do exist, however, in the form of <a href="https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html">Typescript declaration files</a>. We just need a way to add them to our workspace so VS Code can find them. Enter <a href="https://www.npmjs.com/package/typings">Typings</a>.</p>
<h2 id="typings">
    <a class="header-anchor" href="#typings">
      <span class="header-link"></span>
    </a>
    Typings</h2><p>Typings is a &quot;Typescript Definition Manager&quot;, which means it helps us install the Typescript Definitions (or &quot;Declarations&quot;) we need for our IDE to know what the JavaScript APIs we&#39;re working with look like. We&#39;ll look more at the format of Typescript Declarations later, for now we&#39;ll stay focused on our goal of getting our IDE to recognize Node.js core APIs.</p>
<p>Install <code>typings</code> thus:</p>
<pre><code class="hljs lang-nohighlight">$ npm install --global typings
</code></pre>
<p>With <code>typings</code> installed on our system, we can add those Node.js core API type definitions to our project. From the project root:</p>
<pre><code class="hljs lang-nohighlight">$ typings install dt~node --global --save
</code></pre>
<p>Let&#39;s break that command down:</p>
<ol>
<li><code>install</code> the <code>node</code> package...</li>
<li>...from <code>dt~</code>, the <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped</a> repository, which hosts a huge collection of typescript definitions</li>
<li>we add the <code>--global</code> switch because we want access to definitions for <code>process</code> and <code>modules</code> from throughout our project</li>
<li>Finally, the <code>--save</code> switch causes <code>typings</code> save this type definition as a project dependency in a <code>typings.json</code>, which we can check into our repo so others can install these same types. (<code>typings.json</code> is to <code>typings install</code> what <code>package.json</code> is to <code>npm install</code>.)</li>
</ol>
<p>Now we have a new <code>typings/</code> directory containing the newly downloaded definitions, as well as our <code>typings.json</code> file.</p>
<h3 id="one-more-step-">
    <a class="header-anchor" href="#one-more-step-">
      <span class="header-link"></span>
    </a>
    One More Step...</h3><p>We now have these type definitions in our project, and VS Code loads all type definitions in your project automatically. However, it identifies the root of a JavaScript project by the presence of a <code>jsconfig.json</code> file, and we don&#39;t have one yet. VS Code can usually guess if your project is JavaScript based, and when it does it will <a href="https://code.visualstudio.com/Docs/runtimes/nodejs#_adding-a-jsconfigjson-configuration-file">display a little green lightbulb in the status bar</a>, prompting you to create just such a <code>jsconfig.json</code> file. Click that button, save the file, start writing some Node and...</p>
<p><img src="/img/typehint-node-core-apis.gif" alt="demo of looking up core node.js api properties &amp; methods using external node.js typescript definition file"></p>
<p>It works! We now get &quot;Intellisense&quot; code hints for all Node.js core APIs. Our project won&#39;t just be using Node core APIs though, we&#39;ll be pulling in some utility libraries, starting with <a href="https://lodash.com/">lodash</a>. <code>typings search lodash</code> reveals that there&#39;s a lodash definition from the <code>npm</code> source as well as <code>global</code> and <code>dt</code>. We want the <code>npm</code> version since we&#39;ll be consuming lodash as <strong>module</strong> included with <code>require(&#39;lodash&#39;)</code> and it will <em>not</em> be globally available.</p>
<pre><code class="hljs lang-nohighlight">$ typings install --save npm~lodash
lodash@4.0.0
‚îî‚îÄ‚îÄ (No dependencies)

$ npm install --save lodash
typehinting-demo@1.0.0 /Users/sequoia/projects/typehinting-demo
‚îî‚îÄ‚îÄ lodash@4.13.1
</code></pre>
<p>Now we can require lodash and get coding:</p>
<p><img src="/img/typehint-lodash.gif" alt="example demonstrating property and method lookup of a application dependency (lodash)"></p>
<p>So far we&#39;ve seen how to install and consume types for Node and third party libraries, but we&#39;re going to want these annotations for our own code as well. We can achieve this by using JSDoc comments, writing our own Typescript Declaration files, or a combination of both.</p>
<h2 id="jsdoc-annotations">
    <a class="header-anchor" href="#jsdoc-annotations">
      <span class="header-link"></span>
    </a>
    JSDoc Annotations</h2><p><a href="http://usejsdoc.org/">JSDoc</a> is a tool that allows us to describe the parameters and return types of functions in JavaScript, as well as variables and constants. The main advantages of using JSDoc comments are:</p>
<ol>
<li>They&#39;re lightweight &amp; easy to get started with (just add comments to your JS)</li>
<li>The comments are human-readable, so the comments are useful even if you&#39;re reading the code on github or in a simple text editor</li>
<li>The syntax is very similar to <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html">Javadoc</a> and for the most part fairly intuitive.</li>
</ol>
<p>There are <a href="http://usejsdoc.org/index.html#block-tags">many annotations</a> JSDoc supports, but you can get a long way just by learning a few, namely <code>@param</code> and <code>@return</code>. Let&#39;s annotate this simple function, which checks whether one string contains another string:</p>
<pre><code class="hljs lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">contains</span>(<span class="hljs-params">input, search</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">RegExp</span>(search).test(input);
}

contains(<span class="hljs-string">'Everybody loves types. It is known.'</span>, <span class="hljs-string">'known'</span>); <span class="hljs-comment">// =&gt; true</span>
</code></pre>
<p>With a function like this, it&#39;s easy to forget the order of arguments or their types. Annotations to the rescue!</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">/**
 * Checks whether one string contains another string
 * 
 * @param {string} input   - the string to test against
 * @param {string} search  - the string to search for
 * 
 * @return {boolean}
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">contains</span>(<span class="hljs-params">input, search</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">RegExp</span>(search).test(input);
}
</code></pre>
<p>While writing this, we realized it that this function actually works with regular expressions as the <code>search</code> parameter as well as strings. Let&#39;s update that line to make clear that both types are supported:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-comment">/** 
 * ...
 * @param {string|RegExp} search  - the string or pattern to search for
 * ...
 */</span>
</code></pre>
<p>We can even add examples &amp; links to documentation to help the next programmer out:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-comment">/**
 * Checks whether one string contains another string
 * 
 * @example 
 * ```
 * contains("hello world", "world"); // true
 * ```
 * @example
 * ```
 * const exp = /l{2}/;
 * contains("hello world", exp);  // true
 * ```
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
 * 
 * @param {string} input          - the string to test against
 * @param {string|RegExp} search  - the string or pattern to search for
 * 
 * @return {boolean}
 */</span>
</code></pre>
<p>...and away we go!</p>
<p><img src="/img/typehint-jsdoc.gif" alt="example of hinting function parameters &amp; types based on JSDoc comments"></p>
<p>JSDoc works great and we&#39;ve only scratched the surface of what it can do, but for more complex tasks or cases where you&#39;re documenting a data structure that exists e.g. in a configuration file, typescript declaration files are often the better choice.</p>
<h2 id="typescript-declarations">
    <a class="header-anchor" href="#typescript-declarations">
      <span class="header-link"></span>
    </a>
    Typescript Declarations</h2><p>A typescript declaration file uses the extension <code>.d.ts</code> and describes the shape of an API, but <em>does not contain the actual API implementation</em>. In this way, they are very similar to the Java or PHP concept of an <strong>Interface</strong>. If we were writing Typescript, we would declare the types of our function parameters and so on right in our code, but JavaScript&#39;s lack of types makes this impossible. The solution: declare the types in an JavaScript library in a Typescript (definition) file that can be installed <em>alongside</em> the JavaScript library. This is the reason we installed the lodash type definitions separately from lodash.</p>
<p>Setting up external type definitions for an API you plan to publish and and registering them on the <code>typings</code> repository is a more involved task that we&#39;ll cover today, but you can read up about it <a href="https://github.com/typings/typings/blob/master/docs/examples.md">here</a>. For now, let&#39;s consider the case of a complex configuration file.</p>
<p>Imagine we have an application that creates a map and allows users to add features to that map. We&#39;ll be deploying these editable maps to different client sites, so we want be able to configure the <strong>types of features</strong> users can add and the <strong>coordinates</strong> to center the map on on a per-site basis.</p>
<p>Our <code>config.json</code> looks like this:</p>
<pre><code class="hljs lang-json">{
  <span class="hljs-attr">"siteName"</span>: <span class="hljs-string">"Strongloop"</span>,
  <span class="hljs-attr">"introText"</span>:  {
    <span class="hljs-attr">"title"</span>: <span class="hljs-string">"&lt;h1&gt; Yo &lt;/h1&gt;"</span>,
    <span class="hljs-attr">"body"</span>: <span class="hljs-string">"&lt;strong&gt;Welcome to StrongLoop!&lt;/strong&gt;"</span>
  },
  <span class="hljs-attr">"mapbox"</span>: {
    <span class="hljs-attr">"styleUrl"</span>: <span class="hljs-string">"mapbox://styles/test/ciolxdklf80000atmd1raqh0rs"</span>,
    <span class="hljs-attr">"accessToken"</span>: <span class="hljs-string">"pk.10Ijoic2slkdklKLSDKJ083246ImEiOi9823426In0.pWHSxiy24bkSm1V2z-SAkA"</span>
  },
  <span class="hljs-attr">"coords"</span>: [<span class="hljs-number">73.153</span>,<span class="hljs-number">142.621</span>],
  <span class="hljs-attr">"types"</span>: [
    {
      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"walk"</span>,
      <span class="hljs-attr">"type"</span>: <span class="hljs-string">"path"</span>,
      <span class="hljs-attr">"lineColor"</span>: <span class="hljs-string">"#F900FC"</span>,
      <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"test-icon-32.png"</span>
    },
    {
      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"live"</span>,
      <span class="hljs-attr">"type"</span>: <span class="hljs-string">"point"</span>,
      <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Where do you live?"</span>,
      <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"placeLive.png"</span>
    }
    ...
</code></pre>
<p>We don&#39;t want to have to go read over this complex JSON file each time we want to find the name of a key or remember the type of a property. Furthermore, it&#39;s not possible to document this structure in the file itself because JSON does not allow comments.* Let&#39;s create Typescript Declaration called <code>config.d.ts</code> to describe this config object, and put it in a directory in our project called <code>types/</code>.</p>
<pre><code class="hljs lang-typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">namespace</span> Demo{
  <span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> MapConfig {
      <span class="hljs-comment">/** Used as key to ID map in db  */</span>
      siteName: <span class="hljs-built_in">string</span>;
      mapbox: {
        <span class="hljs-comment">/** @see https://www.mapbox.com/studio/ to create style */</span>
        styleUrl: <span class="hljs-built_in">string</span>;
        <span class="hljs-comment">/** @see https://www.mapbox.com/mapbox.js/api/v2.4.0/api-access-tokens/ */</span>
        accessToken: <span class="hljs-built_in">string</span>;
      };
      <span class="hljs-comment">/** @see https://www.mapbox.com/mapbox.js/api/v2.4.0/l-latlng/ */</span>
      coords: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;;
      types : <span class="hljs-built_in">Array</span>&lt;MapConfigFeature&gt;;
  }

 <span class="hljs-keyword">interface</span> MapConfigFeature {
    <span class="hljs-keyword">type</span> : <span class="hljs-string">'path'</span> | <span class="hljs-string">'point'</span> | <span class="hljs-string">'polygon'</span>;
    <span class="hljs-comment">/** hex color */</span>
    lineColor?: <span class="hljs-built_in">string</span>;
    name : <span class="hljs-built_in">string</span>;
    <span class="hljs-comment">/** Name of icon.png file */</span>
    icon: <span class="hljs-built_in">string</span>;
  }  
}
</code></pre>
<p>You can read more <a href="https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html">in the Typescript docs</a> about what all is going on here, but in short, this file:</p>
<ol>
<li>Declares the <code>Demo</code> namespace, so we don&#39;t collide with some other <code>MapConfig</code> interface</li>
<li>Declares two interfaces, essentially schemas describing the structure and purpose of our JSON</li>
<li>Defines the <code>types</code> property of the first interface as an array whose members are <code>MapConfigFeature</code>s</li>
<li>Exports <code>MapConfig</code> so we can reference it from outside the file.</li>
</ol>
<p>VS Code will load the file automatically because it&#39;s in our project, and we&#39;ll use the <code>@type</code> annotation to mark our <code>conf</code> object as a <code>MapConfig</code> when we load it from disk:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">/** @type {Demo.MapConfig} */</span>
<span class="hljs-keyword">const</span> conf = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./config.js'</span>);
</code></pre>
<p>Now we can access properties of the configuration object &amp; get the same code-completion, type info, and documentation hints! Note how in the following gif, VS Code identifies not only that <code>conf.types</code> is an array, but when we call an <code>.filter</code> on it, knows that each element in the array is a <code>MapConfigFeature</code> type object:</p>
<p><img src="/img/typehint-mapconfig.gif" alt="example demonstrating looking up properties on an object based on a local Typescript Definition"></p>
<p>I have been very much enjoying the benefits of JSDoc, Typescript Declarations and the <code>typings</code> repository in my work. Hopefully this article will help you get started up and running with type hinting in JavaScript. If you have any questions or corrections, or if this post was useful to you, <a href="/contact/">please let me know</a>!</p>
<p>* <em>There is in fact <a href="http://json-schema.org/">a way to document the properties of json files</a>, I hope to write about it in the future!</em></p>

]]></content:encoded></item><item><title>Techniques to Avoid Live Coding, Part 1</title><link>https://sequoia.makes.software/techniques-to-avoid-live-coding-part-1</link><description>The demo-gods are unmerciful and typing is hard with hundreds of people looking on. Learn to write code without writing code and your presentations will go off without a hitch!</description><guid isPermaLink="true">https://sequoia.makes.software/techniques-to-avoid-live-coding-part-1</guid><pubDate>Mon, 23 May 2016 04:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>You‚Äôre on stage. You‚Äôre about to demo your Cool New Thing. Just gotta add a few‚Ä¶ lines‚Ä¶ of code‚Ä¶ and <em>[drumroll]</em> ERROR. Oops, heh‚Ä¶ here‚Äôs what we did wrong. Just fix this and‚Ä¶ <em>[drumroll]</em> ‚Ä¶ <em>[drumroll]</em> hmm. <em>[drumroll]</em> Looks like the wifi isn‚Äôt working‚Ä¶</p>
<blockquote>
<p>&quot;Well trust me, it works.&quot;</p>
</blockquote>
<p>Live coding! The worst! We‚Äôve all seen the previous scenario play out in a presentation, perhaps you‚Äôve even been a victim. But what can a presenter do? The code demos have <strong>multiple steps</strong>, there are <strong>terminal interactions</strong> and the tool <strong>relies on an internet connection</strong>. How can we fit all that into our slides?? Fear not! I‚Äôll go over some tips to keep your presentation running smoothly without sacrificing a calf to the Demo Gods beforehand. In this post, we‚Äôll look at coding demos: demos where you‚Äôre writing code for attendees to see on a projector.</p>
<p>It‚Äôs not uncommon, when demoing a programming practice or tool, to do a ‚Äúbuild-it-up‚Äù type demo, where you start with something simple &amp; add functionality through the presentation. This is a great pattern for demoing frameworks &amp; libraries, but many steps means <em>many opportunities for mistakes</em>. I lean on two main approaches to handling these issues.</p>
<h2 id="solution-1-tagged-steps">
    <a class="header-anchor" href="#solution-1-tagged-steps">
      <span class="header-link"></span>
    </a>
    Solution 1: Tagged Steps</h2><p>The first solution for this one is the most simple: tagged steps in a git repo. By coding beforehand &amp; tagging each step, you have the flexibility to live code if you want (you can always jump to the next step if you get off track), or don‚Äôt code at all and just check out step after step.</p>
<p>This approach requires some preparation! While you can retrofit this approach onto an existing repo, it‚Äôs much easier if you plan things out ahead of time. Here‚Äôs my approach:</p>
<ol>
<li>Create the <strong>outline</strong> of the steps you‚Äôre going to go over in code examples</li>
<li>As you create your example app, <strong>commit at each step</strong> from your outline</li>
<li><strong>Tag each commit</strong> with a step name or number (<em>don‚Äôt do this ‚Äôtil you‚Äôre done!!</em>)</li>
<li>Optionally: link to the tags in your slides</li>
</ol>
<p>When you‚Äôre done, you‚Äôll have something like this:</p>
<p><img src="/img/avoid-coding-tags.png" alt="List of named tags on a repository on github. Tags have names like &quot;test,&quot; &quot;tables,&quot; &quot;search,&quot; &quot;progress-bars&quot; etc."></p>
<p>Now you can still code in your demos, but if something goes awry, you have a safety net: git checkout the next step &amp; you‚Äôre back to working code and ready to move on! Bonus: attendees can now peruse your examples at their leisure after the talk.</p>
<p>Example: in <a href="https://docs.google.com/presentation/d/1KVMwffTe-aam8Mq7LwfZzXwtlcy-VRHrBPk20x47_zk/edit#slide=id.p">this talk</a>, each of the titles in the ‚Äústeps‚Äù slides are links to a tag on github.</p>
<h2 id="solution-2-code-quot-fade-ins-and-highlighting-">
    <a class="header-anchor" href="#solution-2-code-quot-fade-ins-and-highlighting-">
      <span class="header-link"></span>
    </a>
    Solution 2: Code &quot;Fade-ins‚Äù (and Highlighting)</h2><p>Depending on the nature of your presentation, you may not have the ability or the time to actually step through the code and look at it in an editor. For fast-paced talks, it can be useful to have <em>everything</em> in your slides, code included.</p>
<p>Putting code in slides can go very wrong, however: if you dump a big block of code on the screen, attendees don‚Äôt know where to look and it can be hard to tell what‚Äôs important. This, for example, is a mess:</p>
<p><img src="/img/avoid-coding-progress-bars-still.png" alt="Slide about building progress bars. There are many many lines of code visible."></p>
<p>Where am I supposed to look? Which part of this is important? I can‚Äôt read all that!!!</p>
<p>My solution to this is two-fold:</p>
<ol>
<li><strong>Highlight</strong> the important bits</li>
<li><strong>Fade lines of code in</strong> to match the order of your explanation</li>
</ol>
<p>By fading code in line by line or in blocks, it simulates ‚Äúwriting‚Äù the code, and it <em>presents lines of code at a rate people can actually process</em>. Highlighting simply calls attention to the important bits, so people know where to look. In the example above, which relates to adding progress bars to a file-download feature, the steps I was going over were:</p>
<ol>
<li>Make request &amp; pipe it to disk</li>
<li>Add a response listener</li>
<li>Set up the progress bar</li>
<li>Update it when data arrives</li>
<li>Finally, output the filename in cyan</li>
</ol>
<p>With transitions in place, I was able to go thru each of the steps above one by one, ‚Äúbuilding up‚Äù the example in bite-sized pieces:</p>
<p><img src="/img/avoid-coding-progress-bars-fadein.gif" alt="Slide explaining how to create progress bars with portions of code fading in bit by bit"></p>
<p><em>NB: This gif cycles thru the steps much more quickly that you would on stage.</em></p>
<p>This is one of my favorite approaches to live-coding (fake it! :p), but it can be difficult to set up. In <a href="https://docs.google.com/presentation/d/1KVMwffTe-aam8Mq7LwfZzXwtlcy-VRHrBPk20x47_zk/edit#slide=id.gae4bde4ee_0_47">the example above</a>, there is a separate text-box for each of the portions to fade in, painstakingly positioned to appear as one big file. Another challenge was getting highlighted code into google slides at all: when you copy code from most editors or IDEs, they don‚Äôt bring syntax highlighting along. I found that PHPStorm <em>did</em> allow you to copy code with syntax highlighting, so I opened files there any time I needed to copy with highlighting. Yes, all this <em>was</em> time consuming. üôÇ</p>
<p>This approach is also possible in tools like Reveal.js, but <strong>not using markdown</strong>. In order to achieve line-by-line fade-ins with Reveal.js, you‚Äôd need to first convert the code examples to HTML, then manually <a href="https://github.com/hakimel/reveal.js#fragments">add the fragment class</a> to elements you wish to fade in. I haven‚Äôt tried it but I believe it would work‚Äì if you have done this, please let me know!</p>
<p>That‚Äôs all for today! In part II of this post, we‚Äôll look at how to demo command-line tools and interactions on stage‚Ä¶ <em>without opening a terminal</em>. Stay tuned!</p>

]]></content:encoded></item><item><title>Migrating a Legacy System to a Modern API Framework</title><link>https://sequoia.makes.software/migrating-a-legacy-system-to-a-modern-api-framework</link><description>LoopBack makes it easy to develop greenfield APIs, but in real business environments, data isn‚Äôt always tidy &amp; cooperative. In this case study we'll see what it takes to migrate a complex legacy application to LoopBack.</description><guid isPermaLink="true">https://sequoia.makes.software/migrating-a-legacy-system-to-a-modern-api-framework</guid><pubDate>Thu, 03 Mar 2016 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>We know LoopBack <a href="https://strongloop.com/strongblog/compare-express-restify-hapi-loopback/">makes it a breeze</a> to create APIs that expose <a href="https://strongloop.com/strongblog/getting-started-with-the-mysql-connector-for-loopback/">SQL</a> &amp; <a href="https://strongloop.com/strongblog/node-js-loopback-js-couchbase-connector/">NoSQL</a> databases (<a href="https://strongloop.com/strongblog/node-js-loopback-api-gateway-sample-applications/">among others</a>), but in real business environments, data isn‚Äôt always this tidy. As business systems develop over years, it‚Äôs not uncommon for information to be scattered across databases, flat files, or even third party servers outside of your control. Given a complex situation like this, is it still possible to build an API using LoopBack? Yes it is, and that‚Äôs just what we‚Äôll do now!</p>
<h2 id="background">
    <a class="header-anchor" href="#background">
      <span class="header-link"></span>
    </a>
    Background</h2><p>Al‚Äôs Appliances is a retail chain that specializes in ACME products. Al‚Äôs has a website where customers can order products, but getting replacement parts for products is more complicated.</p>
<p>To wit:</p>
<ol>
<li>Customer calls Sales Rep with <strong>product name</strong>.</li>
<li>Sales Rep looks up <strong>product number</strong> in the products database.</li>
<li>Sales Rep uses <strong>product number</strong> to find the proper <strong>parts list</strong>, supplied by ACME.</li>
<li>Customer asks about one or more <strong>parts</strong>.</li>
<li>Sales Rep goes to ACME‚Äôs wholesaler portal and looks up <strong>price</strong> and <strong>availability</strong> of the parts, one by one.</li>
</ol>
<p>Yikes! Al‚Äôs IT team would like to build an interface to support the following workflow:</p>
<ol>
<li>Customer looks up product on website.</li>
<li>Customer clicks to see list of associated parts with up-to-date price and availability info.</li>
<li>Alternately, Customer can enter a part number and get up-to-date info for that part.</li>
</ol>
<p>Their team can build the web UI, but it‚Äôs up to us to tie the data together &amp; expose it via an API.</p>
<h2 id="lay-of-the-land">
    <a class="header-anchor" href="#lay-of-the-land">
      <span class="header-link"></span>
    </a>
    Lay of the Land</h2><p>We have the following assets to work with:</p>
<ol>
<li><strong>Products Database</strong>: a SQL database with a Product table listing name, description, and ID of each product.</li>
<li><p><strong>Parts lists (<a href="https://en.wikipedia.org/wiki/Comma-separated_values#Example">CSVs</a>)</strong>: ACME delivers CSV files, named by product number &amp; containing a list of part names &amp; <a href="https://en.wikipedia.org/wiki/Stock_keeping_unit">SKUs</a>. For example:</p>
<pre><code class="hljs lang-nohighlight">//mvwave_0332.csv//
door handle,8c218
rotator base,f74af
rotator axel,15b4c
...,...
</code></pre>
<p>These CSVs are the ‚Äúsingle source of truth‚Äù for parts info and they‚Äôre sometimes updated or replaced. Business processes for other departments rely on them, so unfortunately we must do the same (we must use the CSVs, moving the data to a database is not an option).</p>
</li>
<li><p><strong>Parts API</strong>: We‚Äôre in luck: ACME exposes a rudimentary API to access part information, so we don‚Äôt have to <a href="https://en.wikipedia.org/wiki/Web_scraping">scrape the website!</a> Unfortunately, it‚Äôs very simple and only exposes one endpoint to look up a single part at a time:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//GET api.acme.com/parts/f74af</span>
{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"rotator base"</span>,
  <span class="hljs-string">"sku"</span>: <span class="hljs-string">"f74af"</span>,
  <span class="hljs-string">"qty_avail"</span>: <span class="hljs-number">0</span>,
  <span class="hljs-string">"price"</span>: <span class="hljs-string">"2.32"</span>
}
</code></pre>
</li>
</ol>
<p>IT has requested an API that exposes the following endpoints:</p>
<ol>
<li><code>/v1/products</code> ‚Üí Array of products</li>
<li><code>/v1/products/{id}</code> ‚Üí Object representing a single product</li>
<li><code>/v1/products/{id}/parts</code> ‚Üí Array of parts for a product</li>
<li><code>/v1/parts/{sku}</code> ‚Üí Object representing a single part</li>
</ol>
<h1 id="why-loopback-">
    <a class="header-anchor" href="#why-loopback-">
      <span class="header-link"></span>
    </a>
    Why LoopBack?</h1><p>Given this nonstandard, somewhat complicated data architecture, why not build a 100% custom solution instead of using LoopBack, which best shows its strengths with more structured data? Using LoopBack here will require us to go ‚Äúoff the beaten path‚Äù a bit, but in return we get‚Ä¶</p>
<ul>
<li>easy extension of our application with any of the components in the LoopBack ecosystem</li>
<li>API discovery and exploration tools</li>
<li>powerful configuration management</li>
<li>loose coupling to the current data sources</li>
</ul>
<p>That last point is important, as it will allow us to eventually replace the directory of CSVs with a database table, once the business is ready for this, without major rewrites. Plugging into the LoopBack ecosystem gives us access to ready solutions for auth, data transformation, logging, push notification, throttling etc. when our requirements grow or change. Broadly speaking we‚Äôll be building a highly extensible, highly maintainable application that can serve as a foundation for future projects, and this is makes LoopBack a good choice.</p>
<p>Setting Up
To get started we‚Äôll install <a href="https://www.npmjs.com/package/strongloop">Strongloop tools</a></p>
<pre><code class="hljs lang-nohighlight">$ npm install -g strongloop
</code></pre>
<p>and <a href="https://docs.strongloop.com/display/public/LB/Application+generator">scaffold a new LoopBack application</a> in a new directory.</p>
<pre><code class="hljs lang-nohighlight">$ slc loopback als-api
</code></pre>
<p>Now we can switch to the new <code>als-api</code> directory and generate our models. We‚Äôll keep them server-only for now, we can easily change that later.</p>
<pre><code class="hljs lang-nohighlight">$ cd als-api
$ slc loopback:model
? Enter the model name: Product
? Select the data-source to attach Product to: db (memory)
? Select model&#39;s base class PersistedModel
? Expose Product via the REST API? Yes
? Custom plural form (used to build REST URL): n
? Common model or server only? server
</code></pre>
<p>Let‚Äôs add some Product properties now.</p>
<pre><code class="hljs lang-nohighlight">? Property name: name
invoke loopback:property
? Property type: string
? Required? Yes

...etc...
</code></pre>
<p><em>NB: You can see a detailed example of this process <a href="https://docs.strongloop.com/display/public/LB/Create+new+models">here</a>.</em></p>
<p>Once we finish this process, we have models for Product, Part, and PartsList, with corresponding <code>js</code> and <code>json</code> files in <code>server/models/</code>. The PartsList is a join model that connects a Product to its Parts. That model requires some custom code, so we‚Äôll save that bit for last and start by wiring the Product and Part model to their datasources.</p>
<h2 id="product">
    <a class="header-anchor" href="#product">
      <span class="header-link"></span>
    </a>
    Product</h2><p>Our generated <code>server/models/product.json</code>:</p>
<pre><code class="hljs lang-js">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"Product"</span>,
  <span class="hljs-string">"properties"</span>: {
    <span class="hljs-string">"name"</span>: {
      <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,
      <span class="hljs-string">"required"</span>: <span class="hljs-literal">true</span>
    }
  },
  <span class="hljs-string">"description"</span>: {
    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,
    <span class="hljs-string">"required"</span>: <span class="hljs-literal">true</span>
  },
  <span class="hljs-string">"id"</span>: {
    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,
    <span class="hljs-string">"required"</span>: <span class="hljs-literal">true</span>
  }
 },
. . .
}
</code></pre>
<p>The products are in a SQL database (SQLite for our example). There are three steps to connecting the model to its data:</p>
<ol>
<li><p><strong>Install the appropriate connector.</strong> Loopback has many data connectors but only the ‚Äúin memory‚Äù database is bundled. The <a href="https://docs.strongloop.com/display/public/LB/Database+connectors">list of StrongLoop supported connectors</a> doesn‚Äôt include SQLLite, but the <a href="https://docs.strongloop.com/display/public/LB/Community+connectors">list of community connectors</a> indicates that we should install ‚Äúloopback-connector-sqlite‚Äù:</p>
<pre><code class="hljs lang-nohighlight">$ npm install --save loopback-connector-sqlite
</code></pre>
</li>
<li><p><strong>Create a datasource using that connector.</strong> To create a sqlite datasource called ‚Äúproducts,‚Äù we add the following to server/datasources.json:</p>
<pre><code class="hljs lang-js">&quot;products&quot;: {
  &quot;name&quot;: &quot;products&quot;,
  &quot;connector&quot;: &quot;sqlite&quot;,
  &quot;file_name&quot;: &quot;./localdbdata/
  local_database.sqlite3&quot;,
  &quot;debug&quot;: true
}
</code></pre>
<p>In our local setup our sqlite database resides in ./localdbdata/ we can later add another configuration for the production environment.</p>
</li>
<li><p><strong>Connect the model to the datasource.</strong>
<code>/server/modelconfig.json</code> manages this:</p>
<pre><code class="hljs lang-js"><span class="hljs-string">"Product"</span>: {
  <span class="hljs-string">"dataSource"</span>: <span class="hljs-string">"products"</span>,
  <span class="hljs-string">"public"</span>: <span class="hljs-literal">true</span>
},
</code></pre>
<p>There is an additional step for this particular connector, specifying which field is the primary key. We do this by adding <code>&quot;id&quot;: true</code> to a property in <code>/server/models/product.json</code>:</p>
<pre><code class="hljs lang-js">. . .
<span class="hljs-string">"properties"</span>: {
  . . .
  <span class="hljs-string">"id"</span>: {
    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,
    <span class="hljs-string">"id"</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-string">"required"</span>: <span class="hljs-literal">true</span>
  }
},
. . .
</code></pre>
</li>
</ol>
<p>Before we start our server to see if this works, let‚Äôs update the server configuration to expose the API on <code>/v1/</code> rather than the default path (<code>/api/</code>) in <code>server/config.json</code>:</p>
<pre><code class="hljs lang-js">. . .
  <span class="hljs-string">"restApiRoot"</span>: <span class="hljs-string">"/v1"</span>,
  <span class="hljs-string">"host"</span>: <span class="hljs-string">"0.0.0.0"</span>,
. . .
</code></pre>
<p>The API will now be served from <code>/v1/</code> per IT‚Äôs specifications. Now we can start our server‚Ä¶</p>
<pre><code class="hljs lang-nohighlight">$ npm start
</code></pre>
<p>and start querying products from <a href="http://localhost:3000/">http://localhost:3000/</a></p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//GET /v1/products</span>
[
  {
    <span class="hljs-string">"name"</span>: <span class="hljs-string">"Microwelle Deluxe"</span>,
    <span class="hljs-string">"description"</span>: <span class="hljs-string">"The very best microwave money can buy"</span>,
    <span class="hljs-string">"id"</span>: <span class="hljs-literal">null</span>
  },
  {
    <span class="hljs-string">"name"</span>: <span class="hljs-string">"Microwelle Budget"</span>,
    <span class="hljs-string">"description"</span>: <span class="hljs-string">"The most OK microwave money can buy"</span>,
    <span class="hljs-string">"id"</span>: <span class="hljs-literal">null</span>
  },
. . .
]
</code></pre>
<p>Uhoh! The <code>ids</code> are strings and <code>idInjection</code> makes LoopBack treat them as numbers. Let‚Äôs fix that in <code>server/models/product.json</code>:</p>
<pre><code class="hljs lang-js">. . .
  <span class="hljs-string">"idInjection"</span>: <span class="hljs-literal">false</span>,
. . .
</code></pre>
<p>Now let‚Äôs try again:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//GET /v1/products</span>
[
  {
    <span class="hljs-string">"name"</span>: <span class="hljs-string">"Microwelle Deluxe"</span>,
    <span class="hljs-string">"description"</span>: <span class="hljs-string">"The very best microwave money can buy"</span>,
    <span class="hljs-string">"id"</span>: <span class="hljs-string">"microwelle_010"</span>
  },
  {
    <span class="hljs-string">"name"</span>: <span class="hljs-string">"Microwelle Budget"</span>,
    <span class="hljs-string">"description"</span>: <span class="hljs-string">"The most OK microwave money can buy"</span>,
    <span class="hljs-string">"id"</span>: <span class="hljs-string">"microwelle_022"</span>
  },
. . .
]

<span class="hljs-comment">//GET /v1/products/microwelle_010</span>
{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"Microwelle Deluxe"</span>,
  <span class="hljs-string">"description"</span>: <span class="hljs-string">"The very best microwave money can buy"</span>,
  <span class="hljs-string">"id"</span>: <span class="hljs-string">"microwelle_010"</span>
}
</code></pre>
<p>That‚Äôs better! Our Products are now being served so Endpoints 1 (<code>/v1/products</code>) and 2 (<code>/v1/products/{id}</code>) are working. Now let‚Äôs configure our Parts datasource and set up Endpoint 4 (<code>/v1/parts/{sku}</code>).</p>
<p>Part
Our generated <code>server/models/part.json</code>:</p>
<pre><code class="hljs lang-js">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"Part"</span>,
  <span class="hljs-string">"properties"</span>: {
    <span class="hljs-string">"sku"</span>: {
      <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,
      <span class="hljs-string">"required"</span>: <span class="hljs-literal">true</span>
    },
    <span class="hljs-string">"qty_avail"</span>: {
      <span class="hljs-string">"type"</span>: <span class="hljs-string">"number"</span>,
      <span class="hljs-string">"required"</span>: <span class="hljs-literal">true</span>
    },
    <span class="hljs-string">"price"</span>: {
      <span class="hljs-string">"type"</span>: <span class="hljs-string">"number"</span>,
      <span class="hljs-string">"required"</span>: <span class="hljs-literal">true</span>
    },
    <span class="hljs-string">"name"</span>: {
      <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,
      <span class="hljs-string">"required"</span>: <span class="hljs-literal">true</span>
    }
  }
. . .
}
</code></pre>
<p>We‚Äôll need to follow the same three steps to connect the Parts model its datasource, a remote server this time.</p>
<ol>
<li><p><strong>Install connector</strong>:</p>
<pre><code class="hljs lang-nohighlight">$ npm install --save loopback-connector-rest
</code></pre>
</li>
<li><p><strong>Create Datasource</strong>: Because there‚Äôs no universal standard for what parameters REST endpoints take, how they take them (query, post data, or part of URL), or what sort of data they return, we must configure each method manually for a REST datasource.</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//server/datasources.json:</span>
. . .
  <span class="hljs-string">"partsServer"</span>: {
    <span class="hljs-string">"name"</span>: <span class="hljs-string">"partsServer"</span>,
    <span class="hljs-string">"connector"</span>: <span class="hljs-string">"rest"</span>
    <span class="hljs-string">"operations"</span>: [{
      <span class="hljs-string">"template"</span>: {
        <span class="hljs-string">"method"</span>: <span class="hljs-string">"GET"</span>,
        <span class="hljs-string">"url"</span>: <span class="hljs-string">"http://api.acme.com/parts/{sku}"</span>,
        <span class="hljs-string">"headers"</span>: {
          <span class="hljs-string">"accepts"</span>: <span class="hljs-string">"application/json"</span>,
          <span class="hljs-string">"contenttype"</span>: <span class="hljs-string">"application/json"</span>
        }
      },
      <span class="hljs-string">"functions"</span>: {
        <span class="hljs-string">"findById"</span>: [<span class="hljs-string">"sku"</span>]
      }
    }]
  }
. . .
</code></pre>
<p>This will create a method called <code>findById</code> on any model attached to this datasource. That method takes one parameter (sku) that will be plugged into the url template. Everything else here is default.</p>
<p>We named the ‚Äúoperation‚Äù findById to conform to LoopBack convention. Because it has this name, LoopBack will know to exposed the method on /v1/parts/{id} .</p>
</li>
<li><p><strong>Connect the model to the datasource.</strong> <code>/server/modelconfig.json</code>:</p>
<pre><code class="hljs lang-js">. . .
  <span class="hljs-string">"Part"</span>: {
    <span class="hljs-string">"dataSource"</span>: <span class="hljs-string">"partsServer"</span>,
    <span class="hljs-string">"public"</span>: <span class="hljs-literal">true</span>
  },
. . .
</code></pre>
</li>
</ol>
<p>Let‚Äôs restart the server and try it out:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//GET /v1/parts/f74af</span>
{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"rotator base"</span>,
  <span class="hljs-string">"sku"</span>: <span class="hljs-string">"f74af"</span>,
  <span class="hljs-string">"qty_avail"</span>: <span class="hljs-number">0</span>,
  <span class="hljs-string">"price"</span>: <span class="hljs-string">"2.11"</span>
}
</code></pre>
<p>Endpoint 4 (<code>/v1/parts/{sku}</code>) is now working! It‚Äôs just a passthrough to the ACME API right now, but this has advantages: we can set up logging, caching, etc., we don‚Äôt have to worry about <a href="https://remysharp.com/2011/04/21/getting-cors-working">CORS</a>, and if ACME makes a breaking API change, we can fix it in one place in our server code and clients are none the wiser.</p>
<p>With the easy parts out of the way, it‚Äôs time to tackle our CSVs‚Ä¶</p>
<h2 id="partslist">
    <a class="header-anchor" href="#partslist">
      <span class="header-link"></span>
    </a>
    PartsList</h2><p>Although the part lists CSVs contain product names, we‚Äôre relying on the remote server for this, so the CSVs are being used as simple many-to-many
join tables. Many-to-many tables don‚Äôt generally need their own model, so why are we creating one in this case? There are two reasons:</p>
<ol>
<li>Rather than a normal join table filled with <code>product_id</code>, <code>sku</code> pairs, we have a bunch of files named like <code>{product_id}.csv</code> that contain lists of <code>sku</code>s. This will require custom join logic, and,</li>
<li>We want to encapsulate this logic in one place so the Product and Part models are not polluted with CSV and file-reading concerns.</li>
</ol>
<p>If we stop using CSVs in the future we can delete this model and update the relationship configurations on Product, and that model can continue working without changes.</p>
<p>We‚Äôre going to use a <a href="https://docs.strongloop.com/display/public/LB/HasManyThrough+relations">hasManyThrough</a> relationship to tie Products to their Parts, and because we‚Äôre not concerned with the part name in the PartsList, our <code>partslist.json</code> is does not specify any properties:</p>
<pre><code class="hljs lang-js">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"PartsList"</span>,
  <span class="hljs-string">"base"</span>: <span class="hljs-string">"PersistedModel"</span>,
  <span class="hljs-string">"properties"</span>: {
  },
. . .
}
</code></pre>
<p>We‚Äôre not exposing PartsLists directly via the API, just using them for Endpoint 3 (<code>/v1/products/{id}/parts</code>), so we‚Äôll just set it up to support this relationship. This first step here is to add the relationship from Product to Part, which we can do using the relationship generator:</p>
<pre><code class="hljs lang-nohighlight">$ slc loopback:relation
? Select the model to create the relationship from: Product
? Relation type: has many
? Choose a model to create a relationship with: Part
? Enter the property name for the relation: parts
? Optionally enter a custom foreign key:
? Require a through model? Yes
? Choose a through model: PartsList
</code></pre>
<p>Now when we hit <code>/v1/products/thing_123/parts</code>, LoopBack will attempt to figure out what Parts are related to our Product by calling <code>find</code> on the join model, more or less like this:</p>
<pre><code class="hljs lang-js">PartsList.find(
  {
    <span class="hljs-attr">where</span>: { <span class="hljs-attr">productId</span>: <span class="hljs-string">'thing_123'</span> },
    <span class="hljs-attr">include</span>: <span class="hljs-string">'part'</span>,
    <span class="hljs-attr">collect</span>: <span class="hljs-string">'part'</span>
  },
  {},
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">err, res</span>)</span>{ <span class="hljs-comment">/*...*/</span> }
);
</code></pre>
<p>How will we make this work? We‚Äôll definitely need to read CSVs from the filesystem, so let‚Äôs get that configuration out of the way.</p>
<p>##Configuration</p>
<p>Our PartsList CSVs exist in <code>/vol/NAS_2/shared/parts_lists</code> but of course we don‚Äôt wish to hardcode this path in our model. Instead, we‚Äôll put it into a local config file where it can easily be overridden in other environments:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//server/config.local.json:</span>
{
  <span class="hljs-string">'partsListFilePath'</span> : <span class="hljs-string">'/vol/NAS_2/shared/parts_lists'</span>
}
</code></pre>
<h2 id="overriding-code-partslist-find-code-">
    <a class="header-anchor" href="#overriding-code-partslist-find-code-">
      <span class="header-link"></span>
    </a>
    Overriding <code>PartsList.find</code></h2><p>We know that when querying related models, LoopBack will call <code>find</code> on the ‚Äúthrough‚Äù model (aka join model), so we‚Äôll override <code>PartsList.find</code> and make it:</p>
<ol>
<li>read <code>thing_123.csv</code></li>
<li>get the <code>sku</code>s</li>
<li>call Part<code>.findOne</code> on each sku</li>
<li>pass an array of Parts to the callback</li>
</ol>
<p>We‚Äôll need to override the method in <code>server/models/partslist.js</code>. To override a data access method like this, we listen for the <code>attached</code> event to fire then overwrite the method on the model. We‚Äôll be using two node modules to help: <a href="https://www.npmjs.com/package/async">async</a> to manage ‚Äúwait for multiple async calls (calls to ACME API) to finish then call our <code>done</code> callback with the results,‚Äù and <a href="https://www.npmjs.com/package/csv-parse">csvparse</a> to parse our CSVs:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//server/model/partslist.js:</span>
<span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)Õæ
<span class="hljs-keyword">var</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'async'</span>)Õæ      <span class="hljs-comment">//npm install!</span>
<span class="hljs-keyword">var</span> csvParse = <span class="hljs-built_in">require</span>(<span class="hljs-string">'csvparse'</span>)Õæ<span class="hljs-comment">//npm install!</span>
<span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)Õæ

<span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">PartsList</span>) </span>{
  PartsList.on(<span class="hljs-string">'attached'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>)</span>{

    PartsList.find = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
      <span class="hljs-comment">//variable arguments, filter always first callback always last</span>
      <span class="hljs-keyword">var</span> filter = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>]Õæ
      <span class="hljs-keyword">var</span> done = <span class="hljs-built_in">arguments</span>[<span class="hljs-built_in">arguments</span>.length<span class="hljs-number">-1</span>]Õæ

      <span class="hljs-comment">//0. build the filename</span>
      <span class="hljs-keyword">var</span> filename = filter.where.productId + <span class="hljs-string">'.csv'</span>Õæ
      <span class="hljs-keyword">var</span> csvPath = path.join(app.get(<span class="hljs-string">'partsListFilePath'</span>),
filename)Õæ
      <span class="hljs-comment">//1. read the csv</span>
      fs.readFile(csvPath, <span class="hljs-string">'utf-8'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getParts</span>(<span class="hljs-params">err, res</span>)</span>{
        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> done(err)Õæ

        <span class="hljs-comment">//parse the csv contents</span>
        csvParse(res, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, partlist</span>)</span>{
          <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> done(err)Õæ

          <span class="hljs-comment">//2. get the skus from ['part name', 'sku'] tuples</span>
          <span class="hljs-keyword">var</span> skus = partlist.map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSku</span>(<span class="hljs-params">partTuple</span>)</span>{
            <span class="hljs-keyword">return</span> partTuple[<span class="hljs-number">1</span>]Õæ
          })Õæ

          <span class="hljs-comment">//3. call Part.findOne on each sku</span>
          <span class="hljs-keyword">async</span>.map(skus, app.models.Part.findById, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err,
parts</span>)</span>{
            <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> done(err)Õæ

            <span class="hljs-comment">//4. pass an array of Parts to the callback</span>
            done(<span class="hljs-literal">null</span>, parts)Õæ
          })Õæ
        })Õæ
      })Õæ
    }Õæ
  })Õæ
}Õæ
</code></pre>
<p>This could certainly be broken up into named functions for easier reading, but it works and for our purposes that‚Äôs good enough! One issue, however, is that the repeated calls to <code>Part.findById</code> is a ‚Äúcode smell:‚Äù we have Part logic (get all Parts by list of <code>sku</code>s) in the PartsList model. It would be much better to pass our array of <code>sku</code>s to a Part method and let it handle the details. Let‚Äôs change step (3) above so it looks like this:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//3. pass our list of SKUs and `done` callback to Part.getAll</span>
app.models.Part.getAll(skus, done)Õæ

<span class="hljs-comment">//4. pass an array of Parts to the callback</span>
<span class="hljs-comment">//   ^-- this happens in Part.getAll</span>
</code></pre>
<p>Now we add this new method to Part:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//server/model/part.js:</span>
<span class="hljs-keyword">var</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'async'</span>)Õæ

<span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Part</span>) </span>{
  Part.getAll = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">skus, cb</span>) </span>{
    <span class="hljs-keyword">async</span>.map(skus, Part.findById, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, parts</span>)</span>{
      <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> cb(err)Õæ
      cb(<span class="hljs-literal">null</span>, parts)Õæ
    })Õæ
  }
}Õæ
</code></pre>
<p>Now our Parts logic is nicely encapsulated in the Part model &amp; the logic in our PartsList model is a bit simpler. Let‚Äôs give our last API endpoint a try:</p>
<pre><code class="hljs lang-js"><span class="hljs-comment">//GET /v1/Products/mvwave_0332/parts</span>
[
  {
    <span class="hljs-string">"name"</span>: <span class="hljs-string">"door handle"</span>,
    <span class="hljs-string">"sku"</span>: <span class="hljs-string">"8c218"</span>,
    <span class="hljs-string">"qty_avail"</span>: <span class="hljs-number">0</span>,
    <span class="hljs-string">"price"</span>: <span class="hljs-string">"1.22"</span>
  },
  {
    <span class="hljs-string">"name"</span>: <span class="hljs-string">"rotator base"</span>,
    <span class="hljs-string">"sku"</span>: <span class="hljs-string">"f74af"</span>,
    <span class="hljs-string">"qty_avail"</span>: <span class="hljs-number">0</span>,
    <span class="hljs-string">"price"</span>: <span class="hljs-string">"8.35"</span>
  },
  {
    <span class="hljs-string">"name"</span>: <span class="hljs-string">"rotator axel"</span>,
    <span class="hljs-string">"sku"</span>: <span class="hljs-string">"15b4c"</span>,
    <span class="hljs-string">"qty_avail"</span>: <span class="hljs-number">0</span>,
    <span class="hljs-string">"price"</span>: <span class="hljs-string">"2.32"</span>
  }
]
</code></pre>
<p>It works!</p>
<h2 id="next-steps">
    <a class="header-anchor" href="#next-steps">
      <span class="header-link"></span>
    </a>
    Next Steps</h2><p>We managed to tie together a motley collection of data sources, represent them with LoopBack models, and expose them on an API built to IT‚Äôs specifications. That‚Äôs a good stopping point for now. Obvious next steps would be to <a href="https://docs.strongloop.com/display/public/LB/Exposing+models+over+REST#ExposingmodelsoverREST-HidingmethodsandRESTendpoints">disable unused methods</a> (this API is read-only, after all), build a client to interact with our API, and to <a href="https://docs.strongloop.com/display/public/LB/Authentication%2C+authorization%2C+and+permissions">set up auth</a> if needed. By using LoopBack to build our API, we‚Äôve positioned ourselves to be able to complete these tasks easily. We can now answer my initial question with greater confidence: yes, LoopBack can do it!</p>
<p>Want to see all this stuff actually work? Check out the <a href="https://github.com/Sequoia/loopback-legacy-migration-example">demo app</a>!</p>

]]></content:encoded></item><item><title>Higher Order Functions in ES6: Easy as a =&gt; b =&gt; c;</title><link>https://sequoia.makes.software/higher-order-functions-in-es6-easy-as-a-b-c</link><description>New language features can make an expression that was cumbersome to write in ES5 easy in ES6, enabling and encouraging the use of this type of expression. We‚Äôre going to look at one such case here: how arrow functions make it easier to write higher-order functions in ES6.</description><guid isPermaLink="true">https://sequoia.makes.software/higher-order-functions-in-es6-easy-as-a-b-c</guid><pubDate>Mon, 11 Jan 2016 05:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>ES6 is nigh! As more and more libraries &amp; Thought Leaders start incorporating ES6 into their code, what used to be nice-to-know ES6 features are becoming required knowledge. And it‚Äôs not just new syntax ‚Äì in many cases, new language features can make an expression that was cumbersome to write in ES5 easy in ES6, enabling and encouraging the use of this type of expression. We‚Äôre going to look at one such case here: how arrow functions make it easier to write higher-order functions in ES6.</p>
<p>A higher order function is a function that does one or both of the following:</p>
<ol>
<li>takes one or more functions as arguments</li>
<li>returns a function as its result.</li>
</ol>
<p>The purpose of this post is not to convince you to adopt this new style right
away, although I certainly encourage you to give it a try! The purpose is to
familiarize you with this style, so that when you run into it in someone‚Äôs
ES6-based library, you won‚Äôt sit scratching your head wondering what you‚Äôre
looking at as I did the first time I saw it. If you need a refresher in arrow
syntax, check out <a href="https://strongloop.com/strongblog/an-introduction-to-javascript-es6-arrow-functions/">this
post</a> first.</p>
<p>Hopefully you‚Äôre familiar with arrow functions that return a value:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> square = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * x;

square(<span class="hljs-number">9</span>) === <span class="hljs-number">81</span>; <span class="hljs-comment">// true</span>
</code></pre>
<p>But what‚Äôs going on in the code below?</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> has = <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> o =&gt; o.hasOwnProperty(p);
<span class="hljs-keyword">const</span> sortBy = <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> (a, b) =&gt; a[p] &gt; b[p];
</code></pre>
<p>What‚Äôs this ‚Äúp returns o returns o.hasOwnProperty‚Ä¶‚Äù? How can we use <code>has</code>?</p>
<h2 id="understanding-the-syntax">
    <a class="header-anchor" href="#understanding-the-syntax">
      <span class="header-link"></span>
    </a>
    Understanding the syntax</h2><p>To illustrate writing higher order functions with arrows, let‚Äôs look at a classic example: add.  In ES5 that would look like this:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">y</span>)</span>{
    <span class="hljs-keyword">return</span> y + x;
  };
}

<span class="hljs-keyword">var</span> addTwo = add(<span class="hljs-number">2</span>);
addTwo(<span class="hljs-number">3</span>);          <span class="hljs-comment">// =&gt; 5</span>
add(<span class="hljs-number">10</span>)(<span class="hljs-number">11</span>);        <span class="hljs-comment">// =&gt; 21</span>
</code></pre>
<p>Our add function takes x and returns a function that takes y which returns y + x. How would we write this with arrow functions? We know that‚Ä¶</p>
<ol>
<li>an arrow function definition is an expression, and</li>
<li>an arrow function <em>implicitly returns</em> the results of a single expression</li>
</ol>
<p>‚Ä¶so all we must do is make the body of our arrow function another arrow function, thus:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> add = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> y =&gt; y + x;
<span class="hljs-comment">// outer function: x =&gt; [inner function, uses x]</span>
<span class="hljs-comment">// inner function: y =&gt; y + x;</span>
</code></pre>
<p>Now we can create inner functions with a value bound to x:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> add2 = add(<span class="hljs-number">2</span>);<span class="hljs-comment">// returns [inner function] where x = 2</span>
add2(<span class="hljs-number">4</span>);            <span class="hljs-comment">// returns 6: exec inner with y = 4, x = 2</span>
add(<span class="hljs-number">8</span>)(<span class="hljs-number">7</span>);          <span class="hljs-comment">// 15</span>
</code></pre>
<p>Our <code>add</code> function isn‚Äôt terribly useful, but it should illustrate how an outer
function can take an argument <code>(x)</code> and reference it in a function it returns.</p>
<h2 id="sorting-our-users">
    <a class="header-anchor" href="#sorting-our-users">
      <span class="header-link"></span>
    </a>
    Sorting our users</h2><p>So you‚Äôre looking at an ES6 library on github and encounter code that looks like this:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> has = <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> o =&gt; o.hasOwnProperty(p);
<span class="hljs-keyword">const</span> sortBy = <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> (a, b) =&gt; a[p] &gt; b[p];

<span class="hljs-keyword">let</span> result;
<span class="hljs-keyword">let</span> users = [
  { <span class="hljs-attr">name</span>: <span class="hljs-string">'Qian'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>, <span class="hljs-attr">pets</span> : [<span class="hljs-string">'Bao'</span>], <span class="hljs-attr">title</span> : <span class="hljs-string">'Consultant'</span> },
  { <span class="hljs-attr">name</span>: <span class="hljs-string">'Zeynep'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>, <span class="hljs-attr">pets</span> : [<span class="hljs-string">'Civelek'</span>, <span class="hljs-string">'Muazzam'</span>] },
  { <span class="hljs-attr">name</span>: <span class="hljs-string">'Yael'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">52</span>, <span class="hljs-attr">title</span> : <span class="hljs-string">'VP of Engineering'</span>}
];

result = users
  .filter(has(<span class="hljs-string">'pets'</span>))
  .sort(sortBy(<span class="hljs-string">'age'</span>));
</code></pre>
<p>What‚Äôs going on here? We‚Äôre calling the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods">Array prototype‚Äôs sort and filter
methods</a>, each of which take a single function argument, but instead of writing function expressions and passing them to filter and sort, we‚Äôre calling functions that return functions, and passing those to filter and sort.</p>
<p>Let‚Äôs take a look, with the expression that returns a function underlined in each case.</p>
<h4 id="without-higher-order-functions">
    <a class="header-anchor" href="#without-higher-order-functions">
      <span class="header-link"></span>
    </a>
    Without higher order functions</h4><pre><code class="hljs lang-javascript">result = users
  .filter(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.hasOwnProperty(<span class="hljs-string">'pets'</span>)) <span class="hljs-comment">//pass Function to filter</span>
  .sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.age &gt; b.age);        <span class="hljs-comment">//pass Function to sort</span>
</code></pre>
<h4 id="with-higher-order-functions">
    <a class="header-anchor" href="#with-higher-order-functions">
      <span class="header-link"></span>
    </a>
    With higher order functions</h4><pre><code class="hljs lang-javascript">result = users
  .filter(has(<span class="hljs-string">'pets'</span>))  <span class="hljs-comment">//pass Function to filter</span>
  .sort(sortBy(<span class="hljs-string">'age'</span>)); <span class="hljs-comment">//pass Function to sort</span>
</code></pre>
<p>In each case, <code>filter</code> is passed a function that checks if an object has a property called ‚Äúpets.‚Äù</p>
<h2 id="why-is-this-useful-">
    <a class="header-anchor" href="#why-is-this-useful-">
      <span class="header-link"></span>
    </a>
    Why is this useful?</h2><p>This is useful for a few reasons:</p>
<ul>
<li>It reduces repetitive code</li>
<li>It allows for easier reuse of code</li>
<li>It increases clarity of code meaning</li>
</ul>
<p>Imagine we want only users with pets <strong>and with titles</strong>. We could add another function in:</p>
<pre><code class="hljs lang-javascript">result = users
  .filter(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.hasOwnProperty(<span class="hljs-string">'pets'</span>))
  .filter(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.hasOwnProperty(<span class="hljs-string">'title'</span>))
  ...
</code></pre>
<p>The repetition here is just clutter: it doesn‚Äôt add clarity, it‚Äôs just more to read and write. Compare with the same code using our <code>has</code> function:</p>
<pre><code class="hljs lang-javascript">result = users
  .filter(has(<span class="hljs-string">'pets'</span>))
  .filter(has(<span class="hljs-string">'title'</span>))
  ...
</code></pre>
<p>This is shorter and easier to write, and that makes for fewer typos. I consider this code to have greater clarity as well, as it‚Äôs easy to understand its purpose at a glance.</p>
<p>As for reuse, if you have to filter to pet users or people with job titles in many places, you can create function to do this and reuse them as needed:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> hasPets = has(<span class="hljs-string">'pets'</span>);
<span class="hljs-keyword">const</span> isEmployed = has(<span class="hljs-string">'title'</span>);
<span class="hljs-keyword">const</span> byAge = sortBy(<span class="hljs-string">'age'</span>);

<span class="hljs-keyword">let</span> workers = users.filter(isEmployed);
<span class="hljs-keyword">let</span> petOwningWorkers = workers.filter(hasPets);
<span class="hljs-keyword">let</span> workersByAge = workers.sort(byAge);
</code></pre>
<p>We can use some of our functions for single values as well, not just for filtering arrays:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">let</span> user = {<span class="hljs-attr">name</span>: <span class="hljs-string">'Assata'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">68</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">'VP of Operations'</span>};
<span class="hljs-keyword">if</span>(isEmployed(user)){   <span class="hljs-comment">// true</span>
  <span class="hljs-comment">//do employee action</span>
}
hasPets(user);          <span class="hljs-comment">// false</span>
has(<span class="hljs-string">'age'</span>)(user);       <span class="hljs-comment">//true</span>
</code></pre>
<h2 id="a-step-further">
    <a class="header-anchor" href="#a-step-further">
      <span class="header-link"></span>
    </a>
    A Step Further</h2><p>Let‚Äôs make a function that will produce a filter function that checks that an
object has a <strong>key</strong> with a certain <strong>value</strong>. Our <code>has</code> function checked for a key, but to check value as well our filter function will need to know two things (key and value), not just one. Let‚Äôs take a look at one approach:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-comment">//[p]roperty, [v]alue, [o]bject:</span>
<span class="hljs-keyword">const</span> is = <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> v =&gt; <span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> o.hasOwnProperty(p) &amp;&amp; o[p] == v;

<span class="hljs-comment">// broken down:</span>
<span class="hljs-comment">// outer:  p =&gt; [inner1 function, uses p]</span>
<span class="hljs-comment">// inner1: v =&gt; [inner2 function, uses p and v]</span>
<span class="hljs-comment">// inner2: o =&gt; o.hasOwnProperty(p) &amp;&amp; o[p] = v;</span>
</code></pre>
<p>So our new function called ‚Äúis‚Äù does three things:</p>
<ol>
<li>Takes a <strong>property</strong> name and returns a function that‚Ä¶</li>
<li>Takes a <strong>value</strong> and returns a function that‚Ä¶</li>
<li>Takes an <strong>object</strong> and tests whether the object has the property specified with the value specified, finally returning a boolean.</li>
</ol>
<p>Here is an example of using this <code>is</code> to filter our users:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> titleIs = is(<span class="hljs-string">'title'</span>);
<span class="hljs-comment">// titleIs == v =&gt; o =&gt; o.hasOwnProperty('title') &amp;&amp; o['title'] == v;</span>

<span class="hljs-keyword">const</span> isContractor = titleIs(<span class="hljs-string">'Contractor'</span>);
<span class="hljs-comment">// isContractor == o =&gt; o.hasOwnProperty('title') &amp;&amp; o['title'] == 'Contractor';</span>

<span class="hljs-keyword">let</span> contractors = users.filter(isContractor);
<span class="hljs-keyword">let</span> developers  = users.filter(titleIs(<span class="hljs-string">'Developer'</span>));

<span class="hljs-keyword">let</span> user = {<span class="hljs-attr">name</span>: <span class="hljs-string">'Viola'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">'Actress'</span>, <span class="hljs-attr">pets</span>: [<span class="hljs-string">'Zak'</span>]};
isEmployed(user);   <span class="hljs-comment">// true</span>
isContractor(user); <span class="hljs-comment">// false</span>
</code></pre>
<h2 id="a-note-on-style">
    <a class="header-anchor" href="#a-note-on-style">
      <span class="header-link"></span>
    </a>
    A note on style</h2><p>Scan this function, and note the time it takes you to figure out what‚Äôs going on:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> i = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> y =&gt; <span class="hljs-function"><span class="hljs-params">z</span> =&gt;</span> h(x)(y) &amp;&amp; y[x] == z;
</code></pre>
<p>Now take a look at this same function, written slightly differently:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> is = <span class="hljs-function"><span class="hljs-params">prop</span> =&gt;</span> val =&gt; <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> has(prop)(obj) &amp;&amp; obj[prop] == val;
</code></pre>
<p>There is a tendency when writing one line functions to be as terse as possible,
at the expense of readability. Fight this urge! Short, meaningless names make
for cute-looking, <strong>hard to understand</strong> functions. Do yourself and your fellow coders a favor and spend the extra few characters for meaningful variable and function names.</p>
<h2 id="one-more-thing-">
    <a class="header-anchor" href="#one-more-thing-">
      <span class="header-link"></span>
    </a>
    One more thing. . .</h2><p>What if you want to sort by age in descending order rather than ascending? Or find out who‚Äôs not an employee? Do we have to write new utility functions <code>sortByDesc</code> and <code>notHas</code>? No we do not! We can wrap our functions, which return Booleans, with a function that inverts that boolean, true to false and vice versa:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-comment">//take args, pass them thru to function x, invert the result of x</span>
<span class="hljs-keyword">const</span> invert = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> (...args) =&gt; !x(...args);
<span class="hljs-keyword">const</span> noPets = invert(hasPets);

<span class="hljs-keyword">let</span> petlessUsersOldestFirst = users
  .filter(noPets)
  .sort(invert(sortBy(<span class="hljs-string">'age'</span>)));
</code></pre>
<h2 id="conclusion">
    <a class="header-anchor" href="#conclusion">
      <span class="header-link"></span>
    </a>
    Conclusion</h2><p>Functional programming has been gaining momentum throughout the programming world and ES6 arrow functions make it easier to use this style in JavaScript. If you haven‚Äôt encountered FP style code in JavaScript yet, it‚Äôs likely you will in the coming months. This means that even if you don‚Äôt love the style, it‚Äôs important to understand the basics of this style, some of which we‚Äôve gone over here. Hopefully the concepts outlined in this post have helped prepare you for when you see this code in the wild, and maybe even inspired you to give this style a try!</p>
<h1 id="comments">
    <a class="header-anchor" href="#comments">
      <span class="header-link"></span>
    </a>
    Comments</h1><blockquote>
<p>I think you did a very good (difficult to do a great) job, particularly with your examples. Your post motivates me to dive deeper into FP.</p>
</blockquote>
<p>- Brent Enright, <time datetime="2017-08-25 17:55:54 UTC">August 25, 2017</time></p>
<p>Thanks Brent!! Feedback like this makes my day!</p>
<blockquote>
<p>Thanks. This gave me a bit to think about and mull over. It&#39;s not something that I have spent a lot of time on, but it&#39;s pretty important as I try to better grok the functional programming thing.</p>
</blockquote>
<p>- <a href="http://brianbancroft.io">Brian</a>, <time datetime="2018-06-06 17:43:14 UTC">June 6, 2018</time></p>
<p>Nice!! FP is fun, I hope you keep it up!</p>
<blockquote>
<ul>
<li>I know this is an older article...</li>
<li>Maybe you have seen this rule/advice? <a href="https://eslint.org/docs/rules/no-prototype-builtins">https://eslint.org/docs/rules/no-prototype-builtins</a></li>
<li>I use this little helper (and similar ones for other Object.prototype methods.)</li>
</ul>
<pre><code class="hljs lang-typescript"><span class="hljs-keyword">type</span> IPropertyKey = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | symbol;
<span class="hljs-keyword">const</span> h = <span class="hljs-built_in">Object</span>.prototype.hasOwnProperty;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> hasOwnProperty = (obj, property: IPropertyKey): <span class="hljs-built_in">boolean</span> =&gt; h.call(obj, property);
</code></pre>
<p>Another reason to use Object.prototype.hasOwnProperty.call()
<a href="https://github.com/jquery/jquery/issues/4665">https://github.com/jquery/jquery/issues/4665</a></p>
<p>More and more people are using <code>const a = Object.create(null); a.something = &#39;abc&#39;</code>.  There is no prototype... so hasOwnProperty is undefined there.  But you can use Object.prototype. hasOwnProperty.call(a, &#39;something&#39;);</p>
</blockquote>
<p>- Darcy, <time datetime="2020-12-02 18:34:00 UTC">December 2, 2020</time></p>
<p>That is a good point and one I had not considered. Your comment should serve as ample warning to those considering copy/pasting from this post pell-mell, methinks. Thank you for pointing this out! Here&#39;s the JavaScript version for readers not versed in Typescript:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">const</span> hasOwnProperty = <span class="hljs-function">(<span class="hljs-params">obj, propname</span>) =&gt;</span>
  <span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(object, propname);
</code></pre>
<p>Darcy: why are &quot;more and more people&quot; using <code>a = Object.create(null)</code>? Is there some percieved performance benefit? Strikes me as a bit... well it would certainly be better if it weren&#39;t necessary.</p>

]]></content:encoded></item><item><title>Building to Github Pages with Grunt</title><link>https://sequoia.makes.software/building-to-github-pages-with-grunt</link><description>Wherein I document my Grunt+github-pages+bookmarklet build which required templating, switching branches, rebasing, commit, and all sorts of craziness.</description><guid isPermaLink="true">https://sequoia.makes.software/building-to-github-pages-with-grunt</guid><pubDate>Mon, 02 Dec 2013 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>A while ago I created a <a href="https://en.wikipedia.org/wiki/Bookmarklet">bookmarklet</a> to anonymize Facebook for screenshots, <a href="http://sequoia.github.io/afonigizer/">the Afonigizer</a>. To distribute it, I chose to use <a href="http://pages.github.com/">Github Pages</a>, Github&#39;s free hosting service.  To automate the process of getting updates to my bookmarklet from a javascipt file in my repository to a page on <code>github.io</code>, I used <a href="http://gruntjs.com/">Grunt</a>.  Besides building and distributing distributing bookmarklets, I am sure there are other reasons to build to github pages (or another branch on your repo), so I&#39;m sharing my workflow here.</p>
<p>The following example assumes you are familiar with <a href="https://en.wikipedia.org/wiki/Bookmarklet">bookmarklets</a>, <a href="http://pages.github.com/">Github Pages</a>, and that you&#39;ve used <a href="http://gruntjs.com/">Grunt</a>.  We&#39;ll use a modified version of my bookmarklet build as an example.</p>
<p>So, we have our bookmarklet written, linted, minified, and committed to the <code>master</code> branch, and we&#39;re ready to publish it to the web.  From a high level, this means <strong>checking out</strong> the <code>gh-pages</code> branch, <strong>rebasing</strong> onto master to get the latest javascript, <strong>interpolating</strong> the javascript file into the template, <strong>committing</strong> the new <code>index.html</code> file, and <strong>checking out</strong> <code>master</code> again to wrap up.  Switching branches and rebasing are peculiar tasks for a build, but it can be done (even if it shouldn&#39;t be) and the following Gruntfile snippet explains how.</p>
<h2 id="prerequisites-and-setup">
    <a class="header-anchor" href="#prerequisites-and-setup">
      <span class="header-link"></span>
    </a>
    Prerequisites and setup</h2><p>We need a minified javascript file:</p>
<pre><code class="hljs lang-javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<span class="hljs-keyword">var</span> a=<span class="hljs-string">"@"</span>,b=<span class="hljs-string">"_"</span>,c=<span class="hljs-string">"sequoia"</span>;alert(a+b+c);})();
</code></pre>
<p>And a template file to serve the bookmarklet:</p>
<pre><code class="hljs lang-html"><span class="hljs-comment">&lt;!-- filename: index.html.tpl --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> 
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'javascript:void(&lt;%= marklet %&gt;);'</span>&gt;</span>Bookmarklet!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<h2 id="the-gruntfile">
    <a class="header-anchor" href="#the-gruntfile">
      <span class="header-link"></span>
    </a>
    The Gruntfile</h2><p><em>abridged; see full version <a href="https://github.com/Sequoia/afonigizer/blob/master/Gruntfile.js">here</a></em></p>
<pre><code class="hljs lang-javascript"><span class="hljs-comment">//we'll need `fs` to read the bookmarklet file</span>
fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);
<span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">grunt</span>) </span>{

  <span class="hljs-comment">// Project configuration.</span>
  grunt.initConfig({

<span class="hljs-comment">/* ... */</span>

    gitcheckout: {
      <span class="hljs-comment">//note that (non-"string") object keys cannot contain hyphens in javascript</span>
      ghPages : { <span class="hljs-attr">options</span> : { <span class="hljs-attr">branch</span> : <span class="hljs-string">'gh-pages'</span> } },
      <span class="hljs-attr">master</span> : { <span class="hljs-attr">options</span> : { <span class="hljs-attr">branch</span> : <span class="hljs-string">'master'</span> } }
    },
    <span class="hljs-attr">gitcommit</span>: {
      <span class="hljs-attr">bookmarkletUpdate</span> : {
        <span class="hljs-comment">//add &lt;config:pkg.version&gt; or something else here</span>
        <span class="hljs-comment">//for a more meaningful commit message</span>
        options : { <span class="hljs-attr">message</span> : <span class="hljs-string">'updating marklet'</span> },
        <span class="hljs-attr">files</span> :  { <span class="hljs-attr">src</span>: [<span class="hljs-string">'index.html'</span>] }
      }
    },
    <span class="hljs-attr">gitrebase</span>: {
      <span class="hljs-attr">master</span> : { <span class="hljs-attr">options</span> : { <span class="hljs-attr">branch</span> : <span class="hljs-string">'master'</span> } }
    },
    <span class="hljs-attr">template</span> : {
      <span class="hljs-string">'bookmarkletPage'</span> : {
        <span class="hljs-attr">options</span> : {
          <span class="hljs-attr">data</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
            <span class="hljs-keyword">return</span> {
              <span class="hljs-comment">//the only "data" are the contents of the javascript file</span>
              marklet : fs.readFileSync(<span class="hljs-string">'dist/afonigizer.min.js'</span>,<span class="hljs-string">'ascii'</span>).trim()
            };
          }
        },
        <span class="hljs-attr">files</span> : {
          <span class="hljs-string">'index.html'</span> : [<span class="hljs-string">'index.html.tpl'</span>]
        }
      }
    }
  });

<span class="hljs-comment">/* ... */</span>

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-git'</span>);
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-template'</span>);

  <span class="hljs-comment">//git rebase will not work if there are uncommitted changes,</span>
  <span class="hljs-comment">//so we check for this before getting started</span>
  grunt.registerTask(<span class="hljs-string">'assertNoUncommittedChanges'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">var</span> done = <span class="hljs-keyword">this</span>.async();

    grunt.util.spawn({
      <span class="hljs-attr">cmd</span>: <span class="hljs-string">"git"</span>,
      <span class="hljs-attr">args</span>: [<span class="hljs-string">"diff"</span>, <span class="hljs-string">"--quiet"</span>]
    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, result, code</span>) </span>{
      <span class="hljs-keyword">if</span>(code === <span class="hljs-number">1</span>){
        grunt.fail.fatal(<span class="hljs-string">'There are uncommitted changes. Commit or stash before continuing\n'</span>);
      }
      <span class="hljs-keyword">if</span>(code &lt;= <span class="hljs-number">1</span>){ err = <span class="hljs-literal">null</span>; } <span class="hljs-comment">//codes 0 &amp; 1 are expected, not errors</span>
      done(!err);
    });
  });


  <span class="hljs-comment">//this task is a wrapper around the gitcommit task which</span>
  <span class="hljs-comment">//checks for updates before attempting to commit.</span>
  <span class="hljs-comment">//Without this check, an attempt to commit with no changes will fail</span>
  <span class="hljs-comment">//and exit the whole task.  I didn't feel this state (no changes) should</span>
  <span class="hljs-comment">//break the build process, so this wrapper task just warns &amp; continues.</span>
  grunt.registerTask(<span class="hljs-string">'commitIfChanged'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">var</span> done = <span class="hljs-keyword">this</span>.async();
    grunt.util.spawn({
      <span class="hljs-attr">cmd</span>: <span class="hljs-string">"git"</span>,
      <span class="hljs-attr">args</span>: [<span class="hljs-string">"diff"</span>, <span class="hljs-string">"--quiet"</span>, <span class="hljs-comment">//just exists with 1 or 0 (change, no change)</span>
        <span class="hljs-string">'--'</span>, grunt.config.data.gitcommit.bookmarkletUpdate.files.src]
    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, result, code</span>) </span>{
      <span class="hljs-comment">//only attempt to commit if git diff picks something up</span>
      <span class="hljs-keyword">if</span>(code === <span class="hljs-number">1</span>){
        grunt.log.ok(<span class="hljs-string">'committing new index.html...'</span>);
        grunt.task.run(<span class="hljs-string">'gitcommit:bookmarkletUpdate'</span>);
      }<span class="hljs-keyword">else</span>{
        grunt.log.warn(<span class="hljs-string">'no changes to index.html detected...'</span>);
      }

      <span class="hljs-keyword">if</span>(code &lt;= <span class="hljs-number">1</span>){ err = <span class="hljs-literal">null</span>; } <span class="hljs-comment">//code 0,1 =&gt; no error</span>
      done(!err);
    });
  });

  grunt.registerTask(<span class="hljs-string">'bookmarklet'</span>, <span class="hljs-string">'build the bookmarklet on the gh-pages branch'</span>,
    [ <span class="hljs-string">'assertNoUncommittedChanges'</span>,    <span class="hljs-comment">//exit if working directory's not clean</span>
      <span class="hljs-string">'gitcheckout:ghPages'</span>,           <span class="hljs-comment">//checkout gh-pages branch</span>
      <span class="hljs-string">'gitrebase:master'</span>,              <span class="hljs-comment">//rebase for new changes</span>
      <span class="hljs-string">'template:bookmarkletPage'</span>,      <span class="hljs-comment">//(whatever your desired gh-pages update is)</span>
      <span class="hljs-string">'commitIfChanged'</span>,               <span class="hljs-comment">//commit if changed, otherwise warn &amp; continue</span>
      <span class="hljs-string">'gitcheckout:master'</span>             <span class="hljs-comment">//finish on the master branch</span>
    ]
  );

<span class="hljs-comment">/* ... */</span>

};
</code></pre>
<p>That&#39;s it! üòä</p>
<h2 id="additional-notes">
    <a class="header-anchor" href="#additional-notes">
      <span class="header-link"></span>
    </a>
    Additional Notes</h2><p>Grunt tasks used here were <a href="https://npmjs.org/package/grunt-template"><code>grunt-template</code></a> and <a href="https://npmjs.org/package/grunt-git"><code>grunt-git</code></a> (the latter of which I contributed the rebase task to, for the purpose of this build).</p>
<p><strong>Why use rebase?:</strong> We&#39;re using <code>rebase</code> here instead of <code>merge</code> because it keeps all the <code>gh-pages</code> changes at the tip of the <code>gh-pages</code> branch, which makes the changes on that branch linear and easy to read.    The drawback is that it requires <code>--force</code> every time you push your gh-pages branch, but it allows you to easily roll back your <code>gh-pages</code> stuff (roll back to the last version of your <code>index.html.tpl</code> e.g.) and this branch is never shared or merged back into master, so it seems a worthwhile trade.</p>
<p><strong>Is it realy a good idea to be switching branches, rebasing, etc. as part of an automated build?</strong> Probably not. :)  But it&#39;s very useful in this case!</p>
<p>Please <a href="mailto:sequoia.mcdowell@gmail.com">let me know</a> if you found this post useful or if you have questions or <a href="/contact/">feedback</a>.</p>

]]></content:encoded></item><item><title>Fun With Toilet</title><link>https://sequoia.makes.software/fun-with-toilet</link><description>Shell feeling shabby? Spice things up with Toilet, the ASCII generator!</description><guid isPermaLink="true">https://sequoia.makes.software/fun-with-toilet</guid><pubDate>Sat, 03 Nov 2012 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>Shell feeling shabby? Let Toilet spice it up! <a href="http://caca.zoy.org/wiki/toilet">Toilet</a> is a shell utility from <a href="http://caca.zoy.org/">caca labs</a> that outputs text in large block type.  It is modeled after <a href="http://www.figlet.org/">figlet</a>, adding color and Unicode support.<br>
<em>Note: some examples given here are non-POSIX. I use bash and have confirmed the examples work in zsh.</em></p>
<p>I installed toilet on my (Ubuntu) system using the following command.  Use your package manager or get <a href="http://caca.zoy.org/wiki/toilet">the source</a>.</p>
<pre><code class="hljs lang-sh">sudo apt-get install toilet toilet-fonts
</code></pre>
<p>Toilet comes with a number of fonts by default, installed to <code>/usr/share/figlet</code> on my system.  The following command, run from the directory containing the fonts, will create a file that contains the name of each available font followed by an example.  Note that while the name of the font file with the extension is used in the following command, the extension is not necessary.</p>
<pre><code class="hljs lang-sh"><span class="hljs-keyword">for</span> font <span class="hljs-keyword">in</span> *; <span class="hljs-keyword">do</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$font</span>"</span> &amp;&amp; toilet Hello <span class="hljs-_">-f</span> <span class="hljs-string">"<span class="hljs-variable">$font</span>"</span>;
<span class="hljs-keyword">done</span> &gt; ~/toilet_fonts.txt
</code></pre>
<p>Now you have a file with all the fonts, useful for reference.</p>
<pre><code class="hljs lang-nohighlight">$ head ~/toilet_fonts.txt
ascii12.tlf

 mm    mm            mmmm      mmmm
 ##    ##            &quot;&quot;##      &quot;&quot;##
 ##    ##   m####m     ##        ##       m####m
 ########  ##mmmm##    ##        ##      ##&quot;  &quot;##
 ##    ##  ##&quot;&quot;&quot;&quot;&quot;&quot;    ##        ##      ##    ##
 ##    ##  &quot;##mmmm#    ##mmm     ##mmm   &quot;##mm##&quot;
 &quot;&quot;    &quot;&quot;    &quot;&quot;&quot;&quot;&quot;      &quot;&quot;&quot;&quot;      &quot;&quot;&quot;&quot;     &quot;&quot;&quot;&quot;
</code></pre>
<p>Toilet also comes with options to further transform or decorate your text, called &quot;filters.&quot;  The following command will output the name of each filter followed by an example, as above.  This command outputs to the terminal rather than a file because the filters that add color may not come thru in the saved file</p>
<pre><code class="hljs lang-sh"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> -r filt;
    <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$filt</span>"</span>;
    toilet <span class="hljs-_">-f</span> mono12 <span class="hljs-variable">$USER</span> -F <span class="hljs-string">"<span class="hljs-variable">$filt</span>"</span>;
<span class="hljs-keyword">done</span> &lt; &lt;(toilet -F list | sed -n <span class="hljs-string">'s/\"\(.*\)\".*/\1/p'</span>)
</code></pre>
<p>I like border, flip, and left, but the best filter is of course &quot;gay&quot;.
<img src="/img/gay_filter.png" alt="the word &quot;diamonds&quot; in block text with the &quot;gay&quot; filter applied">
Mix and match fonts and filters to come up with a combination you like.  Note that the filter switch can take a colon separated list of filters e.g. </p>
<pre><code class="hljs lang-sh">toilet <span class="hljs-string">"07734"</span> -F gay:180 <span class="hljs-_">-f</span> smblock
</code></pre>
<p>Excepting the &quot;metal&quot; and &quot;gay&quot; filters, Toilet does not add colors to your text.  This is <a href="http://en.wikipedia.org/wiki/Unix_philosophy#McIlroy:_A_Quarter_Century_of_Unix">as it should be</a> as there are already utilities to add color to text in the terminal.  I know what you&#39;re thinking: &quot;but those terminal escape sequences are a nightmare!&quot; and I was thinking the same thing &#39;til the fine folks of <a href="http://irc.lc/freenode/bash/diamonds_sent_me">#bash</a> set me straight.  To wit, there is a tool called <code>tput</code> which handles color more gracefully than escape sequences.  I encourage you to check out the <a href="http://bash.cumulonim.biz/BashFAQ%282f%29037.html">examples</a> of using <code>tput</code> to color terminal text.  If you just want to get started, use <code>tput setaf x</code> and <code>tput setab x</code> to color your foreground and background, respectively, substituting x with a number 0-9 for different colors.  See <code>man tput</code> and <code>man terminfo</code> (&quot;Color Handling&quot; section) for more.
<img src="/img/tput_toilet.png" alt="examples of using tput with toilet"></p>
<p>So as for what you can actually <em>do</em> with toilet... that will be an excercise left to the reader.  A friendly greeting in bashrc or a big red warning message are two uses that spring to mind.  Drop me a line and let me know how you use it.  Have fun!</p>

]]></content:encoded></item><item><title>LoLshield Sequencer</title><link>https://sequoia.makes.software/lolshield-sequencer</link><description>How do you encode animations for a 9x14 LED matrix? By building a web-app, of course!</description><guid isPermaLink="true">https://sequoia.makes.software/lolshield-sequencer</guid><pubDate>Thu, 19 Jul 2012 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<p>The goal of this project was to create a tool to make it easier to create &quot;animations&quot; on the <a href="http://jimmieprodgers.com/kits/lolshield/makelolshield/">LoL Shield</a>, an <a href="http://arduino.cc/">Arduino</a> shield with a bunch of LEDs.  <a href="https://docs.google.com/spreadsheet/ccc?key=0Aj5ldW_o2jR3dEJXMnI2Q1V4dkNQa0x5U0J2QVdyWHc&amp;hl=en#gid=0">The existing tool</a> that was offered to assist in mapping out the shield states was a Google spreadsheet which I could never figure out how to use.  I wanted a tool that:</p>
<ul>
<li>was point &amp; click (&amp; generally easy to use)</li>
<li>made it easy to visualize how a state would look on the actual board</li>
<li>helped one understand the way the board states are encoded (more on this below)</li>
<li>allowed one to sequence out and play thru an entire animation</li>
<li>allowed nontechnical, hardware curious users control the blinkenlights right away, for immediate gratification (came up with this later)
The impetus for the project was as follows: I wanted to do an Arduino project and thought it&#39;d be cool to have an LED sign that said &quot;diamonds&quot; and did little diamonds animations so I could hang it around my neck on a chain like some post-modern jewelery. I ordered a LoL Shield and while I was waiting for it to come I took a look at <a href="https://github.com/5263/LoLShield/blob/master/examples/LoLShield_BasicTest/LoLShield_BasicTest.pde#L51">the code</a> and found this:</li>
</ul>
<pre><code class="hljs lang-c"><span class="hljs-comment">//Horizontal swipe</span>
{<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>} ,
{<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>},
{<span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>},
{<span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>},
{<span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>},
{<span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>},
{<span class="hljs-number">127</span>, <span class="hljs-number">127</span>, <span class="hljs-number">127</span>, <span class="hljs-number">127</span>, <span class="hljs-number">127</span>, <span class="hljs-number">127</span>, <span class="hljs-number">127</span>, <span class="hljs-number">127</span>, <span class="hljs-number">127</span>},
{<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>},
{<span class="hljs-number">511</span>, <span class="hljs-number">511</span>, <span class="hljs-number">511</span>, <span class="hljs-number">511</span>, <span class="hljs-number">511</span>, <span class="hljs-number">511</span>, <span class="hljs-number">511</span>, <span class="hljs-number">511</span>, <span class="hljs-number">511</span>},
{<span class="hljs-number">1023</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">1023</span>},
{<span class="hljs-number">2047</span>, <span class="hljs-number">2047</span>, <span class="hljs-number">2047</span>, <span class="hljs-number">2047</span>, <span class="hljs-number">2047</span>, <span class="hljs-number">2047</span>, <span class="hljs-number">2047</span>, <span class="hljs-number">2047</span>, <span class="hljs-number">2047</span>},
{<span class="hljs-number">4095</span>, <span class="hljs-number">4095</span>, <span class="hljs-number">4095</span>, <span class="hljs-number">4095</span>, <span class="hljs-number">4095</span>, <span class="hljs-number">4095</span>, <span class="hljs-number">4095</span>, <span class="hljs-number">4095</span>, <span class="hljs-number">4095</span>},
{<span class="hljs-number">8191</span>, <span class="hljs-number">8191</span>, <span class="hljs-number">8191</span>, <span class="hljs-number">8191</span>, <span class="hljs-number">8191</span>, <span class="hljs-number">8191</span>, <span class="hljs-number">8191</span>, <span class="hljs-number">8191</span>, <span class="hljs-number">8191</span>},
{<span class="hljs-number">16383</span>, <span class="hljs-number">16383</span>, <span class="hljs-number">16383</span>, <span class="hljs-number">16383</span>, <span class="hljs-number">16383</span>, <span class="hljs-number">16383</span>, <span class="hljs-number">16383</span>, <span class="hljs-number">16383</span>, <span class="hljs-number">16383</span>},
{<span class="hljs-number">16382</span>, <span class="hljs-number">16382</span>, <span class="hljs-number">16382</span>, <span class="hljs-number">16382</span>, <span class="hljs-number">16382</span>, <span class="hljs-number">16382</span>, <span class="hljs-number">16382</span>, <span class="hljs-number">16382</span>, <span class="hljs-number">16382</span>},
{<span class="hljs-number">16380</span>, <span class="hljs-number">16380</span>, <span class="hljs-number">16380</span>, <span class="hljs-number">16380</span>, <span class="hljs-number">16380</span>, <span class="hljs-number">16380</span>, <span class="hljs-number">16380</span>, <span class="hljs-number">16380</span>, <span class="hljs-number">16380</span>},
{<span class="hljs-number">16376</span>, <span class="hljs-number">16376</span>, <span class="hljs-number">16376</span>, <span class="hljs-number">16376</span>, <span class="hljs-number">16376</span>, <span class="hljs-number">16376</span>, <span class="hljs-number">16376</span>, <span class="hljs-number">16376</span>, <span class="hljs-number">16376</span>},
{<span class="hljs-number">16368</span>, <span class="hljs-number">16368</span>, <span class="hljs-number">16368</span>, <span class="hljs-number">16368</span>, <span class="hljs-number">16368</span>, <span class="hljs-number">16368</span>, <span class="hljs-number">16368</span>, <span class="hljs-number">16368</span>, <span class="hljs-number">16368</span>},
{<span class="hljs-number">16352</span>, <span class="hljs-number">16352</span>, <span class="hljs-number">16352</span>, <span class="hljs-number">16352</span>, <span class="hljs-number">16352</span>, <span class="hljs-number">16352</span>, <span class="hljs-number">16352</span>, <span class="hljs-number">16352</span>, <span class="hljs-number">16352</span>},
{<span class="hljs-number">16320</span>, <span class="hljs-number">16320</span>, <span class="hljs-number">16320</span>, <span class="hljs-number">16320</span>, <span class="hljs-number">16320</span>, <span class="hljs-number">16320</span>, <span class="hljs-number">16320</span>, <span class="hljs-number">16320</span>, <span class="hljs-number">16320</span>},
{<span class="hljs-number">16256</span>, <span class="hljs-number">16256</span>, <span class="hljs-number">16256</span>, <span class="hljs-number">16256</span>, <span class="hljs-number">16256</span>, <span class="hljs-number">16256</span>, <span class="hljs-number">16256</span>, <span class="hljs-number">16256</span>, <span class="hljs-number">16256</span>},
{<span class="hljs-number">16128</span>, <span class="hljs-number">16128</span>, <span class="hljs-number">16128</span>, <span class="hljs-number">16128</span>, <span class="hljs-number">16128</span>, <span class="hljs-number">16128</span>, <span class="hljs-number">16128</span>, <span class="hljs-number">16128</span>, <span class="hljs-number">16128</span>},
{<span class="hljs-number">15872</span>, <span class="hljs-number">15872</span>, <span class="hljs-number">15872</span>, <span class="hljs-number">15872</span>, <span class="hljs-number">15872</span>, <span class="hljs-number">15872</span>, <span class="hljs-number">15872</span>, <span class="hljs-number">15872</span>, <span class="hljs-number">15872</span>},
{<span class="hljs-number">15360</span>, <span class="hljs-number">15360</span>, <span class="hljs-number">15360</span>, <span class="hljs-number">15360</span>, <span class="hljs-number">15360</span>, <span class="hljs-number">15360</span>, <span class="hljs-number">15360</span>, <span class="hljs-number">15360</span>, <span class="hljs-number">15360</span>},
{<span class="hljs-number">14336</span>, <span class="hljs-number">14336</span>, <span class="hljs-number">14336</span>, <span class="hljs-number">14336</span>, <span class="hljs-number">14336</span>, <span class="hljs-number">14336</span>, <span class="hljs-number">14336</span>, <span class="hljs-number">14336</span>, <span class="hljs-number">14336</span>},
{<span class="hljs-number">12288</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">12288</span>},
{<span class="hljs-number">8192</span>, <span class="hljs-number">8192</span>, <span class="hljs-number">8192</span>, <span class="hljs-number">8192</span>, <span class="hljs-number">8192</span>, <span class="hljs-number">8192</span>, <span class="hljs-number">8192</span>, <span class="hljs-number">8192</span>, <span class="hljs-number">8192</span>},
{<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>}, 
{<span class="hljs-number">18000</span>}
</code></pre>
<p>What was all this?! The numbers go up and down and somehow this turns the lights on and off.  I had to learn more.  I looked into it a bit, it turns out its actually not that complicated: there are 9 rows of 14 lights, so each number represents one row, each array of 9 numbers represents one shield state.  Each row of lights on the shield is just a binary number with the least significant bit on the left!  So to turn the first light on, flip the first bit (1), to turn the last light on, flip the 14th bit (8192) etc. (if the dec-&gt;bin conversion isn&#39;t clear, <a href="http://www.wikihow.com/Convert-from-Decimal-to-Binary">read here</a>).  Sequencing out these animations manually, row by row, light by light, was obviously impractical, so I set out building a tool to make it easier.  I also wanted an excuse to use bitwise operators, which I never have occasion to use at work. :p</p>
<p>Please take a break now to look at the <a href="http://sequoia.github.com/LSS/">LoL Shield Sequencer</a>, if you haven&#39;t already.</p>
<p>Well I didn&#39;t get the diamonds animations done ready in time for <a href="http://hopenumbernine.net/">HOPE</a>, but I did get the sequencer working.  I switched tack and decided to make the browser tool drive the physical shield directly, rather than requiring one to cut &amp; paste into the sketch and load it onto the Arduino.  This required transmitting the shield states to the Arduino via the USB port.  I was following <a href="http://arduinobasics.blogspot.com/2011/06/reading-text-or-csv-file-using.html">this tutorial</a> which told how to read a file with <a href="http://processing.org/">Processing</a> and transmit the data to the Arduino with the serial library.  So I need to write to the file, which obviously the browser can&#39;t do.  My steps are now</p>
<ol>
<li>Send shield state from browser (ajax-wise)</li>
<li>Receive the state on server (same box) and write it to a file (I used PHP in the interest of expediency)</li>
<li>Read the file with Processing and write the state to the serial port</li>
<li>Receive the state on the Arduino and draw it to the shield.</li>
</ol>
<p>That&#39;s a lot of steps!  On a lark, I tried writing some text directly to the USB device (<code>echo &quot;1&quot; &gt; /dev/ttyUSB0</code>) and what&#39;s this? It worked! It turns out the Linux kernel writes to the USB port at 9600 baud by default (I&#39;m not sure exactly where this default is set but it is set by U-Boot; see <code>man termios</code> for info on changing it). So I can cut step 3 and write directly from PHP to the USB port.  The initial PHP script, in its entirety:</p>
<pre><code class="hljs lang-php"><span class="hljs-meta">&lt;?php</span>
  file_put_contents(/dev/ttyUSB0 , $_POST[<span class="hljs-string">'frame'</span>]);
<span class="hljs-meta">?&gt;</span>
</code></pre>
<p>Much simpler!  I let people mess around with it and they did! I was very happy.
<img src="/img/lss_hi.jpg" alt="Young man using the LSS in the browser with the Arduino shield updating in real time">
<img src="/img/lss_group.jpg" alt="A small group of people messing with the LSS">
What heartwarming hacker-con moments!  Later I added a <code>localStorage</code> component so people could make little animations &amp; save them, then see what others had done.  I&#39;ll have that up and running next con for sure.</p>
<h2 id="tools-amp-technologies-i-used">
    <a class="header-anchor" href="#tools-amp-technologies-i-used">
      <span class="header-link"></span>
    </a>
    Tools &amp; Technologies I used</h2><ul>
<li>Arduino &amp; soldering iron</li>
<li>Arduino IDE &amp; C</li>
<li>underscore, jquery &amp; require.js &amp; Jam.js</li>
<li>Mousetrap.js (ok not yet but soon!)</li>
<li>PHP &amp; Linux</li>
</ul>
<h2 id="what-i-learned">
    <a class="header-anchor" href="#what-i-learned">
      <span class="header-link"></span>
    </a>
    What I learned</h2><ul>
<li>Serial programming is much harder than I expected! It turns out the software can read faster than the hardware can write so if you write your code wrong your reads will actually &quot;overtake&quot; the serial buffer on the Arduino.</li>
<li>Require.js seems useful but jam.js doesn&#39;t really offer much.  The latter doesn&#39;t keep an up-to-date version of the former, which makes it much less useful (lost a lot of time figuring out why my shims didn&#39;t work)</li>
<li>Linux writes to serial port at 9600 baud by default</li>
<li>Learned to solder</li>
</ul>
<h2 id="next-steps">
    <a class="header-anchor" href="#next-steps">
      <span class="header-link"></span>
    </a>
    Next steps</h2><ul>
<li>Add a few more functions: shift right, left, up, &amp; down; invert (yay more bitwise math!)</li>
<li>Abstract the DOM interactions (writing to DOM, listening for events) to its own module so one could conceivably use the LSS module without the browser</li>
<li>Get Jimmie Rodgers to link to the tool instead of the Google doc!!!</li>
<li>Tests? ehh... we&#39;ll see :)</li>
</ul>

]]></content:encoded></item></channel></rss>